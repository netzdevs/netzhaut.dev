From 30546e47debac75e5d4d309929ac1e0479aea975 Mon Sep 17 00:00:00 2001
From: Dajo Frey <dajo.frey@gmail.com>
Date: Wed, 22 Jun 2022 22:05:14 +0200
Subject: [PATCH] Improve OpenGL implementation etc..

---
 CHANGELOG.txt                               |   4 +-
 CHANGES.txt                                 |   1 +
 build/.nhmake/options.nhmake                |  18 +-
 build/.nhmake/source.nhmake                 |   2 +-
 external/netzhaut.dev                       |   2 +-
 src/bin/nhhtml/Main.c                       | 100 ++++----
 src/bin/nhtty/Main.c                        |  24 +-
 src/bin/nhtty/Preferences.c                 | 213 +++++++++++++++++
 src/bin/nhtty/Preferences.h                 | 100 ++++++++
 src/lib/netzhaut/netzhaut.h                 |  29 +--
 src/lib/netzhaut/nhcore.h                   |  30 ++-
 src/lib/netzhaut/nhcss.h                    |  21 +-
 src/lib/netzhaut/nhecmascript.h             |  15 +-
 src/lib/netzhaut/nhgfx.c                    |   6 +
 src/lib/netzhaut/nhgfx.h                    |  24 +-
 src/lib/netzhaut/nhhtml.h                   |  18 +-
 src/lib/netzhaut/nhmake.h                   | 119 +++++++++-
 src/lib/netzhaut/nhrenderer.h               |  18 +-
 src/lib/netzhaut/nhterminal.c               |  11 +-
 src/lib/netzhaut/nhterminal.h               |  48 +++-
 src/lib/netzhaut/nhtty.h                    |  27 ++-
 src/lib/netzhaut/nhwsi.c                    |  12 +-
 src/lib/netzhaut/nhwsi.h                    |  27 ++-
 src/lib/nhcore/Common/About.h               |   4 +-
 src/lib/nhcore/Common/Config.h              |   4 +-
 src/lib/nhcore/Common/IndexMap.h            |   4 +-
 src/lib/nhcore/Common/Initialize.h          |   4 +-
 src/lib/nhcore/Common/Log.c                 |   4 +-
 src/lib/nhcore/Common/Log.h                 |   4 +-
 src/lib/nhcore/Common/Result.h              |  13 +-
 src/lib/nhcore/Common/Terminate.h           |   4 +-
 src/lib/nhcore/Common/Types/Public.h        |  51 ++---
 src/lib/nhcore/Loader/Library.h             |   4 +-
 src/lib/nhcore/Loader/Loader.c              |   2 +-
 src/lib/nhcore/Loader/Loader.h              |   6 +-
 src/lib/nhcore/Loader/Reload.h              |   4 +-
 src/lib/nhcore/Loader/Repository.h          |   4 +-
 src/lib/nhcore/System/Channel.h             |   4 +-
 src/lib/nhcore/System/Logger.h              |   4 +-
 src/lib/nhcore/System/Memory.h              |   4 +-
 src/lib/nhcore/System/Process.h             |   4 +-
 src/lib/nhcore/System/System.h              |   4 +-
 src/lib/nhcore/System/Thread.h              |   4 +-
 src/lib/nhcore/Util/Array.c                 |  33 ++-
 src/lib/nhcore/Util/Array.h                 |   8 +-
 src/lib/nhcore/Util/ArrayList.h             |   4 +-
 src/lib/nhcore/Util/BigInt.h                |   4 +-
 src/lib/nhcore/Util/File.h                  |   4 +-
 src/lib/nhcore/Util/HashMap.h               |   4 +-
 src/lib/nhcore/Util/LinkedList.h            |   4 +-
 src/lib/nhcore/Util/List.h                  |   4 +-
 src/lib/nhcore/Util/Math.h                  |   4 +-
 src/lib/nhcore/Util/MediaType.h             |   4 +-
 src/lib/nhcore/Util/RingBuffer.h            |   4 +-
 src/lib/nhcore/Util/Stack.h                 |   4 +-
 src/lib/nhcore/Util/String.c                |   7 +
 src/lib/nhcore/Util/String.h                |  16 +-
 src/lib/nhcore/Util/Time.h                  |   4 +-
 src/lib/nhcss/Common/Log.c                  |  14 +-
 src/lib/nhcss/Common/Result.h               |   9 +-
 src/lib/nhcss/Common/Types/Public.h         |  10 +-
 src/lib/nhcss/Interfaces/StyleSheet.c       |   2 +-
 src/lib/nhcss/Parser/ComponentParser.c      |   2 +-
 src/lib/nhcss/Parser/Match.c                |   6 +-
 src/lib/nhcss/Properties/Compute.c          |   2 +-
 src/lib/nhcss/Properties/Values.c           |   2 +-
 src/lib/nhdom/Common/Result.h               |   9 +-
 src/lib/nhdom/Common/Types/Public.h         |   4 +-
 src/lib/nhecmascript/Common/Result.h        |  14 +-
 src/lib/nhecmascript/Common/Types/Public.h  |   4 +-
 src/lib/nhencoding/Common/Result.h          |   9 +-
 src/lib/nhencoding/Common/Types/Public.h    |  14 +-
 src/lib/nhencoding/Encodings/UTF8.c         |   2 +-
 src/lib/nhencoding/Encodings/UTF8.h         |   2 +-
 src/lib/nhgfx/Base/Surface.c                |  28 +++
 src/lib/nhgfx/Base/Surface.h                |  19 +-
 src/lib/nhgfx/Base/Viewport.h               |   2 +-
 src/lib/nhgfx/Common/Initialize.c           |   2 +
 src/lib/nhgfx/Common/Log.c                  |  14 ++
 src/lib/nhgfx/Common/Log.h                  |   4 +
 src/lib/nhgfx/Common/Result.h               |  14 +-
 src/lib/nhgfx/Common/Terminate.c            |   2 +
 src/lib/nhgfx/Common/Types/Public.h         |  10 +-
 src/lib/nhgfx/OpenGL/API.c                  |   2 +
 src/lib/nhgfx/OpenGL/API.h                  |   1 +
 src/lib/nhgfx/OpenGL/Commands.c             | 162 ++++++++++++-
 src/lib/nhgfx/OpenGL/Data.c                 |   8 +-
 src/lib/nhgfx/OpenGL/Data.h                 |   5 +-
 src/lib/nhgfx/OpenGL/Surface.c              | 111 +++++++--
 src/lib/nhgfx/OpenGL/Surface.h              |  12 +
 src/lib/nhgfx/OpenGL/Viewport.c             |   2 +
 src/lib/nhhtml/Common/Log.c                 |   2 +-
 src/lib/nhhtml/Common/Result.h              |   9 +-
 src/lib/nhhtml/Common/Types/Public.h        |   4 +-
 src/lib/nhmake/Common/Result.h              |   9 +-
 src/lib/nhmake/Common/Types/Public.h        |  19 +-
 src/lib/nhnetwork/Common/Result.h           |   9 +-
 src/lib/nhrenderer/Common/Result.h          |   9 +-
 src/lib/nhrenderer/Common/Types/Public.h    |   4 +-
 src/lib/nhterminal/Common/Result.h          |   9 +-
 src/lib/nhterminal/Common/Types/Public.h    |   4 +-
 src/lib/nhterminal/OpenGL/Render.c          |  92 +++++---
 src/lib/nhterminal/OpenGL/Render.h          |   2 +-
 src/lib/nhterminal/OpenGL/Text.c            | 241 ++++++++++++++------
 src/lib/nhterminal/OpenGL/Text.h            |  21 +-
 src/lib/nhterminal/Terminal/.Terminal.c.swp | Bin 20480 -> 0 bytes
 src/lib/nhterminal/Terminal/Graphics.c      | 145 ++++++++++--
 src/lib/nhterminal/Terminal/Graphics.h      |  47 ++--
 src/lib/nhterminal/Terminal/Grid.c          |  20 +-
 src/lib/nhterminal/Terminal/Grid.h          |   9 +-
 src/lib/nhterminal/Terminal/Parser.c        |  10 +-
 src/lib/nhterminal/Terminal/Parser.h        |   2 +-
 src/lib/nhterminal/Terminal/Terminal.c      | 147 +++++++-----
 src/lib/nhterminal/Terminal/Terminal.h      |  16 +-
 src/lib/nhterminal/Vulkan/Render.c          |  14 +-
 src/lib/nhtty/Common/Result.h               |   9 +-
 src/lib/nhtty/Common/Types/Public.h         |  24 +-
 src/lib/nhtty/Editor/ChangesFile.c          |   2 +-
 src/lib/nhtty/Editor/Editor.c               |   4 +-
 src/lib/nhtty/Editor/File.c                 |   2 +-
 src/lib/nhtty/Editor/TextFile.c             |  10 +-
 src/lib/nhtty/Editor/TreeListing.c          |   8 +-
 src/lib/nhtty/TTY/Console.c                 |   6 +-
 src/lib/nhtty/TTY/Program.c                 |  51 ++++-
 src/lib/nhtty/TTY/TTY.c                     |  17 ++
 src/lib/nhtty/TTY/TTY.h                     |  22 ++
 src/lib/nhtty/TTY/Tiling.c                  |  49 ++--
 src/lib/nhurl/Common/Result.h               |   9 +-
 src/lib/nhurl/Common/Test.c                 |   2 +-
 src/lib/nhurl/Common/Types/Public.h         |  14 +-
 src/lib/nhwebidl/Common/Result.h            |  14 +-
 src/lib/nhwebidl/Common/Types/Public.h      |  14 +-
 src/lib/nhwsi/Common/Result.h               |   9 +-
 src/lib/nhwsi/Common/Types/Public.h         |  21 +-
 src/lib/nhwsi/Main/Window.c                 |  30 ++-
 src/lib/nhwsi/Main/Window.h                 |   9 +-
 src/lib/nhwsi/Platforms/Win32.c             |   3 +-
 src/lib/nhwsi/Platforms/Win32.h             |   5 +-
 src/lib/nhwsi/Platforms/X11.c               |  99 ++++++--
 src/lib/nhwsi/Platforms/X11.h               |  12 +-
 140 files changed, 2067 insertions(+), 838 deletions(-)
 create mode 100644 CHANGES.txt
 create mode 100644 src/bin/nhtty/Preferences.c
 create mode 100644 src/bin/nhtty/Preferences.h
 delete mode 100644 src/lib/nhterminal/Terminal/.Terminal.c.swp

diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index c3ac9fe..8ac214f 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,5 +1,5 @@
-changes{date:"2022-05-29"time:"20:04:45"id:"f375467bce64b2ee57d04bc7d6a8999c871c8d4f"summary:"Get text rendering kinda working using OpenGL."author{name:"Dajo Frey"contact:"https://github.com/dajofrey"}workload{scope:"patch"lib:"nhgfx","nhterminal"}}
-changes{date:"2022-05-28"time:"16:07:04"id:"be7dfc8a21e4e40b9a4cdbd66d9ce21a411efed6"summary:"Partially fix OpenGL implementation."author{name:"Dajo Frey"contact:"https://github.com/dajofrey"}workload{scope:"patch"lib:"nhgfx","nhterminal"}}
+changes{date:"2022-05-29"time:"20:04:45"summary:"Get text rendering kinda working using OpenGL."author{name:"Dajo Frey"contact:"https://github.com/dajofrey"}workload{scope:"patch"lib:"nhgfx","nhterminal"}}
+changes{date:"2022-05-28"time:"16:07:04"summary:"Partially fix OpenGL implementation."author{name:"Dajo Frey"contact:"https://github.com/dajofrey"}workload{scope:"patch"lib:"nhgfx","nhterminal"}}
 changes{date:"2022-05-27"time:"16:36:15"summary:"Hopefully fix font-size issue."author{name:"Dajo Frey"contact:"https://github.com/dajofrey"}workload{scope:"patch"lib:"nhgfx"}}
 changes{date:"2022-05-24"time:"18:26:08"summary:"Make temporary terminal font selection more robust."author{name:"Dajo Frey"contact:"https://github.com/dajofrey"}workload{scope:"patch"lib:"nhterminal"}}
 changes{date:"2022-05-23"time:"23:45:23"summary:"Continue work on OpenGL implementation."author{name:"Dajo Frey"contact:"https://github.com/dajofrey"}workload{scope:"minor"lib:"nhgfx","nhterminal","nhwsi"}}
diff --git a/CHANGES.txt b/CHANGES.txt
new file mode 100644
index 0000000..f6a277e
--- /dev/null
+++ b/CHANGES.txt
@@ -0,0 +1 @@
+changes{summary:"Improve OpenGL implementation etc.."author{name:"Dajo Frey"contact:"https://github.com/dajofrey"}workload{scope:"patch"lib:"nhgfx","nhterminal","nhcore","nhwsi","nhtty","nhurl","nhencoding"}}
diff --git a/build/.nhmake/options.nhmake b/build/.nhmake/options.nhmake
index 9e4c6f1..09be4e4 100644
--- a/build/.nhmake/options.nhmake
+++ b/build/.nhmake/options.nhmake
@@ -164,14 +164,20 @@
     )
     updateHeaders(
         "external/netzhaut.dev/docs/index.html",
+        "external/netzhaut.dev/docs/theme/header_internals.html",
         "external/netzhaut.dev/docs/theme/header_api.html",
-        "external/netzhaut.dev/docs/theme/header_architecture.html",
         "external/netzhaut.dev/docs/theme/header_changelogs.html",
-        "external/netzhaut.dev/docs/theme/header_design.html",
-        "external/netzhaut.dev/docs/theme/header_general.html",
-        "external/netzhaut.dev/docs/theme/header_guides.html",
-        "external/netzhaut.dev/docs/theme/header_internals.html",
-        "external/netzhaut.dev/docs/theme/header_patches.html"
+        "external/netzhaut.dev/docs/theme/header_patches.html",
+        "external/netzhaut.dev/docs/home/html/build.html",
+        "external/netzhaut.dev/docs/home/html/authors.html",
+        "external/netzhaut.dev/docs/home/html/license.html",
+        "external/netzhaut.dev/docs/architecture/html/projectlayout.html",
+        "external/netzhaut.dev/docs/architecture/html/systemarchitecture.html",
+        "external/netzhaut.dev/docs/architecture/html/enginearchitecture.html",
+        "external/netzhaut.dev/docs/design/html/codestyle.html",
+        "external/netzhaut.dev/docs/design/html/nhnakegrammar.html",
+        "external/netzhaut.dev/docs/design/html/nhnakelanguage.html",
+        "external/netzhaut.dev/docs/design/html/nhnakeruntime.html",
     )
     createChangelogs(
         "external/netzhaut.dev/docs/changelogs/main.md"
diff --git a/build/.nhmake/source.nhmake b/build/.nhmake/source.nhmake
index 4da2c3e..49453d7 100644
--- a/build/.nhmake/source.nhmake
+++ b/build/.nhmake/source.nhmake
@@ -68,7 +68,7 @@ link_lib(nhcore,"-lm -ldl -L${PROJ_DIR}/external/c_hashmap -l:libc_hashmap.a")
 link_lib(nhwsi,"-lX11 -lX11-xcb -lXcursor -lxkbcommon -lxkbcommon-x11")
 link_lib(nhtty,"-lutil")
 link_lib(nhnetwork,"-lssl")
-link_lib(nhgfx,"-lX11 -lfreetype -lharfbuzz -L${PROJ_DIR}/external/volk-master/ -l:libvolk.a -L${PROJ_DIR}/external/freetype-gl -lfreetype-gl -lGL")
+link_lib(nhgfx,"-lX11 -lXrender -lXext -lfreetype -lharfbuzz -L${PROJ_DIR}/external/volk-master/ -l:libvolk.a -L${PROJ_DIR}/external/freetype-gl -lfreetype-gl -lGL")
 
 // LINK BINARIES ===================================================================================
 
diff --git a/external/netzhaut.dev b/external/netzhaut.dev
index b1c64e1..cc555d8 160000
--- a/external/netzhaut.dev
+++ b/external/netzhaut.dev
@@ -1 +1 @@
-Subproject commit b1c64e11af49e0497be4fc2cc147ccce687537ad
+Subproject commit cc555d85ca86f5a332c51ad67fa6761164ee8714
diff --git a/src/bin/nhhtml/Main.c b/src/bin/nhhtml/Main.c
index 5785fb8..bdf5997 100644
--- a/src/bin/nhhtml/Main.c
+++ b/src/bin/nhhtml/Main.c
@@ -86,55 +86,55 @@ static int openLogger(
 int main(
     int argc, char **argv_pp) 
 {
-    if (argc <= 1) {return 1;}
-
-    long size;
-    void *document_p = getFileData(argv_pp[1], &size);
-
-    if (!document_p || !size) {return 1;}
-
-    if (nh_initialize(NH_LOADER_SCOPE_SYSTEM, NULL, NH_FALSE) != NH_SUCCESS) {return 1;}
-
-    nh_PixelSize Size;
-    Size.width  = 1000;
-    Size.height = 1000;
-
-    nh_wsi_Window *Window_p = nh_wsi_createWindow("Window Title", Size);
-    if (!Window_p) {return 1;}
-
-    nh_wsi_setEventListener(Window_p, handleInput);
-
-    nh_gfx_Surface *Surface_p = nh_gfx_createSurface(Window_p, NH_GFX_API_VULKAN);
-    if (!Surface_p) {return 1;}
-
-    if (openLogger(Surface_p)) {return 1;}
-
-    nh_PixelPosition Position;
-    Position.x = 0;
-    Position.y = 0;
-
-    Size.height = 700;
-
-    nh_gfx_Viewport *Viewport_p = nh_gfx_createViewport(Surface_p, Position, Size);
-    if (!Viewport_p) {return 1;}
-
-    nh_html_DocumentContext *DocumentContext_p = nh_html_createDocumentContext(NH_FALSE);
-    if (!DocumentContext_p) {return 1;}
-
-    nh_css_LayoutEngine *LayoutEngine_p = nh_css_createLayoutEngine(DocumentContext_p);
-    if (!LayoutEngine_p) {return 1;}
-
-    nh_renderer_Renderer *Renderer_p = nh_renderer_createRenderer(LayoutEngine_p);
-    if (!Renderer_p) {return 1;}
-
-    if (nh_renderer_addViewport(Renderer_p, Viewport_p)) {return 1;}
-    if (nh_html_loadBytes(DocumentContext_p, document_p, size)) {return 1;}
-
-    while (1) {
-        if (!nh_run()) {usleep(10000);}
-        if (!nh_keepRunning()) {break;}
-    }
-
-    nh_terminate();
+//    if (argc <= 1) {return 1;}
+//
+//    long size;
+//    void *document_p = getFileData(argv_pp[1], &size);
+//
+//    if (!document_p || !size) {return 1;}
+//
+//    if (nh_initialize(NH_LOADER_SCOPE_SYSTEM, NULL, NH_FALSE) != NH_SUCCESS) {return 1;}
+//
+//    nh_PixelSize Size;
+//    Size.width  = 1000;
+//    Size.height = 1000;
+//
+//    nh_wsi_Window *Window_p = nh_wsi_createWindow("Window Title", Size);
+//    if (!Window_p) {return 1;}
+//
+//    nh_wsi_setEventListener(Window_p, handleInput);
+//
+//    nh_gfx_Surface *Surface_p = nh_gfx_createSurface(Window_p, NH_GFX_API_VULKAN);
+//    if (!Surface_p) {return 1;}
+//
+//    if (openLogger(Surface_p)) {return 1;}
+//
+//    nh_PixelPosition Position;
+//    Position.x = 0;
+//    Position.y = 0;
+//
+//    Size.height = 700;
+//
+//    nh_gfx_Viewport *Viewport_p = nh_gfx_createViewport(Surface_p, Position, Size);
+//    if (!Viewport_p) {return 1;}
+//
+//    nh_html_DocumentContext *DocumentContext_p = nh_html_createDocumentContext(NH_FALSE);
+//    if (!DocumentContext_p) {return 1;}
+//
+//    nh_css_LayoutEngine *LayoutEngine_p = nh_css_createLayoutEngine(DocumentContext_p);
+//    if (!LayoutEngine_p) {return 1;}
+//
+//    nh_renderer_Renderer *Renderer_p = nh_renderer_createRenderer(LayoutEngine_p);
+//    if (!Renderer_p) {return 1;}
+//
+//    if (nh_renderer_addViewport(Renderer_p, Viewport_p)) {return 1;}
+//    if (nh_html_loadBytes(DocumentContext_p, document_p, size)) {return 1;}
+//
+//    while (1) {
+//        if (!nh_run()) {usleep(10000);}
+//        if (!nh_keepRunning()) {break;}
+//    }
+//
+//    nh_terminate();
 }
 
diff --git a/src/bin/nhtty/Main.c b/src/bin/nhtty/Main.c
index 9e8f6c6..a2f6f79 100644
--- a/src/bin/nhtty/Main.c
+++ b/src/bin/nhtty/Main.c
@@ -82,17 +82,21 @@ int main(int argc, char **argv_pp)
         nh_terminal_Terminal *Terminal_p =  nh_terminal_openTerminal(TTY_p);
         if (!Terminal_p) {return 1;}
 
-        nh_PixelSize Size;
-        Size.width  = 1000;
-        Size.height = 1000;
-    
-        nh_wsi_Window *Window_p = nh_wsi_createWindow("Window Title", Size);
+        nh_wsi_WindowConfiguration WindowConfiguration;
+        if (nh_wsi_initWindowConfiguration(&WindowConfiguration) != NH_WSI_SUCCESS) {
+            return 1;
+        }
+
+        nh_wsi_Window *Window_p = 
+            nh_wsi_createWindow(WindowConfiguration, nh_gfx_getSurfaceRequirements());
         if (!Window_p) {return 1;}
-    
+   
         nh_gfx_Surface *Surface_p = nh_gfx_createSurface(Window_p, getGraphicsBackend());
         if (!Surface_p) {return 1;}
     
-        nh_PixelPosition Position;
+        nh_PixelPosition Position = {0};
+
+        nh_PixelSize Size;
         Size.width  = 1000;
         Size.height = 1000;
     
@@ -104,6 +108,12 @@ int main(int argc, char **argv_pp)
         }
         
         nh_wsi_setEventListener(Window_p, handleWindowInput);
+
+        nh_Color Color;
+        Color.r = 0.0f;
+        Color.g = 1.0f;
+        Color.b = 0.0f;
+        nh_terminal_setColor(Terminal_p, Color, NH_TRUE); 
     }
 
     if (nh_tty_addDefaultProgram(TTY_p, "shell") != NH_TTY_SUCCESS) {
diff --git a/src/bin/nhtty/Preferences.c b/src/bin/nhtty/Preferences.c
new file mode 100644
index 0000000..bea7fe2
--- /dev/null
+++ b/src/bin/nhtty/Preferences.c
@@ -0,0 +1,213 @@
+// LICENSE NOTICE ==================================================================================
+
+/**
+ * netzhaut - Web Browser Engine
+ * Copyright (C) 2020 The netzhaut Authors
+ * Published under MIT
+ */
+
+// INCLUDE =========================================================================================
+
+#include "Preferences.h"
+
+#include "../TTY/TTY.h"
+#include "../Common/Macros/Macros.h"
+
+#include NH_TTY_FLOW
+#include NH_TTY_DEFAULT_CHECK
+
+#include "../../nhcore/System/Logger.h"
+#include "../../nhcore/System/Memory.h"
+
+#include "../../nhencoding/Encodings/UTF32.h"
+#include "../../nhencoding/Encodings/UTF8.h"
+
+#include <stddef.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <string.h>
+#include <dirent.h>
+#include <stdlib.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+
+// INIT ============================================================================================
+
+void *nh_tty_initPreferences()
+{
+NH_TTY_BEGIN()
+
+#include NH_TTY_CUSTOM_CHECK
+
+    nh_tty_Preferences *Preferences_p = nh_allocate(sizeof(nh_tty_Preferences));
+    NH_TTY_CHECK_MEM(NULL, Preferences_p)
+
+    Preferences_p->focus       = 0;
+    Preferences_p->insertMode  = NH_FALSE;
+    Preferences_p->treeListing = NH_TRUE;
+
+    Preferences_p->LastUpdate = nh_getSystemTime();
+    Preferences_p->updateIntervalInSeconds = 1.0;
+
+#include NH_TTY_DEFAULT_CHECK
+
+NH_TTY_END(Preferences_p)
+}
+
+// VIEW ============================================================================================
+
+void *nh_tty_createPreferencesView()
+{
+NH_TTY_BEGIN()
+
+    nh_tty_PreferencesView *View_p = nh_allocate(sizeof(nh_tty_PreferencesView));
+
+    View_p->FileViews = nh_initList(8);
+    View_p->helpScroll = 0;
+    View_p->height = 0;
+    View_p->treeListingOffset = 0;
+    View_p->treeListingCurrent = 0;
+    View_p->filePreferencesWidth = 0;
+
+NH_TTY_END(View_p)
+}
+
+void nh_tty_destroyPreferencesView(
+    void *p)
+{
+NH_TTY_BEGIN()
+
+    nh_free(p);
+
+NH_TTY_SILENT_END()
+}
+
+// UPDATE ==========================================================================================
+
+NH_TTY_RESULT nh_tty_updatePreferences(
+    nh_tty_Program *Program_p)
+{
+NH_TTY_BEGIN()
+
+    nh_tty_Preferences *Preferences_p = Program_p->handle_p;
+
+    nh_SystemTime Now = nh_getSystemTime();
+    if (nh_getSystemTimeDiffInSeconds(Preferences_p->LastUpdate, Now) < Preferences_p->updateIntervalInSeconds) {
+        NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
+    }
+
+    NH_BOOL updated = NH_FALSE;
+    Preferences_p->LastUpdate = Now;
+
+NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
+}
+
+// INPUT ===========================================================================================
+
+NH_TTY_RESULT nh_tty_handlePreferencesInput(
+    nh_tty_Program *Program_p, nh_tty_Event Event)
+{
+NH_TTY_BEGIN()
+
+    if (Event.trigger != NH_WSI_TRIGGER_PRESS) {NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)}
+
+    NH_ENCODING_UTF32 c = Event.codepoint;
+    nh_tty_Preferences *Preferences_p = Program_p->handle_p;
+
+    switch (c) 
+    {
+        case CTRL_KEY('w') :
+        case CTRL_KEY('a') :
+        case CTRL_KEY('s') :
+        case CTRL_KEY('d') :
+            break;
+
+        default :
+	    break;
+    }
+ 
+NH_TTY_END(NH_TTY_SUCCESS)
+}
+
+// DRAW ============================================================================================
+
+NH_TTY_RESULT nh_tty_drawPreferencesRow(
+    nh_tty_Program *Program_p, nh_encoding_UTF8String *Row_p, int width, int height, int row)
+{
+NH_TTY_BEGIN()
+
+    nh_tty_Preferences *Preferences_p = Program_p->handle_p;
+    nh_tty_PreferencesView *View_p = Program_p->view_p;
+
+    View_p->height = height;
+
+    NH_ENCODING_UTF32 tmp_p[1];
+    tmp_p[0] = 32;
+
+    for (int i = 0; i < width; ++i) {
+        nh_encoding_appendUTF8(Row_p, tmp_p, 1);
+    }
+
+NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
+}
+
+// CURSOR ==========================================================================================
+
+NH_TTY_RESULT nh_tty_getPreferencesCursor(
+    nh_tty_Program *Program_p, int *x_p, int *y_p)
+{
+NH_TTY_BEGIN()
+
+    *x_p = -1;
+    *y_p = -1;
+
+NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
+}
+
+// COMMANDS ========================================================================================
+
+NH_BYTE *NH_TTY_PREFERENCES_COMMANDS_PP[] = {
+    "borders",
+    "topbars",
+};
+
+int NH_TTY_PREFERENCES_COMMANDS_PP_SIZE = sizeof(NH_TTY_PREFERENCES_COMMANDS_PP)/sizeof(NH_TTY_PREFERENCES_COMMANDS_PP[0]);
+
+NH_TTY_RESULT nh_tty_executePreferencesCommand(
+    nh_tty_Program *Program_p, nh_List *Arguments_p)
+{
+NH_TTY_BEGIN()
+
+    nh_tty_Preferences *Preferences_p = Program_p->handle_p;
+
+    switch (Program_p->command)
+    {
+        case NH_TTY_PREFERENCES_COMMAND_BORDERS:
+	    if (Arguments_p->size == 1) {
+                nh_encoding_UTF32String *Argument_p = Arguments_p->pp[0];
+                if (nh_encoding_compareUTF32ASCII(Argument_p->p, "on")) {
+		    nh_tty_setBorders(NH_TRUE);
+	        }
+		if (nh_encoding_compareUTF32ASCII(Argument_p->p, "off")) {
+		    nh_tty_setBorders(NH_FALSE);
+	        }
+            }
+            break;
+        case NH_TTY_PREFERENCES_COMMAND_TOPBARS:
+	    if (Arguments_p->size == 1) {
+                nh_encoding_UTF32String *Argument_p = Arguments_p->pp[0];
+                if (nh_encoding_compareUTF32ASCII(Argument_p->p, "on")) {
+		    nh_tty_setTopBars(NH_TRUE);
+	        }
+		if (nh_encoding_compareUTF32ASCII(Argument_p->p, "off")) {
+		    nh_tty_setTopBars(NH_FALSE);
+	        }
+            }
+            break;
+        default : NH_TTY_DIAGNOSTIC_END(NH_TTY_ERROR_UNKNOWN_COMMAND)
+    }
+
+NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
+}
+
diff --git a/src/bin/nhtty/Preferences.h b/src/bin/nhtty/Preferences.h
new file mode 100644
index 0000000..85ee332
--- /dev/null
+++ b/src/bin/nhtty/Preferences.h
@@ -0,0 +1,100 @@
+#ifndef NH_TTY_PREFERENCES_H
+#define NH_TTY_PREFERENCES_H
+
+#ifndef DOXYGEN_SHOULD_SKIP_THIS
+
+/**
+ * netzhaut - Web Browser Engine
+ * Copyright (C) 2020 The netzhaut Authors
+ * Published under MIT
+ */
+
+#include "../TTY/Program.h"
+#include "../Common/Types/Private.h"
+
+#include "../../nhcore/Util/String.h"
+#include "../../nhcore/Util/Time.h"
+
+#endif
+
+/** @addtogroup lib_nhtty_enums
+ *  @{
+ */
+
+    typedef enum NH_TTY_PREFERENCES_COMMAND {
+        NH_TTY_PREFERENCES_COMMAND_BORDERS,
+        NH_TTY_PREFERENCES_COMMAND_TOPBARS,
+    } NH_TTY_PREFERENCES_COMMAND;
+
+/** @} */
+
+/** @addtogroup lib_nhtty_structs
+ *  @{
+ */
+
+    typedef struct nh_tty_PreferencesView {
+        nh_List FileViews;
+        int helpScroll;
+        int height;
+        int filePreferencesWidth;
+        int treeListingWidth;
+        int treeListingOffset;
+        int treeListingCurrent;
+    } nh_tty_PreferencesView;
+
+    typedef struct nh_tty_Preferences {
+        int focus;
+        NH_BOOL insertMode;
+        NH_BOOL treeListing;
+        nh_SystemTime LastUpdate;
+        double updateIntervalInSeconds;
+    } nh_tty_Preferences;
+
+/** @} */
+
+/** @addtogroup lib_nhtty_vars
+ *  @{
+ */
+
+    extern NH_BYTE *NH_TTY_PREFERENCES_COMMANDS_PP[];
+    extern int NH_TTY_PREFERENCES_COMMANDS_PP_SIZE;
+
+/** @} */
+
+/** @addtogroup lib_nhtty_functions
+ *  @{
+ */
+
+    void *nh_tty_createPreferencesView(
+    );
+    
+    void nh_tty_destroyPreferencesView(
+        void *p
+    );
+
+    void *nh_tty_initPreferences(
+    );
+
+    NH_TTY_RESULT nh_tty_updatePreferences(
+        nh_tty_Program *Program_p
+    );
+
+    NH_TTY_RESULT nh_tty_handlePreferencesInput(
+        nh_tty_Program *Program_p, nh_tty_Event Event
+    );
+
+    NH_TTY_RESULT nh_tty_drawPreferencesRow(
+        nh_tty_Program *Program_p, nh_encoding_UTF8String *Row_p, int width, int height, int row 
+    );
+
+    NH_TTY_RESULT nh_tty_getPreferencesCursor(
+        nh_tty_Program *Program_p, int *x_p, int *y_p
+    );
+
+    NH_TTY_RESULT nh_tty_executePreferencesCommand(
+        nh_tty_Program *Program_p, nh_List *Arguments_p
+    );
+
+/** @} */
+
+#endif 
diff --git a/src/lib/netzhaut/netzhaut.h b/src/lib/netzhaut/netzhaut.h
index 6fad0c3..34343e4 100644
--- a/src/lib/netzhaut/netzhaut.h
+++ b/src/lib/netzhaut/netzhaut.h
@@ -18,31 +18,7 @@
 
 #endif
 
-/** @defgroup lib lib 
- *  @brief Libraries.
- */
-
-/** @defgroup lib_netzhaut netzhaut
- *  @ingroup lib
- *  @brief TODO
- */
-
-/** @defgroup lib_netzhaut_version Version
- *  @ingroup lib_netzhaut
- */
-/** @defgroup lib_netzhaut_vars Variables
- *  @ingroup lib_netzhaut
- */
-/** @defgroup lib_netzhaut_macros Macros
- *  @ingroup lib_netzhaut
- */
-/** @defgroup lib_netzhaut_functions Functions
- *  @ingroup lib_netzhaut
- */
-
-/** @addtogroup lib_netzhaut_version
- *  @{
- */
+/** @{ */
 
     /**
      * The API version is used for documenting backwards-incompatible API changes. 
@@ -64,6 +40,9 @@
      */
     #define NETZHAUT_PATCH_VERSION 0
 
+/** @} */
+/** @{ */
+
     /**
      * Version array. 
      */
diff --git a/src/lib/netzhaut/nhcore.h b/src/lib/netzhaut/nhcore.h
index 3d85bbd..2b68cd6 100644
--- a/src/lib/netzhaut/nhcore.h
+++ b/src/lib/netzhaut/nhcore.h
@@ -13,34 +13,56 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_vars 
- *  @{
- */
+/** @{ */
 
     extern nh_Loader *NH_LOADER_P;
 
 /** @} */
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhcore nhcore
+ *  @brief Initialize, run and terminate Netzhaut, among other critical functions. 
+ *  
+ *  This module relates to the nhcore.h file and is included by netzhaut.h. 
+ */
+
+/** @addtogroup api_nhcore
  *  @{
  */
 
+    /**
+     * Todo. 
+     */
     NH_RESULT nh_initialize(
          NH_LOADER_SCOPE loaderScope, NH_BYTE *loaderPath_p, NH_BOOL install
     );
 
+    /**
+     * Todo. 
+     */
     NH_RESULT nh_initializeUsingDefaultArguments(
     );
 
+    /**
+     * Todo. 
+     */
     unsigned int nh_run(
     );
 
+    /**
+     * Todo. 
+     */
     NH_BOOL nh_keepRunning(
     );
 
+    /**
+     * Todo. 
+     */
     NH_RESULT nh_terminate(
     );
 
+    /**
+     * Todo. 
+     */
     NH_RESULT nh_addLogCallback(
         nh_logCallback_f logCallback_f
     );
diff --git a/src/lib/netzhaut/nhcss.h b/src/lib/netzhaut/nhcss.h
index d2c502f..2969719 100644
--- a/src/lib/netzhaut/nhcss.h
+++ b/src/lib/netzhaut/nhcss.h
@@ -1,5 +1,5 @@
-#ifndef NETZHAUT_CSS_H
-#define NETZHAUT_CSS_H
+#ifndef NH_CSS_H
+#define NH_CSS_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -14,22 +14,35 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhcss nhcss
+ *  @brief Create CSS based layout engines for rendering HTML documents.
+ */
+
+/** @addtogroup api_nhcss 
  *  @{
  */
 
+    /**
+     * Todo.
+     */
     nh_css_LayoutEngine *nh_css_createLayoutEngine(
         nh_html_DocumentContext *DocumentContext_p
     );
 
+    /**
+     * Todo.
+     */
     nh_css_CanvasType nh_css_createCanvasType(
         nh_PixelSize Size 
     );
 
+    /**
+     * Todo.
+     */
     NH_CSS_RESULT nh_css_addCanvasType(
         nh_css_LayoutEngine *LayoutEngine_p, nh_css_CanvasType CanvasType
     );
 
 /** @} */
 
-#endif // NETZHAUT_CSS_H
+#endif // NH_CSS_H
diff --git a/src/lib/netzhaut/nhecmascript.h b/src/lib/netzhaut/nhecmascript.h
index ffc3452..20ee14f 100644
--- a/src/lib/netzhaut/nhecmascript.h
+++ b/src/lib/netzhaut/nhecmascript.h
@@ -1,5 +1,5 @@
-#ifndef NETZHAUT_ECMASCRIPT_H
-#define NETZHAUT_ECMASCRIPT_H
+#ifndef NH_ECMASCRIPT_H
+#define NH_ECMASCRIPT_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -13,14 +13,21 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhecmascript nhecmascript
+ *  @brief Parse scripts.
+ */
+
+/** @addtogroup api_nhecmascript 
  *  @{
  */
 
+    /**
+     * Todo.
+     */
     nh_ecmascript_OpaqueScript *nh_ecmascript_parseScript(
         NH_BYTE *sourceText_p, nh_ecmascript_OpaqueRealm *Realm_p, int encoding
     );
 
 /** @} */
 
-#endif // NETZHAUT_ECMASCRIPT_H
+#endif // NH_ECMASCRIPT_H
diff --git a/src/lib/netzhaut/nhgfx.c b/src/lib/netzhaut/nhgfx.c
index 7babc9d..54ce848 100644
--- a/src/lib/netzhaut/nhgfx.c
+++ b/src/lib/netzhaut/nhgfx.c
@@ -24,6 +24,12 @@
 
 // CREATE ==========================================================================================
 
+nh_gfx_SurfaceRequirements *nh_gfx_getSurfaceRequirements()
+{
+    nh_gfx_getSurfaceRequirements_f getSurfaceRequirements_f = !NH_LOADER_P ? NULL : NH_LOADER_P->loadSymbol_f(NH_MODULE_GFX, 0, "nh_gfx_getSurfaceRequirements");
+    return getSurfaceRequirements_f ? getSurfaceRequirements_f() : NULL;
+}
+
 nh_gfx_Surface *nh_gfx_createSurface(
     nh_wsi_Window *Window_p, NH_GFX_API api)
 {
diff --git a/src/lib/netzhaut/nhgfx.h b/src/lib/netzhaut/nhgfx.h
index d68498f..0edb398 100644
--- a/src/lib/netzhaut/nhgfx.h
+++ b/src/lib/netzhaut/nhgfx.h
@@ -1,5 +1,5 @@
-#ifndef NETZHAUT_GFX_H
-#define NETZHAUT_GFX_H
+#ifndef NH_GFX_H
+#define NH_GFX_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -14,18 +14,34 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhgfx nhgfx
+ *  @brief Provide surface and viewport for rendering.
+ */
+
+/** @addtogroup api_nhgfx
  *  @{
  */
 
+    /**
+     * Todo.
+     */
+    nh_gfx_SurfaceRequirements *nh_gfx_getSurfaceRequirements(
+    );
+
+    /**
+     * Todo.
+     */
     nh_gfx_Surface *nh_gfx_createSurface(
         nh_wsi_Window *Window_p, NH_GFX_API api
     );
 
+    /**
+     * Todo.
+     */
     nh_gfx_Viewport *nh_gfx_createViewport(
         nh_gfx_Surface *Surface_p, nh_PixelPosition Position, nh_PixelSize Size
     );
 
 /** @} */
 
-#endif // NETZHAUT_GFX_H
+#endif // NH_GFX_H
diff --git a/src/lib/netzhaut/nhhtml.h b/src/lib/netzhaut/nhhtml.h
index 5e75405..fa95fae 100644
--- a/src/lib/netzhaut/nhhtml.h
+++ b/src/lib/netzhaut/nhhtml.h
@@ -1,5 +1,5 @@
-#ifndef NETZHAUT_HTML_H
-#define NETZHAUT_HTML_H
+#ifndef NH_HTML_H
+#define NH_HTML_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -14,18 +14,28 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhhtml nhhtml
+ *  @brief Create HTML document contexts.
+ */
+
+/** @addtogroup api_nhhtml
  *  @{
  */
 
+    /**
+     * Todo.
+     */
     nh_html_DocumentContext *nh_html_createDocumentContext(
         NH_BOOL browsingContext
     );
 
+    /**
+     * Todo.
+     */
     NH_HTML_RESULT nh_html_loadBytes(
         nh_html_DocumentContext *Context_p, NH_BYTE *bytes_p, unsigned long long size
     );
 
 /** @} */
 
-#endif // NETZHAUT_HTML_H
+#endif // NH_HTML_H
diff --git a/src/lib/netzhaut/nhmake.h b/src/lib/netzhaut/nhmake.h
index e9ec00f..5d5d2b4 100644
--- a/src/lib/netzhaut/nhmake.h
+++ b/src/lib/netzhaut/nhmake.h
@@ -1,5 +1,5 @@
-#ifndef NETZHAUT_MAKE_H
-#define NETZHAUT_MAKE_H
+#ifndef NH_MAKE_H
+#define NH_MAKE_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -13,96 +13,168 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhmake nhmake
+ *  @brief Runtime for parsing and executing build scripts used by Netzhaut.
+ *
+ *  This module implements a big part of the Netzhaut build-system.
+ */
+
+/** @addtogroup api_nhmake
  *  @{
  */
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_initialize(
     );
     
+    /**
+     * Todo.
+     */
     void nh_make_terminate(
     );
 
-
+    /**
+     * Todo.
+     */
     nh_make_Runtime *nh_make_createRuntime(
         NH_BYTE *name_p
     );
 
+    /**
+     * Todo.
+     */
     void nh_make_destroyRuntime(
         nh_make_Runtime *Runtime_p
     );
 
-
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_run(
         nh_make_Runtime *Runtime_p, int argc, NH_BYTE **argv_pp
     );
 
-
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_addFile(
         nh_make_Runtime *Runtime_p, NH_BYTE *path_p
     );
 
+    /**
+     * Todo.
+     */
     void nh_make_setFunctionCallback(
         nh_make_Runtime *Runtime_p, nh_make_functionCallback_f functionCallback_f
     );
 
+    /**
+     * Todo.
+     */
     void nh_make_setSourceContextCallback(
         nh_make_Runtime *Runtime_p, nh_make_sourceContextCallback_f sourceContextCallback_f
     );
 
+    /**
+     * Todo.
+     */
     void nh_make_setBeforeBuildCallback(
         nh_make_Runtime *Runtime_p, nh_make_sourceContextCallback_f sourceContextCallback_f
     );
 
+    /**
+     * Todo.
+     */
     void nh_make_setAfterBuildCallback(
         nh_make_Runtime *Runtime_p, nh_make_sourceContextCallback_f sourceContextCallback_f
     );
 
+    /**
+     * Todo.
+     */
     nh_make_SourceContextArray *nh_make_getSourceContextArray(
         nh_make_Runtime *Runtime_p
     );
 
+    /**
+     * Todo.
+     */
     nh_make_SourceContext *nh_make_getSourceContext(
         nh_make_Runtime *Runtime_p, NH_BYTE *name_p, NH_MAKE_SOURCE_CONTEXT type
     );
 
+    /**
+     * Todo.
+     */
     void nh_make_setQuiet(
         nh_make_Runtime *Runtime_p, NH_MAKE_BOOL quiet
     );
     
+    /**
+     * Todo.
+     */
     void nh_make_setShowParseTree(
         nh_make_Runtime *Runtime_p, NH_MAKE_BOOL showParseTree
     );
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_setVariable(
         nh_make_Runtime *Runtime_p, NH_BYTE *variables_p, NH_BYTE **values_pp, int valueCount
     );
 
+    /**
+     * Todo.
+     */
     nh_make_ValueArray nh_make_getVariableValues(
         nh_make_Runtime *Runtime_p, NH_BYTE *variable_p
     );
 
+    /**
+     * Todo.
+     */
     int nh_make_isRunning(
     );
     
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_sleepMs(
         int milliseconds
     );
 
+    /**
+     * Todo.
+     */
     NH_BYTE *nh_make_getProcessDirectory(
     );
 
+    /**
+     * Todo.
+     */
     NH_BYTE *nh_make_getWorkDirectory(
     );
 
+    /**
+     * Todo.
+     */
     NH_BYTE *nh_make_getFileData(
         const NH_BYTE* path_p, long *size_p
     );
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_writeBytesToFile(
         NH_BYTE *filename_p, NH_BYTE *bytes_p
     );
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_messagef(
         NH_BYTE *format_p, ...
     );
@@ -110,52 +182,85 @@
 
 // CHANGELOG =======================================================================================
 
+    /**
+     * Todo.
+     */
     nh_make_Changelog nh_make_createChangelog(
         NH_BYTE *path_p
     );
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_updateChangelog(
         nh_make_Runtime *Runtime_p
     );
 
+    /**
+     * Todo.
+     */
     nh_make_Changelog *nh_make_getChangelog(
         nh_make_Runtime *Runtime_p
     );
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_freeChangelog(
         nh_make_Changelog *Changelog_p
     );
 
+    /**
+     * Todo.
+     */
     nh_make_ChangelogPart nh_make_getChangelogForContext(
        nh_make_Changelog *Changelog_p, nh_make_SourceContext *Context_p
     );
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_freeChangelogPart(
        nh_make_ChangelogPart *Part_p
     );
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_printChangelog(
         nh_make_Runtime *Runtime_p, nh_make_Changelog *Changelog_p
     );
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_stringifyChangelog(
         nh_make_Changelog *Changelog_p, NH_BYTE *result_p, int length
     );
 
 // VERSION =========================================================================================
 
+    /**
+     * Todo.
+     */
     NH_MAKE_RESULT nh_make_updateVersions(
         nh_make_Runtime *Runtime_p
     );
 
+    /**
+     * Todo.
+     */
     nh_make_Version nh_make_getVersion(
         nh_make_Changelog *Changelog_p, nh_make_SourceContext *Context_p, nh_make_Changes *LastChanges_p
     );
 
+    /**
+     * Todo.
+     */
     nh_make_Version nh_make_getRevision(
         nh_make_Runtime *Runtime_p, nh_make_Changes *LastChanges_p
     );
 
 /** @} */
 
-#endif // NETZHAUT_MAKE_H
+#endif // NH_MAKE_H
diff --git a/src/lib/netzhaut/nhrenderer.h b/src/lib/netzhaut/nhrenderer.h
index 0cdd377..8df000e 100644
--- a/src/lib/netzhaut/nhrenderer.h
+++ b/src/lib/netzhaut/nhrenderer.h
@@ -1,5 +1,5 @@
-#ifndef NETZHAUT_RENDERER_H
-#define NETZHAUT_RENDERER_H
+#ifndef NH_RENDERER_H
+#define NH_RENDERER_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -14,18 +14,28 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhrenderer nhrenderer
+ *  @brief Create and configure renderers based on CSS layout engines.
+ */
+
+/** @addtogroup api_nhrenderer
  *  @{
  */
 
+    /**
+     * Todo.
+     */
     nh_renderer_Renderer *nh_renderer_createRenderer(
         nh_css_LayoutEngine *LayoutEngine_p
     );
 
+    /**
+     * Todo.
+     */
     NH_RENDERER_RESULT nh_renderer_addViewport(
         nh_renderer_Renderer *Renderer_p, nh_gfx_Viewport *Viewport_p
     );
 
 /** @} */
 
-#endif // NETZHAUT_RENDERER_H
+#endif // NH_RENDERER_H
diff --git a/src/lib/netzhaut/nhterminal.c b/src/lib/netzhaut/nhterminal.c
index 7e3336f..41abeb4 100644
--- a/src/lib/netzhaut/nhterminal.c
+++ b/src/lib/netzhaut/nhterminal.c
@@ -25,14 +25,21 @@
 nh_terminal_Terminal *nh_terminal_openTerminal(
     nh_tty_TTY *TTY_p)
 {
-    nh_terminal_openTerminal_f openTerminal_f = !NH_LOADER_P || !TTY_p ? NULL : NH_LOADER_P->loadSymbol_f(NH_MODULE_TERM, 0, "nh_terminal_openTerminal");
+    nh_terminal_openTerminal_f openTerminal_f = !NH_LOADER_P || !TTY_p ? NULL : NH_LOADER_P->loadSymbol_f(NH_MODULE_TERMINAL, 0, "nh_terminal_openTerminal");
     return openTerminal_f ? openTerminal_f(TTY_p) : NULL;
 }
 
 NH_TERMINAL_RESULT nh_terminal_setViewport(
     nh_terminal_Terminal *Terminal_p, nh_gfx_Viewport *Viewport_p)
 {
-    nh_terminal_setViewport_f setViewport_f = !NH_LOADER_P || !Terminal_p || !Viewport_p ? NULL : NH_LOADER_P->loadSymbol_f(NH_MODULE_TERM, 0, "nh_terminal_setViewport");
+    nh_terminal_setViewport_f setViewport_f = !NH_LOADER_P || !Terminal_p || !Viewport_p ? NULL : NH_LOADER_P->loadSymbol_f(NH_MODULE_TERMINAL, 0, "nh_terminal_setViewport");
     return setViewport_f ? setViewport_f(Terminal_p, Viewport_p) : NH_TERMINAL_ERROR_NULL_POINTER;
 }
 
+NH_TERMINAL_RESULT nh_terminal_setColor(
+    nh_terminal_Terminal *Terminal_p, nh_Color Color, NH_BOOL foreground)
+{
+    nh_terminal_setColor_f setColor_f = !NH_LOADER_P || !Terminal_p ? NULL : NH_LOADER_P->loadSymbol_f(NH_MODULE_TERMINAL, 0, "nh_terminal_setColor");
+    return setColor_f ? setColor_f(Terminal_p, Color, foreground) : NH_TERMINAL_ERROR_NULL_POINTER;
+}
+
diff --git a/src/lib/netzhaut/nhterminal.h b/src/lib/netzhaut/nhterminal.h
index 106e0bc..92bcad1 100644
--- a/src/lib/netzhaut/nhterminal.h
+++ b/src/lib/netzhaut/nhterminal.h
@@ -1,5 +1,5 @@
-#ifndef NETZHAUT_TERM_H
-#define NETZHAUT_TERM_H
+#ifndef NH_TERMINAL_H
+#define NH_TERMINAL_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -15,18 +15,58 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhterminal nhterminal
+ *  @brief Open terminals for TTY presentation.
+ *
+ *  This module allows the presentation of TTY logic created by the 
+ *  nhtty module without the use of proprietary terminals such as xterm 
+ *  or konsole.
+ */
+
+/** @addtogroup api_nhterminal
  *  @{
  */
 
+    /**
+     * @brief Open a TTY based terminal. 
+     *
+     * The TTY parameter handles TTY logic while the resulting terminal
+     * handles the TTY presentation.
+     *
+     * @param TTY_p Pointer to TTY. Must not be NULL.
+     * @return NULL on failure. A pointer to a newly created terminal on success.
+     */
     nh_terminal_Terminal *nh_terminal_openTerminal(
         nh_tty_TTY *TTY_p
     );
 
+    /**
+     * @brief Set the viewport of a terminal.
+     *
+     * Without having a viewport to render into, the terminal won't know where
+     * to present the input received by the associated TTY logic.
+     *
+     * @param Terminal_p Pointer to terminal. Must not be NULL.
+     * @param Viewport_p Pointer to viewport. Must not be NULL.
+     * @return @ref NH_TERMINAL_SUCCESS on success.
+     */
     NH_TERMINAL_RESULT nh_terminal_setViewport(
         nh_terminal_Terminal *Terminal_p, nh_gfx_Viewport *Viewport_p
     );
 
+    /**
+     * @brief Set foreground or background color of the terminal.
+     *
+     * @param Terminal_p Pointer to terminal. Must not be NULL.
+     * @param Color The new color.
+     * @param foreground If @ref NH_TRUE, the foreground aka text-color is set. 
+     *                   If @ref NH_FALSE the background color is set.
+     * @return @ref NH_TERMINAL_SUCCESS on success.
+     */
+    NH_TERMINAL_RESULT nh_terminal_setColor(
+        nh_terminal_Terminal *Terminal_p, nh_Color Color, NH_BOOL foreground 
+    );
+
 /** @} */
 
-#endif // NETZHAUT_TERM_H
+#endif // NH_TERMINAL_H
diff --git a/src/lib/netzhaut/nhtty.h b/src/lib/netzhaut/nhtty.h
index a0310e6..31e8daf 100644
--- a/src/lib/netzhaut/nhtty.h
+++ b/src/lib/netzhaut/nhtty.h
@@ -1,5 +1,5 @@
-#ifndef NETZHAUT_TTY_H
-#define NETZHAUT_TTY_H
+#ifndef NH_TTY_H
+#define NH_TTY_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -13,29 +13,48 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhtty nhtty
+ *  @brief Open logical TTY interfaces.
+ */
+
+/** @addtogroup api_nhtty
  *  @{
  */
 
+    /**
+     * Todo.
+     */
     nh_tty_TTY *nh_tty_openTTY(
     );
 
+    /**
+     * Todo.
+     */
     NH_TTY_RESULT nh_tty_addDefaultProgram(
         nh_tty_TTY *TTY_p, NH_BYTE *name_p
     ); 
 
+    /**
+     * Todo.
+     */
     NH_TTY_RESULT nh_tty_claimStandardIO(
         nh_tty_TTY *TTY_p
     );
     
+    /**
+     * Todo.
+     */
     NH_TTY_RESULT nh_tty_unclaimStandardIO(
         nh_tty_TTY *TTY_p
     );
 
+    /**
+     * Todo.
+     */
     NH_TTY_RESULT nh_tty_sendInput(
         nh_tty_TTY *TTY_p, nh_wsi_Event Event
     );
 
 /** @} */
 
-#endif // NETZHAUT_TTY_H
+#endif // NH_TTY_H
diff --git a/src/lib/netzhaut/nhwsi.c b/src/lib/netzhaut/nhwsi.c
index e0acdc2..93f5397 100644
--- a/src/lib/netzhaut/nhwsi.c
+++ b/src/lib/netzhaut/nhwsi.c
@@ -22,11 +22,19 @@
 
 // CREATE ==========================================================================================
 
+NH_WSI_RESULT nh_wsi_initWindowConfiguration(
+    nh_wsi_WindowConfiguration *Configuration_p)
+{
+    nh_wsi_initWindowConfiguration_f initWindowConfiguration_f = !NH_LOADER_P ? NULL : NH_LOADER_P->loadSymbol_f(NH_MODULE_WSI, 0, "nh_wsi_initWindowConfiguration");
+    return initWindowConfiguration_f ? initWindowConfiguration_f(Configuration_p) : NH_WSI_ERROR_BAD_STATE;
+}
+
+
 nh_wsi_Window *nh_wsi_createWindow(
-    NH_BYTE *title_p, nh_PixelSize Size)
+        nh_wsi_WindowConfiguration Configuration, nh_gfx_SurfaceRequirements *Requirements_p)
 {
     nh_wsi_createWindow_f createWindow_f = !NH_LOADER_P ? NULL : NH_LOADER_P->loadSymbol_f(NH_MODULE_WSI, 0, "nh_wsi_createWindow");
-    return createWindow_f ? createWindow_f(title_p, Size) : NULL;
+    return createWindow_f ? createWindow_f(Configuration, Requirements_p) : NULL;
 }
 
 NH_WSI_RESULT nh_wsi_setEventListener(
diff --git a/src/lib/netzhaut/nhwsi.h b/src/lib/netzhaut/nhwsi.h
index 15c29f6..d13568f 100644
--- a/src/lib/netzhaut/nhwsi.h
+++ b/src/lib/netzhaut/nhwsi.h
@@ -1,5 +1,5 @@
-#ifndef NETZHAUT_WSI_H
-#define NETZHAUT_WSI_H
+#ifndef NH_WSI_H
+#define NH_WSI_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -13,18 +13,35 @@
 
 #endif
 
-/** @addtogroup lib_netzhaut_functions
+/** @defgroup api_nhwsi nhwsi
+ *  @brief Create windows for rendering.
+ */
+
+/** @addtogroup api_nhwsi
  *  @{
  */
 
+    /**
+     * Todo.
+     */
+    NH_WSI_RESULT nh_wsi_initWindowConfiguration(
+        nh_wsi_WindowConfiguration *Configuration_p
+    );
+
+    /**
+     * Todo.
+     */
     nh_wsi_Window *nh_wsi_createWindow(
-        NH_BYTE *title_p, nh_PixelSize Size
+        nh_wsi_WindowConfiguration Configuration, nh_gfx_SurfaceRequirements *Requirements_p
     );
 
+    /**
+     * Todo.
+     */
     NH_WSI_RESULT nh_wsi_setEventListener(
         nh_wsi_Window *Window_p, nh_wsi_callback_f callback_f
     );
 
 /** @} */
 
-#endif // NETZHAUT_WSI_H
+#endif // NH_WSI_H
diff --git a/src/lib/nhcore/Common/About.h b/src/lib/nhcore/Common/About.h
index c22a2e2..2580bb5 100644
--- a/src/lib/nhcore/Common/About.h
+++ b/src/lib/nhcore/Common/About.h
@@ -1,5 +1,5 @@
-#ifndef NH_ABOUT_H
-#define NH_ABOUT_H
+#ifndef NH_CORE_ABOUT_H
+#define NH_CORE_ABOUT_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Common/Config.h b/src/lib/nhcore/Common/Config.h
index 8d9178f..12e5c2c 100644
--- a/src/lib/nhcore/Common/Config.h
+++ b/src/lib/nhcore/Common/Config.h
@@ -1,5 +1,5 @@
-#ifndef NH_CONFIG_H
-#define NH_CONFIG_H
+#ifndef NH_CORE_CONFIG_H
+#define NH_CORE_CONFIG_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Common/IndexMap.h b/src/lib/nhcore/Common/IndexMap.h
index 2dfa521..d79f9b1 100644
--- a/src/lib/nhcore/Common/IndexMap.h
+++ b/src/lib/nhcore/Common/IndexMap.h
@@ -1,5 +1,5 @@
-#ifndef NH_INDEXMAP_H
-#define NH_INDEXMAP_H
+#ifndef NH_CORE_INDEXMAP_H
+#define NH_CORE_INDEXMAP_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Common/Initialize.h b/src/lib/nhcore/Common/Initialize.h
index 257ea3f..f997c1a 100644
--- a/src/lib/nhcore/Common/Initialize.h
+++ b/src/lib/nhcore/Common/Initialize.h
@@ -1,5 +1,5 @@
-#ifndef NH_INITIALIZE_H
-#define NH_INITIALIZE_H
+#ifndef NH_CORE_INITIALIZE_H
+#define NH_CORE_INITIALIZE_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Common/Log.c b/src/lib/nhcore/Common/Log.c
index 1f2ce3f..bbcac4c 100644
--- a/src/lib/nhcore/Common/Log.c
+++ b/src/lib/nhcore/Common/Log.c
@@ -121,7 +121,7 @@ NH_BEGIN()
                 case NH_MODULE_CSS :
                     ver_p = NH_LOADER.loadSymbol_f(i, NH_LOADER.Modules_p[i].major, "NH_CSS_VERSION_P");
                     break;
-                case NH_MODULE_TERM :
+                case NH_MODULE_TERMINAL :
                     ver_p = NH_LOADER.loadSymbol_f(i, NH_LOADER.Modules_p[i].major, "NH_TERMINAL_VERSION_P");
                     break;
                 case NH_MODULE_RENDERER :
@@ -135,7 +135,7 @@ NH_BEGIN()
                     break;
             }
             if (!ver_p) {NH_END(NH_ERROR_BAD_STATE)}
-            sprintf(message_p, "%s%s : v%d.%d.%d.%d", NH_MODULE_NAMES_PP[i], indent_p, ver_p[0], ver_p[1], ver_p[2], ver_p[3]);
+            sprintf(message_p, "%s%s : ver.%d.%d.%d.%d", NH_MODULE_NAMES_PP[i], indent_p, ver_p[0], ver_p[1], ver_p[2], ver_p[3]);
         }
 
         sprintf(option_p, "replace=%d", i);
diff --git a/src/lib/nhcore/Common/Log.h b/src/lib/nhcore/Common/Log.h
index a8fc104..2c2b61a 100644
--- a/src/lib/nhcore/Common/Log.h
+++ b/src/lib/nhcore/Common/Log.h
@@ -1,5 +1,5 @@
-#ifndef NH_LOG_H
-#define NH_LOG_H
+#ifndef NH_CORE_LOG_H
+#define NH_CORE_LOG_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Common/Result.h b/src/lib/nhcore/Common/Result.h
index d1f21b3..470d928 100644
--- a/src/lib/nhcore/Common/Result.h
+++ b/src/lib/nhcore/Common/Result.h
@@ -1,5 +1,5 @@
-#ifndef NH_RESULT_H
-#define NH_RESULT_H
+#ifndef NH_CORE_RESULT_H
+#define NH_CORE_RESULT_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhcore_enums
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -50,10 +48,7 @@
     } NH_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhcore_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_RESULTS_PP[];
     extern unsigned int NH_RESULTS_PP_COUNT;
diff --git a/src/lib/nhcore/Common/Terminate.h b/src/lib/nhcore/Common/Terminate.h
index 39eeddd..f370f94 100644
--- a/src/lib/nhcore/Common/Terminate.h
+++ b/src/lib/nhcore/Common/Terminate.h
@@ -1,5 +1,5 @@
-#ifndef NH_TERMINATE_H
-#define NH_TERMINATE_H
+#ifndef NH_CORE_TERMINATE_H
+#define NH_CORE_TERMINATE_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Common/Types/Public.h b/src/lib/nhcore/Common/Types/Public.h
index a962bbd..22c733d 100644
--- a/src/lib/nhcore/Common/Types/Public.h
+++ b/src/lib/nhcore/Common/Types/Public.h
@@ -1,5 +1,5 @@
-#ifndef NH_PUBLIC_H
-#define NH_PUBLIC_H
+#ifndef NH_CORE_PUBLIC_H
+#define NH_CORE_PUBLIC_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -14,20 +14,20 @@
 
 #endif
 
-/** @addtogroup lib_nhcore_typedefs
- *  @{
- */
+/** @{ */
 
     typedef char           NH_BYTE;
     typedef unsigned char  NH_UNSIGNED_BYTE;
     typedef int            NH_PIXEL;
     typedef float          NH_CLIP;
 
-/** @} */
+    /**
+     * Opaque structure holding the actual data of @ref nh_LinkedList.
+     */
+    typedef struct nh_LinkedListItem nh_LinkedListItem;
 
-/** @addtogroup lib_nhcore_typedefs
- *  @{
- */
+/** @} */
+/** @{ */
 
     typedef void (*nh_logCallback_f)(
         NH_BYTE *node_p, NH_BYTE *options_p, NH_BYTE *message_p
@@ -38,10 +38,7 @@
     );
 
 /** @} */
-
-/** @addtogroup lib_nhcore_enums
- *  @{
- */ 
+/** @{ */ 
 
     /**
      * Boolean values.
@@ -82,10 +79,7 @@
     } NH_SIGNAL;
 
 /** @} */
-
-/** @addtogroup lib_nhcore_structs
- *  @{
- */
+/** @{ */
 
     /**
      * Generic linked-list which holds data pointers. 
@@ -114,11 +108,6 @@
         int allocatedLengthPerChunk;
     } nh_ArrayList;
 
-    /**
-     * Opaque structure holding the actual data of @ref nh_LinkedList.
-     */
-    typedef struct nh_LinkedListItem nh_LinkedListItem;
-
     /**
      * Generic linked-list which holds data pointers. 
      */
@@ -168,13 +157,21 @@
     } nh_Color;
 
 /** @} */
+/** @{ */
 
-/** @addtogroup lib_nhcore_typedefs
- *  @{
- */
-
+    /**
+     * Opaque structure of the loader data.
+     */
     typedef struct nh_Loader nh_Loader;
-    typedef nh_Array  nh_String;
+
+    /**
+     * A string is an array of NH_BYTE's. 
+     */
+    typedef nh_Array nh_String;
+
+    /**
+     * An ASCII string is a string.
+     */
     typedef nh_String nh_ASCIIString;
 
 /** @} */
diff --git a/src/lib/nhcore/Loader/Library.h b/src/lib/nhcore/Loader/Library.h
index 740da19..5786e35 100644
--- a/src/lib/nhcore/Loader/Library.h
+++ b/src/lib/nhcore/Loader/Library.h
@@ -1,5 +1,5 @@
-#ifndef NH_LIBRARY_H
-#define NH_LIBRARY_H
+#ifndef NH_CORE_LIBRARY_H
+#define NH_CORE_LIBRARY_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Loader/Loader.c b/src/lib/nhcore/Loader/Loader.c
index 6346d77..3e86713 100644
--- a/src/lib/nhcore/Loader/Loader.c
+++ b/src/lib/nhcore/Loader/Loader.c
@@ -144,7 +144,7 @@ NH_BEGIN()
             NH_CHECK(NH_LOADER.load_f(NH_MODULE_WEBIDL, 0))
             break;
 
-        case NH_MODULE_TERM :
+        case NH_MODULE_TERMINAL :
             NH_CHECK(NH_LOADER.load_f(NH_MODULE_GFX, 0))
             NH_CHECK(NH_LOADER.load_f(NH_MODULE_TTY, 0))
             break;
diff --git a/src/lib/nhcore/Loader/Loader.h b/src/lib/nhcore/Loader/Loader.h
index 504084f..44f9afc 100644
--- a/src/lib/nhcore/Loader/Loader.h
+++ b/src/lib/nhcore/Loader/Loader.h
@@ -1,5 +1,5 @@
-#ifndef NH_LOADER_H
-#define NH_LOADER_H
+#ifndef NH_CORE_LOADER_H
+#define NH_CORE_LOADER_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -32,7 +32,7 @@
         NH_MODULE_DOM,
         NH_MODULE_GFX,
         NH_MODULE_CSS,
-        NH_MODULE_TERM,
+        NH_MODULE_TERMINAL,
         NH_MODULE_RENDERER,
         NH_MODULE_URL,
         NH_MODULE_MAKE,
diff --git a/src/lib/nhcore/Loader/Reload.h b/src/lib/nhcore/Loader/Reload.h
index 3d2e7d9..d5a2ca6 100644
--- a/src/lib/nhcore/Loader/Reload.h
+++ b/src/lib/nhcore/Loader/Reload.h
@@ -1,5 +1,5 @@
-#ifndef NH_RELOAD_H
-#define NH_RELOAD_H
+#ifndef NH_CORE_RELOAD_H
+#define NH_CORE_RELOAD_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Loader/Repository.h b/src/lib/nhcore/Loader/Repository.h
index 1d18b71..5953061 100644
--- a/src/lib/nhcore/Loader/Repository.h
+++ b/src/lib/nhcore/Loader/Repository.h
@@ -1,5 +1,5 @@
-#ifndef NH_REPOSITORY_H
-#define NH_REPOSITORY_H
+#ifndef NH_CORE_REPOSITORY_H
+#define NH_CORE_REPOSITORY_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/System/Channel.h b/src/lib/nhcore/System/Channel.h
index d0d72e1..5d3d40b 100644
--- a/src/lib/nhcore/System/Channel.h
+++ b/src/lib/nhcore/System/Channel.h
@@ -1,5 +1,5 @@
-#ifndef NH_CHANNEL_H
-#define NH_CHANNEL_H
+#ifndef NH_CORE_CHANNEL_H
+#define NH_CORE_CHANNEL_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/System/Logger.h b/src/lib/nhcore/System/Logger.h
index ecb9f81..1f10fa3 100644
--- a/src/lib/nhcore/System/Logger.h
+++ b/src/lib/nhcore/System/Logger.h
@@ -1,5 +1,5 @@
-#ifndef NH_LOGGER_H
-#define NH_LOGGER_H
+#ifndef NH_CORE_LOGGER_H
+#define NH_CORE_LOGGER_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/System/Memory.h b/src/lib/nhcore/System/Memory.h
index 3f343bd..8ec9eca 100644
--- a/src/lib/nhcore/System/Memory.h
+++ b/src/lib/nhcore/System/Memory.h
@@ -1,5 +1,5 @@
-#ifndef NH_MEMORY_H
-#define NH_MEMORY_H
+#ifndef NH_CORE_MEMORY_H
+#define NH_CORE_MEMORY_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/System/Process.h b/src/lib/nhcore/System/Process.h
index fb3d112..b19f751 100644
--- a/src/lib/nhcore/System/Process.h
+++ b/src/lib/nhcore/System/Process.h
@@ -1,5 +1,5 @@
-#ifndef NH_PROCESS_H
-#define NH_PROCESS_H
+#ifndef NH_CORE_PROCESS_H
+#define NH_CORE_PROCESS_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/System/System.h b/src/lib/nhcore/System/System.h
index 4c76818..31174a1 100644
--- a/src/lib/nhcore/System/System.h
+++ b/src/lib/nhcore/System/System.h
@@ -1,5 +1,5 @@
-#ifndef NH_SYSTEM_H
-#define NH_SYSTEM_H
+#ifndef NH_CORE_SYSTEM_H
+#define NH_CORE_SYSTEM_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/System/Thread.h b/src/lib/nhcore/System/Thread.h
index 1ae3b45..8232fc1 100644
--- a/src/lib/nhcore/System/Thread.h
+++ b/src/lib/nhcore/System/Thread.h
@@ -1,5 +1,5 @@
-#ifndef NH_THREAD_H
-#define NH_THREAD_H
+#ifndef NH_CORE_THREAD_H
+#define NH_CORE_THREAD_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/Array.c b/src/lib/nhcore/Util/Array.c
index 8374c7d..b829689 100644
--- a/src/lib/nhcore/Util/Array.c
+++ b/src/lib/nhcore/Util/Array.c
@@ -43,8 +43,8 @@ NH_BEGIN()
 NH_END(_nh_initArray(elementSize, allocatedLengthPerChunk))
 }
 
-NH_RESULT nh_appendToArray(
-    nh_Array *Array_p, void *p, unsigned long count)
+static NH_RESULT nh_updateArrayLength(
+    nh_Array *Array_p, unsigned long count, size_t *offset_p)
 {
 NH_BEGIN()
 
@@ -75,12 +75,39 @@ NH_BEGIN()
         Array_p->allocatedLength += Array_p->allocatedLengthPerChunk;
     }
 
-    size_t offset = (Array_p->length - count) * Array_p->elementSize;
+    *offset_p = (Array_p->length - count) * Array_p->elementSize;
+
+NH_DIAGNOSTIC_END(NH_SUCCESS)
+}
+
+NH_RESULT nh_appendToArray(
+    nh_Array *Array_p, void *p, unsigned long count)
+{
+NH_BEGIN()
+
+    size_t offset = 0;
+    NH_CHECK(nh_updateArrayLength(Array_p, count, &offset))
+
     memcpy(Array_p->p + offset, p, Array_p->elementSize * count);
 
 NH_DIAGNOSTIC_END(NH_SUCCESS)
 }
 
+NH_RESULT nh_appendToArrayRepeatedly(
+    nh_Array *Array_p, void *p, unsigned long count)
+{
+NH_BEGIN()
+
+    size_t offset = 0;
+    NH_CHECK(nh_updateArrayLength(Array_p, count, &offset))
+
+    for (int i = 0; i < count; ++i) {
+        memcpy(Array_p->p + offset + (i * Array_p->elementSize), p, Array_p->elementSize);
+    }
+
+NH_DIAGNOSTIC_END(NH_SUCCESS)
+}
+
 void *_nh_getFromArray(
     nh_Array *Array_p, unsigned long index)
 {
diff --git a/src/lib/nhcore/Util/Array.h b/src/lib/nhcore/Util/Array.h
index 9875d57..b09ed89 100644
--- a/src/lib/nhcore/Util/Array.h
+++ b/src/lib/nhcore/Util/Array.h
@@ -1,5 +1,5 @@
-#ifndef NH_ARRAY_H
-#define NH_ARRAY_H
+#ifndef NH_CORE_ARRAY_H
+#define NH_CORE_ARRAY_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -29,6 +29,10 @@
         nh_Array *Array_p, void *p, unsigned long count
     );
 
+    NH_RESULT nh_appendToArrayRepeatedly(
+        nh_Array *Array_p, void *p, unsigned long count
+    );
+
     NH_RESULT nh_insertIntoArray(
         nh_Array *Array_p, int index, void *elements_p, int length
     );
diff --git a/src/lib/nhcore/Util/ArrayList.h b/src/lib/nhcore/Util/ArrayList.h
index 57ce736..2f19354 100644
--- a/src/lib/nhcore/Util/ArrayList.h
+++ b/src/lib/nhcore/Util/ArrayList.h
@@ -1,5 +1,5 @@
-#ifndef NH_ARRAY_LIST_H
-#define NH_ARRAY_LIST_H
+#ifndef NH_CORE_ARRAY_LIST_H
+#define NH_CORE_ARRAY_LIST_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/BigInt.h b/src/lib/nhcore/Util/BigInt.h
index e63113d..e326bc5 100644
--- a/src/lib/nhcore/Util/BigInt.h
+++ b/src/lib/nhcore/Util/BigInt.h
@@ -1,5 +1,5 @@
-#ifndef NH_BIG_INT_H
-#define NH_BIG_INT_H
+#ifndef NH_CORE_BIG_INT_H
+#define NH_CORE_BIG_INT_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/File.h b/src/lib/nhcore/Util/File.h
index 3120471..7ab9f81 100644
--- a/src/lib/nhcore/Util/File.h
+++ b/src/lib/nhcore/Util/File.h
@@ -1,5 +1,5 @@
-#ifndef NH_FILE_H
-#define NH_FILE_H
+#ifndef NH_CORE_FILE_H
+#define NH_CORE_FILE_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/HashMap.h b/src/lib/nhcore/Util/HashMap.h
index d5f421d..9404666 100644
--- a/src/lib/nhcore/Util/HashMap.h
+++ b/src/lib/nhcore/Util/HashMap.h
@@ -1,5 +1,5 @@
-#ifndef NH_HASHMAP_H
-#define NH_HASHMAP_H
+#ifndef NH_CORE_HASHMAP_H
+#define NH_CORE_HASHMAP_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/LinkedList.h b/src/lib/nhcore/Util/LinkedList.h
index bff4926..03f868b 100644
--- a/src/lib/nhcore/Util/LinkedList.h
+++ b/src/lib/nhcore/Util/LinkedList.h
@@ -1,5 +1,5 @@
-#ifndef NH_LINKED_LIST_H
-#define NH_LINKED_LIST_H
+#ifndef NH_CORE_LINKED_LIST_H
+#define NH_CORE_LINKED_LIST_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/List.h b/src/lib/nhcore/Util/List.h
index e39a154..50de99c 100644
--- a/src/lib/nhcore/Util/List.h
+++ b/src/lib/nhcore/Util/List.h
@@ -1,5 +1,5 @@
-#ifndef NH_LIST_H
-#define NH_LIST_H
+#ifndef NH_CORE_LIST_H
+#define NH_CORE_LIST_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/Math.h b/src/lib/nhcore/Util/Math.h
index 55fec88..bd3d4f1 100644
--- a/src/lib/nhcore/Util/Math.h
+++ b/src/lib/nhcore/Util/Math.h
@@ -1,5 +1,5 @@
-#ifndef NH_MATH_H
-#define NH_MATH_H
+#ifndef NH_CORE_MATH_H
+#define NH_CORE_MATH_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/MediaType.h b/src/lib/nhcore/Util/MediaType.h
index da1c847..109e32b 100644
--- a/src/lib/nhcore/Util/MediaType.h
+++ b/src/lib/nhcore/Util/MediaType.h
@@ -1,5 +1,5 @@
-#ifndef NH_MEDIA_TYPE_H
-#define NH_MEDIA_TYPE_H
+#ifndef NH_CORE_MEDIA_TYPE_H
+#define NH_CORE_MEDIA_TYPE_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/RingBuffer.h b/src/lib/nhcore/Util/RingBuffer.h
index 3f11b69..44f9e86 100644
--- a/src/lib/nhcore/Util/RingBuffer.h
+++ b/src/lib/nhcore/Util/RingBuffer.h
@@ -1,5 +1,5 @@
-#ifndef NH_RING_BUFFER_H
-#define NH_RING_BUFFER_H
+#ifndef NH_CORE_RING_BUFFER_H
+#define NH_CORE_RING_BUFFER_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/Stack.h b/src/lib/nhcore/Util/Stack.h
index 40b81d4..d57639c 100644
--- a/src/lib/nhcore/Util/Stack.h
+++ b/src/lib/nhcore/Util/Stack.h
@@ -1,5 +1,5 @@
-#ifndef NH_STACK_H
-#define NH_STACK_H
+#ifndef NH_CORE_STACK_H
+#define NH_CORE_STACK_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcore/Util/String.c b/src/lib/nhcore/Util/String.c
index 38508ca..2589f69 100644
--- a/src/lib/nhcore/Util/String.c
+++ b/src/lib/nhcore/Util/String.c
@@ -155,6 +155,13 @@ NH_BEGIN()
 NH_DIAGNOSTIC_END(nh_appendToArray(String_p, &byte, 1))
 }
 
+NH_RESULT nh_appendByteToStringRepeatedly(
+    nh_String *String_p, NH_BYTE byte, int count)
+{
+NH_BEGIN()
+NH_DIAGNOSTIC_END(nh_appendToArrayRepeatedly(String_p, &byte, count))
+}
+
 NH_RESULT nh_appendToString(
     nh_String *String_p, NH_BYTE *bytes_p, int length)
 {
diff --git a/src/lib/nhcore/Util/String.h b/src/lib/nhcore/Util/String.h
index 55db389..863c638 100644
--- a/src/lib/nhcore/Util/String.h
+++ b/src/lib/nhcore/Util/String.h
@@ -1,5 +1,5 @@
-#ifndef nh_String_H
-#define nh_String_H
+#ifndef NH_CORE_STRING_H
+#define NH_CORE_STRING_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
@@ -76,14 +76,18 @@
         int chunkSize
     );
 
-    NH_RESULT nh_appendToString(
-        nh_String *String_p, NH_BYTE *bytes_p, int length
-    );
-
     NH_RESULT nh_appendByteToString(
         nh_String *String_p, NH_BYTE byte
     );
 
+    NH_RESULT nh_appendByteToStringRepeatedly(
+        nh_String *String_p, NH_BYTE byte, int count
+    );
+
+    NH_RESULT nh_appendToString(
+        nh_String *String_p, NH_BYTE *bytes_p, int length
+    );
+
     NH_RESULT nh_appendFormatToString(
         nh_String *String_p, NH_BYTE *format_p, ...
     );
diff --git a/src/lib/nhcore/Util/Time.h b/src/lib/nhcore/Util/Time.h
index 0266da3..a583474 100644
--- a/src/lib/nhcore/Util/Time.h
+++ b/src/lib/nhcore/Util/Time.h
@@ -1,5 +1,5 @@
-#ifndef NH_TIME_H
-#define NH_TIME_H
+#ifndef NH_CORE_TIME_H
+#define NH_CORE_TIME_H
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 
diff --git a/src/lib/nhcss/Common/Log.c b/src/lib/nhcss/Common/Log.c
index 309db62..8aecbe2 100644
--- a/src/lib/nhcss/Common/Log.c
+++ b/src/lib/nhcss/Common/Log.c
@@ -69,7 +69,7 @@ NH_CSS_BEGIN()
     {
         nh_encoding_UTF8String UTF8 = nh_encoding_encodeUTF8(Token_p->Other.Value.p, Token_p->Other.Value.length);
         sprintf(token_p, "%s %s", nh_css_getTokenName(Token_p->type), UTF8.p);
-        nh_encoding_freeUTF8String(&UTF8);
+        nh_encoding_freeUTF8(&UTF8);
     }
     else if (Token_p->type == NH_CSS_TOKEN_DELIM) {
         sprintf(token_p, "%s %c", nh_css_getTokenName(Token_p->type), Token_p->Delim.value);
@@ -83,7 +83,7 @@ NH_CSS_BEGIN()
     else if (Token_p->type == NH_CSS_TOKEN_DIMENSION) {
         nh_encoding_UTF8String Unit = nh_encoding_encodeUTF8(Token_p->Dimension.Unit.p, Token_p->Dimension.Unit.length);
         sprintf(token_p, "%s %lf%s", nh_css_getTokenName(Token_p->type), Token_p->Dimension.value, Unit.p);
-        nh_encoding_freeUTF8String(&Unit);
+        nh_encoding_freeUTF8(&Unit);
     }
     else {
         sprintf(token_p, "%s", nh_css_getTokenName(Token_p->type)); 
@@ -160,7 +160,7 @@ NH_CSS_BEGIN()
         sprintf(message_p, "%s%s", indent_p, Name.p);
         nh_sendLogMessage(node_p, NULL, message_p);
         memset(message_p, 0, NH_CSS_MAX_MESSAGE);
-        nh_encoding_freeUTF8String(&Name);
+        nh_encoding_freeUTF8(&Name);
 
         for (int i = 0; i < Value_p->Function.ComponentValues.length; ++i) {
             NH_CSS_CHECK(nh_css_logComponentValue(node_p, &((nh_css_ComponentValue*)Value_p->Function.ComponentValues.p)[i], token_p, message_p, indent_p, depth + 1))
@@ -199,7 +199,7 @@ NH_CSS_BEGIN()
                 nh_encoding_UTF8String Name = nh_encoding_encodeUTF8(Rule_p->Name_p->p, Rule_p->Name_p->length);
                 sprintf(message_p, "@%s Rule %d", Name.p, i);
                 nh_sendLogMessage(node_p, NULL, message_p);
-                nh_encoding_freeUTF8String(&Name);
+                nh_encoding_freeUTF8(&Name);
             } 
             else {
                 sprintf(message_p, "Qualified Rule %d", i);
@@ -548,7 +548,7 @@ NH_CSS_BEGIN()
     if (Node_p->type == NH_CSS_BOX_TREE_NODE_TEXT_RUN) {
         nh_encoding_UTF8String UTF8 = nh_encoding_encodeUTF8(Node_p->Source_p->TextNode.String.p, Node_p->Source_p->TextNode.String.length);
         sprintf(message_p, "%s%s %s", indent_p, info_p, UTF8.p);
-        nh_encoding_freeUTF8String(&UTF8);
+        nh_encoding_freeUTF8(&UTF8);
     }
     else {
         sprintf(message_p, "%s%s", indent_p, info_p);
@@ -561,7 +561,7 @@ NH_CSS_BEGIN()
 //            sprintf(message_p, "%sText     : %s", indent_p, UTF8.p);
 //            nh_sendLogMessage(node_p, NULL, message_p);
 //            memset(message_p, 0, NH_CSS_MAX_MESSAGE);
-//            nh_encoding_freeUTF8String(&UTF8);
+//            nh_encoding_freeUTF8(&UTF8);
 
     for (int i = 0; i < Node_p->Children.size; ++i) {
         NH_CSS_CHECK(nh_css_logBoxTreeNode(node_p, Node_p->Children.pp[i], message_p, indent_p, depth + 2))
@@ -633,7 +633,7 @@ NH_CSS_BEGIN()
         sprintf(message_p, "%sText     : %s", indent_p, UTF8.p);
         nh_sendLogMessage(logId_p, NULL, message_p);
         memset(message_p, 0, NH_CSS_MAX_MESSAGE);
-        nh_encoding_freeUTF8String(&UTF8);
+        nh_encoding_freeUTF8(&UTF8);
     }
 
     for (int i = 0; i < Fragment_p->Children.size; ++i) {
diff --git a/src/lib/nhcss/Common/Result.h b/src/lib/nhcss/Common/Result.h
index b09e8ad..2ce52ac 100644
--- a/src/lib/nhcss/Common/Result.h
+++ b/src/lib/nhcss/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhcss_enums 
- *  @{
- */ 
+/** @{ */ 
 
     /**
      * Return values for functions.
@@ -29,10 +27,7 @@
     } NH_CSS_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhcss_vars
- *  @{
- */ 
+/** @{ */ 
 
     extern const char *NH_CSS_RESULTS_PP[];
     extern unsigned int NH_CSS_RESULTS_PP_COUNT;
diff --git a/src/lib/nhcss/Common/Types/Public.h b/src/lib/nhcss/Common/Types/Public.h
index db7fe47..0228d12 100644
--- a/src/lib/nhcss/Common/Types/Public.h
+++ b/src/lib/nhcss/Common/Types/Public.h
@@ -20,9 +20,7 @@
 
 #endif
 
-/** @addtogroup lib_nhcss_typedefs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_css_StyleRuleObject nh_css_StyleRuleObject;
     typedef struct nh_css_CounterStyleRuleObject nh_css_CounterStyleRuleObject;
@@ -32,14 +30,10 @@
     typedef struct nh_css_StyleDeclarationObject nh_css_StyleDeclarationObject;
     typedef struct nh_css_StyleSheetListObject nh_css_StyleSheetListObject;
     typedef struct nh_css_DocumentObject nh_css_DocumentObject;
-
     typedef struct nh_css_LayoutEngine nh_css_LayoutEngine;
 
 /** @} */
-
-/** @addtogroup lib_nhcss_structs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_css_CanvasType {
         nh_PixelSize Size;
diff --git a/src/lib/nhcss/Interfaces/StyleSheet.c b/src/lib/nhcss/Interfaces/StyleSheet.c
index 75274f9..19335d5 100644
--- a/src/lib/nhcss/Interfaces/StyleSheet.c
+++ b/src/lib/nhcss/Interfaces/StyleSheet.c
@@ -88,7 +88,7 @@ NH_CSS_BEGIN()
             if (Token_p->type == NH_CSS_TOKEN_IDENT) {
                 nh_encoding_UTF8String Name = nh_encoding_encodeUTF8(Token_p->Other.Value.p, Token_p->Other.Value.length);
                 match = !strcmp(Name.p, name_p);
-                nh_encoding_freeUTF8String(&Name);
+                nh_encoding_freeUTF8(&Name);
                 if (match) {break;}
             }
         }
diff --git a/src/lib/nhcss/Parser/ComponentParser.c b/src/lib/nhcss/Parser/ComponentParser.c
index 3232a77..993b83b 100644
--- a/src/lib/nhcss/Parser/ComponentParser.c
+++ b/src/lib/nhcss/Parser/ComponentParser.c
@@ -243,7 +243,7 @@ NH_CSS_BEGIN()
         nh_css_setRuleData(nh_css_getRule(Object_p), *Rule_p);
     }
 
-    nh_encoding_freeUTF8String(&Name);
+    nh_encoding_freeUTF8(&Name);
 
 NH_CSS_DIAGNOSTIC_END(NH_CSS_SUCCESS)
 }
diff --git a/src/lib/nhcss/Parser/Match.c b/src/lib/nhcss/Parser/Match.c
index 7e7cb52..b3fafd1 100644
--- a/src/lib/nhcss/Parser/Match.c
+++ b/src/lib/nhcss/Parser/Match.c
@@ -47,7 +47,7 @@ NH_CSS_BEGIN()
             nh_encoding_UTF8String Identifier = nh_encoding_encodeUTF8(IdentTok_p->Other.Value.p, IdentTok_p->Other.Value.length);
             nh_webidl_DOMString *LocalName_p = nh_dom_getLocalName(Element_p);
             if (!strcmp(LocalName_p->p, Identifier.p)) {match = NH_TRUE;}
-            nh_encoding_freeUTF8String(&Identifier);
+            nh_encoding_freeUTF8(&Identifier);
         }
     }
  
@@ -72,7 +72,7 @@ NH_CSS_BEGIN()
         }
     }
 
-    nh_encoding_freeUTF8String(&Identifier);
+    nh_encoding_freeUTF8(&Identifier);
  
 NH_CSS_END(match)
 }
@@ -95,7 +95,7 @@ NH_CSS_BEGIN()
         }
     }
 
-    nh_encoding_freeUTF8String(&Identifier);
+    nh_encoding_freeUTF8(&Identifier);
  
 NH_CSS_END(match)
 }
diff --git a/src/lib/nhcss/Properties/Compute.c b/src/lib/nhcss/Properties/Compute.c
index 0f1ccf0..5e96afe 100644
--- a/src/lib/nhcss/Properties/Compute.c
+++ b/src/lib/nhcss/Properties/Compute.c
@@ -1469,7 +1469,7 @@ NH_CSS_BEGIN()
         nh_css_Value *Value_p = ComputedValues_p->pp[i];
         if (Value_p->Common.scope == NH_CSS_VALUE_SCOPE_COMPUTED) {
             if (nh_css_isStringValue(Value_p)) {
-                nh_encoding_freeUTF8String(&Value_p->String);
+                nh_encoding_freeUTF8(&Value_p->String);
             }
         }
     }
diff --git a/src/lib/nhcss/Properties/Values.c b/src/lib/nhcss/Properties/Values.c
index 8056d45..025819f 100644
--- a/src/lib/nhcss/Properties/Values.c
+++ b/src/lib/nhcss/Properties/Values.c
@@ -446,7 +446,7 @@ NH_CSS_BEGIN()
     {
         nh_css_Value *Value_p = &((nh_css_Value*)SpecifiedValues_p->p)[i];
         if (nh_css_isStringValue(Value_p)) {
-            nh_encoding_freeUTF8String(&Value_p->String);
+            nh_encoding_freeUTF8(&Value_p->String);
         }
     }
 
diff --git a/src/lib/nhdom/Common/Result.h b/src/lib/nhdom/Common/Result.h
index 3ec36f8..b24ce19 100644
--- a/src/lib/nhdom/Common/Result.h
+++ b/src/lib/nhdom/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhdom_enums 
- *  @{
- */ 
+/** @{ */ 
 
     /**
      * Return values for functions.
@@ -28,10 +26,7 @@
     } NH_DOM_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhdom_vars
- *  @{
- */ 
+/** @{ */ 
 
     extern const char *NH_DOM_RESULTS_PP[];
     extern unsigned int NH_DOM_RESULTS_PP_COUNT;
diff --git a/src/lib/nhdom/Common/Types/Public.h b/src/lib/nhdom/Common/Types/Public.h
index fd10525..0e4a5ef 100644
--- a/src/lib/nhdom/Common/Types/Public.h
+++ b/src/lib/nhdom/Common/Types/Public.h
@@ -16,9 +16,7 @@
 
 #endif
 
-/** @addtogroup lib_nhdom_typedefs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_dom_Node nh_dom_Node;
     typedef struct nh_dom_Element nh_dom_Element;
diff --git a/src/lib/nhecmascript/Common/Result.h b/src/lib/nhecmascript/Common/Result.h
index 01d17ed..924a464 100644
--- a/src/lib/nhecmascript/Common/Result.h
+++ b/src/lib/nhecmascript/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhecmascript_macros
- *  @{
- */ 
+/** @{ */ 
 
     #define NH_ECMASCRIPT_DOM_EXCEPTION_HIERARCHY_REQUEST_ERROR "HierarchyRequestError"
     #define NH_ECMASCRIPT_DOM_EXCEPTION_HIERARCHY_REQUEST_ERROR_MESSAGE "The operation would yield an incorrect node tree."
@@ -103,10 +101,7 @@
     #define NH_ECMASCRIPT_DOM_EXCEPTION_NOT_ALLOWED_ERROR_MESSAGE "The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission."
 
 /** @} */
-
-/** @addtogroup lib_nhecmascript_enums 
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -121,10 +116,7 @@
     } NH_ECMASCRIPT_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhecmascript_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_ECMASCRIPT_RESULTS_PP[];
     extern unsigned int NH_ECMASCRIPT_RESULTS_PP_COUNT;
diff --git a/src/lib/nhecmascript/Common/Types/Public.h b/src/lib/nhecmascript/Common/Types/Public.h
index 2f8e235..a56d755 100644
--- a/src/lib/nhecmascript/Common/Types/Public.h
+++ b/src/lib/nhecmascript/Common/Types/Public.h
@@ -16,9 +16,7 @@
 
 #endif
 
-/** @addtogroup lib_nhcss_typedefs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_ecmascript_OpaqueScript nh_ecmascript_OpaqueScript;
     typedef struct nh_ecmascript_OpaqueRealm nh_ecmascript_OpaqueRealm;
diff --git a/src/lib/nhencoding/Common/Result.h b/src/lib/nhencoding/Common/Result.h
index 029930a..2de9b17 100644
--- a/src/lib/nhencoding/Common/Result.h
+++ b/src/lib/nhencoding/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhencoding_enums 
- *  @{
- */ 
+/** @{ */ 
 
     /**
      * Return values for functions.
@@ -28,10 +26,7 @@
     } NH_ENCODING_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhencoding_vars
- *  @{
- */ 
+/** @{ */ 
 
     extern const char *NH_ENCODING_RESULTS_PP[];
     extern unsigned int NH_ENCODING_RESULTS_PP_COUNT;
diff --git a/src/lib/nhencoding/Common/Types/Public.h b/src/lib/nhencoding/Common/Types/Public.h
index aa6cfba..b98607e 100644
--- a/src/lib/nhencoding/Common/Types/Public.h
+++ b/src/lib/nhencoding/Common/Types/Public.h
@@ -15,18 +15,13 @@
 
 #endif
 
-/** @addtogroup lib_nhencoding_typedefs
- *  @{
- */
+/** @{ */
 
     typedef uint_least32_t NH_ENCODING_UTF32;
     typedef nh_String nh_encoding_UTF8String;
 
 /** @} */
-
-/** @addtogroup lib_nhencoding_enums
- *  @{
- */
+/** @{ */
 
     typedef enum NH_ENCODING_NAME {
         NH_ENCODING_NAME_UNDEFINED,
@@ -73,10 +68,7 @@
     } NH_ENCODING_NAME;
 
 /** @} */
-
-/** @addtogroup lib_nhencoding_structs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_encoding_UTF32String {
         NH_ENCODING_UTF32 *p;
diff --git a/src/lib/nhencoding/Encodings/UTF8.c b/src/lib/nhencoding/Encodings/UTF8.c
index 1a68ab6..2344f49 100644
--- a/src/lib/nhencoding/Encodings/UTF8.c
+++ b/src/lib/nhencoding/Encodings/UTF8.c
@@ -225,7 +225,7 @@ NH_ENCODING_END(count)
 
 // FREE ============================================================================================
 
-void nh_encoding_freeUTF8String(
+void nh_encoding_freeUTF8(
     nh_encoding_UTF8String *String_p)
 {
 NH_ENCODING_BEGIN()
diff --git a/src/lib/nhencoding/Encodings/UTF8.h b/src/lib/nhencoding/Encodings/UTF8.h
index f7d6224..76ec1dd 100644
--- a/src/lib/nhencoding/Encodings/UTF8.h
+++ b/src/lib/nhencoding/Encodings/UTF8.h
@@ -37,7 +37,7 @@
         nh_encoding_UTF8String *String_p, NH_ENCODING_UTF32 *codepoints_p, unsigned long length
     );
 
-    void nh_encoding_freeUTF8String(
+    void nh_encoding_freeUTF8(
         nh_encoding_UTF8String *String_p
     );
 
diff --git a/src/lib/nhgfx/Base/Surface.c b/src/lib/nhgfx/Base/Surface.c
index 71dd255..01a263b 100644
--- a/src/lib/nhgfx/Base/Surface.c
+++ b/src/lib/nhgfx/Base/Surface.c
@@ -29,6 +29,34 @@
 #include <string.h>
 #include <limits.h>
 
+// REQUIREMENTS ====================================================================================
+
+static nh_gfx_SurfaceRequirements Requirements;
+
+nh_gfx_SurfaceRequirements *nh_gfx_getSurfaceRequirements()
+{
+NH_GFX_BEGIN()
+NH_GFX_END(&Requirements)
+}
+
+NH_GFX_RESULT nh_gfx_createSurfaceRequirements()
+{
+NH_GFX_BEGIN()
+
+    NH_GFX_CHECK(nh_opengl_createSurfaceRequirements(&Requirements.OpenGL))
+
+NH_GFX_DIAGNOSTIC_END(NH_GFX_SUCCESS)
+}
+
+NH_GFX_RESULT nh_gfx_freeSurfaceRequirements()
+{
+NH_GFX_BEGIN()
+
+    NH_GFX_CHECK(nh_opengl_freeSurfaceRequirements(&Requirements.OpenGL))
+
+NH_GFX_DIAGNOSTIC_END(NH_GFX_SUCCESS)
+}
+
 //// RESIZE ==========================================================================================
 //
 //static NH_RESULT nh_resize(
diff --git a/src/lib/nhgfx/Base/Surface.h b/src/lib/nhgfx/Base/Surface.h
index d82de48..2acd42d 100644
--- a/src/lib/nhgfx/Base/Surface.h
+++ b/src/lib/nhgfx/Base/Surface.h
@@ -20,20 +20,19 @@
  *  @{
  */
 
-    typedef struct nh_gfx_Surface {
+    typedef struct nh_gfx_SurfaceRequirements {
+        nh_opengl_SurfaceRequirements OpenGL;
+    } nh_gfx_SurfaceRequirements;
 
+    typedef struct nh_gfx_Surface {
         void *args_p;
         NH_SIGNAL signal;
         int renderRequests;
-
         NH_GFX_API api;
         nh_wsi_Window *Window_p;
-
         nh_vk_Surface Vulkan;
 	nh_opengl_Surface OpenGL;
-
         nh_List Viewports;
-
         struct {
             nh_Color BackgroundColor;
         } Settings;
@@ -50,7 +49,6 @@
             NH_BOOL skipRender;          
             NH_BOOL atomic;
         } Internal;
-
     } nh_gfx_Surface;           
 
 /** @} */
@@ -59,6 +57,9 @@
  *  @{
  */
 
+    typedef nh_gfx_SurfaceRequirements *(*nh_gfx_getSurfaceRequirements_f)(
+    );
+
     typedef nh_gfx_Surface *(*nh_gfx_createSurface_f)(
         nh_wsi_Window *Window_p, NH_GFX_API api
     );
@@ -77,6 +78,12 @@
         nh_gfx_Surface *Surface_p
     );
 
+    NH_GFX_RESULT nh_gfx_createSurfaceRequirements(
+    );
+
+    NH_GFX_RESULT nh_gfx_freeSurfaceRequirements(
+    );
+
 /** @} */
 
 #endif 
diff --git a/src/lib/nhgfx/Base/Viewport.h b/src/lib/nhgfx/Base/Viewport.h
index 6a1717a..f884f5a 100644
--- a/src/lib/nhgfx/Base/Viewport.h
+++ b/src/lib/nhgfx/Base/Viewport.h
@@ -23,7 +23,7 @@
 
     typedef enum NH_GFX_VIEWPORT_OWNER {
         NH_GFX_VIEWPORT_OWNER_CSS,
-        NH_GFX_VIEWPORT_OWNER_TERM,
+        NH_GFX_VIEWPORT_OWNER_TERMINAL,
         NH_GFX_VIEWPORT_OWNER_USER,
         NH_GFX_VIEWPORT_OWNER_NONE,
     } NH_GFX_VIEWPORT_OWNER;
diff --git a/src/lib/nhgfx/Common/Initialize.c b/src/lib/nhgfx/Common/Initialize.c
index d730b1a..c8b9e5e 100644
--- a/src/lib/nhgfx/Common/Initialize.c
+++ b/src/lib/nhgfx/Common/Initialize.c
@@ -20,6 +20,7 @@
 #include "../OpenGL/OpenGL.h"
 
 #include "../Fonts/FontManager.h"
+#include "../Base/Surface.h"
 
 #include <stdlib.h>
 #include <string.h>
@@ -34,6 +35,7 @@ NH_GFX_RESULT nh_gfx_initialize()
     NH_GFX_CHECK(nh_gfx_createIndexMap())
     NH_GFX_CHECK(nh_gfx_initializeFontManager())
     NH_GFX_CHECK(nh_gfx_addInitialFonts())
+    NH_GFX_CHECK(nh_gfx_createSurfaceRequirements())
 
     nh_vk_initVulkan();
     nh_opengl_initOpenGL();
diff --git a/src/lib/nhgfx/Common/Log.c b/src/lib/nhgfx/Common/Log.c
index 2da2c51..987b245 100644
--- a/src/lib/nhgfx/Common/Log.c
+++ b/src/lib/nhgfx/Common/Log.c
@@ -17,6 +17,7 @@
 
 #include <stdio.h>
 #include <string.h>
+#include <stdarg.h>
 
 // LOG =============================================================================================
 
@@ -90,3 +91,16 @@ NH_GFX_BEGIN()
 NH_GFX_SILENT_END()
 }
            
+void nh_gfx_logOpenGLCommand(
+    NH_BYTE *format_p, ...)
+{
+NH_GFX_BEGIN()
+
+    va_list args;
+    va_start(args, format_p);
+    vprintf(format_p, args);
+    va_end(args);
+
+NH_GFX_SILENT_END()
+}
+ 
diff --git a/src/lib/nhgfx/Common/Log.h b/src/lib/nhgfx/Common/Log.h
index 55609b7..13ae18f 100644
--- a/src/lib/nhgfx/Common/Log.h
+++ b/src/lib/nhgfx/Common/Log.h
@@ -40,6 +40,10 @@
         NH_BYTE *message_p
     );
 
+    void nh_gfx_logOpenGLCommand(
+        NH_BYTE *format_p, ...
+    );
+
 /** @} */
 
 #endif 
diff --git a/src/lib/nhgfx/Common/Result.h b/src/lib/nhgfx/Common/Result.h
index 26fb73b..1f498bd 100644
--- a/src/lib/nhgfx/Common/Result.h
+++ b/src/lib/nhgfx/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhgfx_enums 
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -78,19 +76,13 @@
     } NH_GFX_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhgfx_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_GFX_RESULTS_PP[];
     extern unsigned int NH_GFX_RESULTS_PP_COUNT;
 
 /** @} */
-
-/** @addtogroup lib_nhgfx_functions
- *  @{
- */ 
+/** @{ */
 
     NH_GFX_RESULT nh_vk_getResult(
         int result
diff --git a/src/lib/nhgfx/Common/Terminate.c b/src/lib/nhgfx/Common/Terminate.c
index 99d55e6..ac1b623 100644
--- a/src/lib/nhgfx/Common/Terminate.c
+++ b/src/lib/nhgfx/Common/Terminate.c
@@ -16,6 +16,7 @@
 #include NH_GFX_DEFAULT_CHECK
 
 #include "../Base/Font.h"
+#include "../Base/Surface.h"
 
 #include <stdlib.h>
 #include <string.h>
@@ -29,6 +30,7 @@ NH_GFX_BEGIN()
 
     nh_gfx_freeIndexMap();
     nh_gfx_terminateFontManager();
+    nh_gfx_freeSurfaceRequirements();
 
 NH_GFX_DIAGNOSTIC_END(NH_GFX_SUCCESS)
 }
diff --git a/src/lib/nhgfx/Common/Types/Public.h b/src/lib/nhgfx/Common/Types/Public.h
index 832d556..cad4c1b 100644
--- a/src/lib/nhgfx/Common/Types/Public.h
+++ b/src/lib/nhgfx/Common/Types/Public.h
@@ -17,18 +17,14 @@
 
 #endif
 
-/** @addtogroup lib_nhgfx_typedefs
- *  @{
- */
+/** @{ */
 
+    typedef struct nh_gfx_SurfaceRequirements nh_gfx_SurfaceRequirements;
     typedef struct nh_gfx_Surface nh_gfx_Surface;
     typedef struct nh_gfx_Viewport nh_gfx_Viewport;
 
 /** @} */
-
-/** @addtogroup lib_nhgfx_enums
- *  @{
- */ 
+/** @{ */
 
     typedef enum NH_GFX_API {
         NH_GFX_API_VULKAN,
diff --git a/src/lib/nhgfx/OpenGL/API.c b/src/lib/nhgfx/OpenGL/API.c
index 3b7ce60..662ba5c 100644
--- a/src/lib/nhgfx/OpenGL/API.c
+++ b/src/lib/nhgfx/OpenGL/API.c
@@ -348,6 +348,7 @@ const NH_BYTE *NH_GFX_OPENGL_COMMAND_NAMES_PP[] = {
     "glTranslated",
     "glTranslatef",
     "glUniform1i",
+    "glUniform3f",
     "glUseProgram",
     "glVertex2d", 
     "glVertex2f",
@@ -712,6 +713,7 @@ const int NH_GFX_OPENGL_COMMAND_PARAMETER_COUNTS_P[] = {
     3, // glTranslated
     3, // glTranslatef
     2, // glUniform1i
+    4, // glUniform3f
     1, // glUseProgram
     2, // glVertex2d
     2, // glVertex2f
diff --git a/src/lib/nhgfx/OpenGL/API.h b/src/lib/nhgfx/OpenGL/API.h
index 659277e..adc8f5d 100644
--- a/src/lib/nhgfx/OpenGL/API.h
+++ b/src/lib/nhgfx/OpenGL/API.h
@@ -357,6 +357,7 @@
         NH_GFX_OPENGL_COMMAND_GLTRANSLATED,
         NH_GFX_OPENGL_COMMAND_GLTRANSLATEF,
         NH_GFX_OPENGL_COMMAND_GLUNIFORM1I,
+        NH_GFX_OPENGL_COMMAND_GLUNIFORM3F,
         NH_GFX_OPENGL_COMMAND_GLUSEPROGRAM,
         NH_GFX_OPENGL_COMMAND_GLVERTEX2D, 
         NH_GFX_OPENGL_COMMAND_GLVERTEX2F,
diff --git a/src/lib/nhgfx/OpenGL/Commands.c b/src/lib/nhgfx/OpenGL/Commands.c
index 93c204e..c14e80d 100644
--- a/src/lib/nhgfx/OpenGL/Commands.c
+++ b/src/lib/nhgfx/OpenGL/Commands.c
@@ -11,6 +11,7 @@
 #include "Commands.h"
 #include "API.h"
 
+#include "../Common/Log.h"
 #include "../Common/Macros/Macros.h"
 #include NH_GFX_FLOW
 #include NH_GFX_CUSTOM_CHECK
@@ -33,6 +34,8 @@ static NH_GFX_RESULT nh_opengl_glActiveTexture(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glActiveTexture(texture: %d)\n",*((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
+
     glActiveTexture(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
 
@@ -49,6 +52,10 @@ static NH_GFX_RESULT nh_opengl_glAttachShader(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glAttachShader(program: %d, shader: %d)\n",
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
+
     glAttachShader(
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
@@ -64,6 +71,10 @@ static NH_GFX_RESULT nh_opengl_glBindBuffer(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glBindBuffer(target: %d, buffer: %d)\n",
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
+
     glBindBuffer(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
@@ -76,6 +87,10 @@ static NH_GFX_RESULT nh_opengl_glBindTexture(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glBindTexture(target: %d, texture: %d)\n",
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
+
     glBindTexture(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
@@ -88,6 +103,9 @@ static NH_GFX_RESULT nh_opengl_glBindVertexArray(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glBindVertexArray(array: %d)\n",
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
+
     glBindVertexArray(
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
 
@@ -101,6 +119,10 @@ static NH_GFX_RESULT nh_opengl_glBlendFunc(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glBlendFunc(sfactor: %d, dfactor: %d)\n",
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
+
     glBlendFunc(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
@@ -113,6 +135,12 @@ static NH_GFX_RESULT nh_opengl_glBufferData(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glBufferData(target: %d, size: %d, data: %p, usage: %d)\n",
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+       *(GLsizeiptr*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p,
+      (const void*)((nh_opengl_Data*)Command_p->Arguments.pp[2])->p,
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[3])->p));
+
     glBufferData(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
        *(GLsizeiptr*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p,
@@ -130,6 +158,9 @@ static NH_GFX_RESULT nh_opengl_glClear(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glClear(mask: %d)\n",
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
+
     glClear(
         *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
 
@@ -143,6 +174,12 @@ static NH_GFX_RESULT nh_opengl_glClearColor(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glClearColor(red: %f, green: %f, blue: %f, alpha: %f)\n",
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[2])->p),
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[3])->p));
+
     glClearColor(
         *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
@@ -199,6 +236,9 @@ static NH_GFX_RESULT nh_opengl_glCompileShader(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glCompileShader(shader: %d)\n",
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
+
     glCompileShader(
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
 
@@ -218,6 +258,9 @@ NH_GFX_BEGIN()
 
     nh_opengl_gluint(&Command_p->Result, glCreateProgram());
 
+nh_gfx_logOpenGLCommand("glCreateProgram(void) -> %d\n", *((GLuint*)Command_p->Result.p));
+
+
 NH_GFX_END(NH_GFX_SUCCESS)
 }
 
@@ -230,6 +273,10 @@ NH_GFX_BEGIN()
         glCreateShader(
             *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p)));
 
+    nh_gfx_logOpenGLCommand("glCreateShader(shaderType: %d) -> %d\n", 
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLuint*)Command_p->Result.p));
+
 NH_GFX_END(NH_GFX_SUCCESS)
 }
 
@@ -245,6 +292,11 @@ static NH_GFX_RESULT nh_opengl_glDrawArrays(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glDrawArrays(mode: %d, first: %d, count: %d)\n",
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[2])->p));
+
     glDrawArrays(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
@@ -260,6 +312,12 @@ static NH_GFX_RESULT nh_opengl_glDrawElements(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glDrawElements(mode: %d, count: %d, type: %d, indices: %p)\n",
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[2])->p),
+        (const void*)((nh_opengl_Data*)Command_p->Arguments.pp[3])->p);
+
     glDrawElements(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
@@ -279,6 +337,9 @@ static NH_GFX_RESULT nh_opengl_glEnable(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glEnable(cap: %d)\n",
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
+ 
     glEnable(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
 
@@ -290,6 +351,9 @@ static NH_GFX_RESULT nh_opengl_glEnableVertexAttribArray(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glEnableVertexAttribArray(index: %d)\n",
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
+ 
     glEnableVertexAttribArray(
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
 
@@ -330,6 +394,20 @@ NH_GFX_BEGIN()
         *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
            (GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p);
 
+    NH_BYTE b[255] = {};
+    memset(b, 0, 255);
+     
+    sprintf(b, "glGenBuffers(n: %d, buffers: %p) -> (",
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+           (GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p);
+     
+    for (int i = 0; i < *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p); ++i) {
+        if (i) {sprintf(b+strlen(b), ", ");}
+        sprintf(b+strlen(b), "%d", ((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p)[i]);
+    }
+    sprintf(b+strlen(b), ")\n");
+    nh_gfx_logOpenGLCommand(b);
+
 NH_GFX_END(NH_GFX_SUCCESS)
 }
 
@@ -340,6 +418,10 @@ static NH_GFX_RESULT nh_opengl_glGenTextures(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glGenTextures(n: %d, textures: %p)\n",
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+           (GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p);
+ 
     glGenTextures(
         *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
            (GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p);
@@ -356,6 +438,21 @@ NH_GFX_BEGIN()
         *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
            (GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p);
 
+    NH_BYTE b[255] = {};
+    memset(b, 0, 255);
+     
+    sprintf(b, "glGenVertexArrays(n: %d, arrays: %p) -> (",
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+           (GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p);
+     
+    for (int i = 0; i < *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p); ++i) {
+        if (i) {sprintf(b+strlen(b), ", ");}
+        sprintf(b+strlen(b), "%d", ((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p)[i]);
+    }
+
+    sprintf(b+strlen(b), ")\n");
+    nh_gfx_logOpenGLCommand(b);
+
 NH_GFX_END(NH_GFX_SUCCESS)
 }
 
@@ -397,10 +494,14 @@ static NH_GFX_RESULT nh_opengl_glGetUniformLocation(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glGetUniformLocation(program: %d, name: %s)\n",
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((const GLchar**)((nh_opengl_Data*)Command_p->Arguments.pp[1])->pp));
+ 
     nh_opengl_glint(&Command_p->Result,
         glGetUniformLocation(
             *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
-            (const GLchar*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
+            *((const GLchar**)((nh_opengl_Data*)Command_p->Arguments.pp[1])->pp)));
 
 NH_GFX_END(NH_GFX_SUCCESS)
 }
@@ -437,6 +538,9 @@ static NH_GFX_RESULT nh_opengl_glLinkProgram(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glLinkProgram(program: %d)\n",
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
+ 
     glLinkProgram(
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
 
@@ -548,6 +652,12 @@ static NH_GFX_RESULT nh_opengl_glShaderSource(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glShaderSource(shader: %d, count: %d, string: %p, length: %d)\n",
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
+          (const GLchar**)((nh_opengl_Data*)Command_p->Arguments.pp[2])->pp,
+          (const GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[3])->p);
+ 
     glShaderSource(
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
@@ -609,6 +719,17 @@ static NH_GFX_RESULT nh_opengl_glTexImage2D(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glTexImage2D(target: %d, level: %d, internalformat: %d, width: %d, height: %d, border: %d, format: %d, type: %d, data: %p)\n",
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[2])->p),
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[3])->p),
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[4])->p),
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[5])->p),
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[6])->p),
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[7])->p),
+        *((const void**)((nh_opengl_Data*)Command_p->Arguments.pp[8])->pp));
+ 
     glTexImage2D(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
@@ -630,6 +751,11 @@ static NH_GFX_RESULT nh_opengl_glTexParameteri(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glTexParameteri(target: %d, pname: %d, param: %d)\n",
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[2])->p));
+ 
     glTexParameteri(
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLenum*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
@@ -650,6 +776,10 @@ static NH_GFX_RESULT nh_opengl_glUniform1i(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glUniform1i(location: %d, v0: %d)\n",
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
+ 
     glUniform1i(
         *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p));
@@ -657,11 +787,34 @@ NH_GFX_BEGIN()
 NH_GFX_END(NH_GFX_SUCCESS)
 }
 
+static NH_GFX_RESULT nh_opengl_glUniform3f(
+    nh_opengl_Command *Command_p)
+{
+NH_GFX_BEGIN()
+
+    nh_gfx_logOpenGLCommand("glUniform3f(location: %d, v0: %f, v1: %f, v2: %f)\n",
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[2])->p),
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[3])->p));
+ 
+    glUniform3f(
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[2])->p),
+        *((GLfloat*)((nh_opengl_Data*)Command_p->Arguments.pp[3])->p));
+
+NH_GFX_END(NH_GFX_SUCCESS)
+}
+
 static NH_GFX_RESULT nh_opengl_glUseProgram(
     nh_opengl_Command *Command_p)
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glUseProgram(program: %d)\n",
+        *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
+ 
     glUseProgram(
         *((GLuint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p));
 
@@ -720,6 +873,12 @@ static NH_GFX_RESULT nh_opengl_glViewport(
 {
 NH_GFX_BEGIN()
 
+    nh_gfx_logOpenGLCommand("glViewport(x: %d, y: %d, width: %d, height: %d)\n",
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
+        *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[2])->p),
+        *((GLsizei*)((nh_opengl_Data*)Command_p->Arguments.pp[3])->p));
+ 
     glViewport(
         *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[0])->p),
         *((GLint*)((nh_opengl_Data*)Command_p->Arguments.pp[1])->p),
@@ -1064,6 +1223,7 @@ nh_opengl_command_f commands_p[] = {
     NULL, // nh_opengl_glTranslated,
     NULL, // nh_opengl_glTranslatef,
     nh_opengl_glUniform1i,
+    nh_opengl_glUniform3f,
     nh_opengl_glUseProgram,
     NULL, // nh_opengl_glVertex2d,
     NULL, // nh_opengl_glVertex2f,
diff --git a/src/lib/nhgfx/OpenGL/Data.c b/src/lib/nhgfx/OpenGL/Data.c
index 8b0219a..6b5ac10 100644
--- a/src/lib/nhgfx/OpenGL/Data.c
+++ b/src/lib/nhgfx/OpenGL/Data.c
@@ -48,7 +48,7 @@ NH_GFX_BEGIN()
 
     Data_p->type = type;
     Data_p->size = size;
-    Data_p->p = Data_p->size ? nh_allocate(Data_p->size+1) : NULL;
+    Data_p->p = Data_p->size ? nh_allocate(Data_p->size+1) : data_p;
     Data_p->pp = data_pp;
 
     if (Data_p->size) {
@@ -143,10 +143,10 @@ NH_GFX_BEGIN()
 NH_GFX_END(nh_opengl_createData(Data_p, NH_GFX_OPENGL_DATA_GLENUM, sizeof(GLenum), (NH_BYTE*)&data, NULL))
 }
 
-nh_opengl_Data *nh_opengl_null(
-    nh_opengl_Data *Data_p, NH_GFX_OPENGL_DATA_E type)
+nh_opengl_Data *nh_opengl_pointer(
+    nh_opengl_Data *Data_p, void *p)
 {
 NH_GFX_BEGIN()
-NH_GFX_END(nh_opengl_createData(Data_p, type, 0, NULL, NULL))
+NH_GFX_END(nh_opengl_createData(Data_p, NH_GFX_OPENGL_DATA_POINTER, 0, p, NULL))
 }
 
diff --git a/src/lib/nhgfx/OpenGL/Data.h b/src/lib/nhgfx/OpenGL/Data.h
index d0e2c08..4ca85c4 100644
--- a/src/lib/nhgfx/OpenGL/Data.h
+++ b/src/lib/nhgfx/OpenGL/Data.h
@@ -40,6 +40,7 @@
         NH_GFX_OPENGL_DATA_GLCLAMPF,
         NH_GFX_OPENGL_DATA_GLDOUBLE,
         NH_GFX_OPENGL_DATA_GLCLAMPD,
+        NH_GFX_OPENGL_DATA_POINTER,
     } NH_GFX_OPENGL_DATA_E;
 
 /** @} */
@@ -101,8 +102,8 @@
         nh_opengl_Data *Data_p, GLenum data
     );
 
-    nh_opengl_Data *nh_opengl_null(
-        nh_opengl_Data *Data_p, NH_GFX_OPENGL_DATA_E type
+    nh_opengl_Data *nh_opengl_pointer(
+        nh_opengl_Data *Data_p, void *p
     );
 
     nh_opengl_Data nh_opengl_initData(
diff --git a/src/lib/nhgfx/OpenGL/Surface.c b/src/lib/nhgfx/OpenGL/Surface.c
index 1bf01f2..2be1998 100644
--- a/src/lib/nhgfx/OpenGL/Surface.c
+++ b/src/lib/nhgfx/OpenGL/Surface.c
@@ -10,12 +10,14 @@
 
 #include "Surface.h"
 
+#include "../Base/Surface.h"
 #include "../Common/Macros/Macros.h"
 #include NH_GFX_FLOW
 #include NH_GFX_DEFAULT_CHECK
 
 #include "../../nhcore/System/Thread.h"
 #include "../../nhcore/System/Memory.h"
+#include "../../nhcore/Util/Array.h"
 
 #include "../../nhwsi/Main/Window.h"
 
@@ -25,6 +27,8 @@
 #include <stdlib.h>
 #include <time.h>
 
+#include <X11/extensions/Xrender.h>
+
 // INIT ============================================================================================
 
 nh_opengl_Surface nh_opengl_initSurface()
@@ -39,35 +43,48 @@ NH_GFX_END(Surface)
 
 // CREATE ==========================================================================================
 
+static int VISUAL_DATA_P[] = {
+    GLX_RENDER_TYPE, GLX_RGBA_BIT,
+    GLX_DRAWABLE_TYPE, GLX_WINDOW_BIT,
+    GLX_DOUBLEBUFFER, True,
+    GLX_RED_SIZE, 8,
+    GLX_GREEN_SIZE, 8,
+    GLX_BLUE_SIZE, 8,
+    GLX_ALPHA_SIZE, 8,
+    GLX_DEPTH_SIZE, 16,
+    None
+};
+
 typedef GLXContext (*glXCreateContextAttribsARBProc)
     (Display*, GLXFBConfig, GLXContext, Bool, const int*);
 
-NH_GFX_RESULT nh_opengl_createSurface(
+NH_GFX_RESULT nh_opengl_createOpenGLContext(
     nh_opengl_Surface *Surface_p, nh_wsi_Window *Window_p)
 {
 NH_GFX_BEGIN()
 
-    static int visual_attribs[] = {
-        GLX_RENDER_TYPE, GLX_RGBA_BIT,
-        GLX_DRAWABLE_TYPE, GLX_WINDOW_BIT,
-        GLX_DOUBLEBUFFER, true,
-        GLX_RED_SIZE, 1,
-        GLX_GREEN_SIZE, 1,
-        GLX_BLUE_SIZE, 1,
-        None
-    };
+    int count = 0;
+    GLXFBConfig *FrameBufferConfigurations_p = 
+        glXChooseFBConfig(Window_p->X11.Display_p, DefaultScreen(Window_p->X11.Display_p), VISUAL_DATA_P, &count);
 
-    int num_fbc = 0;
-    GLXFBConfig *FBC_p = glXChooseFBConfig(Window_p->X11.Display_p, DefaultScreen(Window_p->X11.Display_p),
-        visual_attribs, &num_fbc);
+    GLXFBConfig FrameBufferConfiguration_p = NULL; 
 
-    if (!FBC_p) {
-        NH_GFX_DIAGNOSTIC_END(NH_GFX_ERROR_BAD_STATE)
+    for (int i = 0; i < count; i++) {
+        XVisualInfo *Info_p = (XVisualInfo*) 
+            glXGetVisualFromFBConfig(Window_p->X11.Display_p, FrameBufferConfigurations_p[i]);
+        // We need to use the FBC that relates to the Visual that was used for window creation.
+        if (Info_p->visualid == Window_p->X11.Info.visualid) {
+            FrameBufferConfiguration_p = FrameBufferConfigurations_p[i];
+            break;
+        }
     }
 
+    if (!FrameBufferConfiguration_p) {
+        NH_GFX_DIAGNOSTIC_END(NH_GFX_ERROR_BAD_STATE)
+    }
+ 
     glXCreateContextAttribsARBProc glXCreateContextAttribsARB_f = 0;
-    glXCreateContextAttribsARB_f =
-        (glXCreateContextAttribsARBProc)
+    glXCreateContextAttribsARB_f = (glXCreateContextAttribsARBProc)
         glXGetProcAddress((const GLubyte*)"glXCreateContextAttribsARB");
 
     if (!glXCreateContextAttribsARB_f) {
@@ -75,20 +92,30 @@ NH_GFX_BEGIN()
     }
 
     /* Set desired minimum OpenGL version */
-    static int contextAttribs_p[] = {
+    static int contextAttributes_p[] = {
         GLX_CONTEXT_MAJOR_VERSION_ARB, 4,
         GLX_CONTEXT_MINOR_VERSION_ARB, 6,
         None
     };
 
     /* Create modern OpenGL context */
-    Surface_p->Context_p = glXCreateContextAttribsARB_f(Window_p->X11.Display_p, FBC_p[0], NULL, true,
-                                                contextAttribs_p);
+    Surface_p->Context_p = glXCreateContextAttribsARB_f(
+        Window_p->X11.Display_p, FrameBufferConfiguration_p, NULL, true, contextAttributes_p);
 
     if (!Surface_p->Context_p) {
         NH_GFX_DIAGNOSTIC_END(NH_GFX_ERROR_BAD_STATE)
     }
 
+NH_GFX_DIAGNOSTIC_END(NH_GFX_SUCCESS)
+}
+
+NH_GFX_RESULT nh_opengl_createSurface(
+    nh_opengl_Surface *Surface_p, nh_wsi_Window *Window_p)
+{
+NH_GFX_BEGIN()
+
+    NH_GFX_CHECK(nh_opengl_createOpenGLContext(Surface_p, Window_p))
+
     int bufferCount = 3;
 
     Surface_p->CommandBuffers_p = nh_allocate(sizeof(nh_opengl_CommandBuffer)*bufferCount);
@@ -116,3 +143,47 @@ NH_GFX_BEGIN()
 NH_GFX_END(NH_GFX_SUCCESS)
 }
 
+// REQUIREMENTS ====================================================================================
+
+NH_GFX_RESULT nh_opengl_createSurfaceRequirements(
+    nh_opengl_SurfaceRequirements *Requirements_p)
+{
+NH_GFX_BEGIN()
+
+    Requirements_p->Ids = nh_initArray(sizeof(VisualID), 8);
+
+    Display *Display_p = XOpenDisplay(NULL);
+
+    int count = 0;
+    GLXFBConfig *FrameBufferConfigurations_p = 
+        glXChooseFBConfig(Display_p, DefaultScreen(Display_p), VISUAL_DATA_P, &count);
+
+    for (int i = 0; i < count; i++) {
+        XVisualInfo *Visual_p = 
+            (XVisualInfo*) glXGetVisualFromFBConfig(Display_p, FrameBufferConfigurations_p[i]);
+        if (!Visual_p) {continue;}
+
+        XRenderPictFormat *Format_p = XRenderFindVisualFormat(Display_p, Visual_p->visual);
+        if (!Format_p) {continue;}
+
+        // We need a framebuffer with alpha capability.
+        if (Format_p->direct.alphaMask > 0) {
+            nh_appendToArray(&Requirements_p->Ids, &Visual_p->visualid, 1);
+        }
+    }
+
+    XCloseDisplay(Display_p);
+
+NH_GFX_END(NH_GFX_SUCCESS)
+}
+
+NH_GFX_RESULT nh_opengl_freeSurfaceRequirements(
+    nh_opengl_SurfaceRequirements *Requirements_p)
+{
+NH_GFX_BEGIN()
+
+    nh_freeArray(&Requirements_p->Ids);
+
+NH_GFX_END(NH_GFX_SUCCESS)
+}
+
diff --git a/src/lib/nhgfx/OpenGL/Surface.h b/src/lib/nhgfx/OpenGL/Surface.h
index 472d377..4fe7f37 100644
--- a/src/lib/nhgfx/OpenGL/Surface.h
+++ b/src/lib/nhgfx/OpenGL/Surface.h
@@ -18,6 +18,10 @@
  *  @{
  */
 
+    typedef struct nh_opengl_SurfaceRequirements {
+        nh_Array Ids; // Contains visualid's that are glx framebuffer compatible. This is used for WSI window creation.
+    } nh_opengl_SurfaceRequirements;
+
     typedef struct nh_opengl_Surface {
         GLXContext Context_p;
         nh_opengl_CommandBuffer *CommandBuffers_p;
@@ -42,6 +46,14 @@
         nh_opengl_Surface *Surface_p;
     );
 
+    NH_GFX_RESULT nh_opengl_createSurfaceRequirements(
+        nh_opengl_SurfaceRequirements *Requirements_p
+    );
+
+    NH_GFX_RESULT nh_opengl_freeSurfaceRequirements(
+        nh_opengl_SurfaceRequirements *Requirements_p
+    );
+
 /** @} */
 
 #endif
diff --git a/src/lib/nhgfx/OpenGL/Viewport.c b/src/lib/nhgfx/OpenGL/Viewport.c
index 35e466c..db5ab07 100644
--- a/src/lib/nhgfx/OpenGL/Viewport.c
+++ b/src/lib/nhgfx/OpenGL/Viewport.c
@@ -49,6 +49,8 @@ NH_GFX_RESULT nh_opengl_beginRecording(
 {
 NH_GFX_BEGIN()
 
+    *(Viewport_p->OpenGL.CommandBuffer_p) = nh_opengl_initCommandBuffer();
+
     nh_opengl_addCommand(
         Viewport_p->OpenGL.CommandBuffer_p,
         "glViewport",
diff --git a/src/lib/nhhtml/Common/Log.c b/src/lib/nhhtml/Common/Log.c
index 6cde454..7f99e44 100644
--- a/src/lib/nhhtml/Common/Log.c
+++ b/src/lib/nhhtml/Common/Log.c
@@ -101,7 +101,7 @@ NH_HTML_BEGIN()
         nh_encoding_UTF32String NewString = nh_encoding_replaceNonCharactersExpressively(&String);
         nh_encoding_UTF8String ReplaceString = nh_encoding_encodeUTF8(NewString.p, NewString.length);
         nh_appendFormatToString(&Message, "%s%s \"%s\"", indent_p, Object_p->Interface_p->name_p, ReplaceString.p);
-        nh_encoding_freeUTF8String(&ReplaceString);
+        nh_encoding_freeUTF8(&ReplaceString);
         nh_encoding_freeUTF32(&String);
         nh_encoding_freeUTF32(&NewString);
     }
diff --git a/src/lib/nhhtml/Common/Result.h b/src/lib/nhhtml/Common/Result.h
index 3eea672..4eefacb 100644
--- a/src/lib/nhhtml/Common/Result.h
+++ b/src/lib/nhhtml/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhhtml_enums 
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -28,10 +26,7 @@
     } NH_HTML_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhhtml_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_HTML_RESULTS_PP[];
     extern unsigned int NH_HTML_RESULTS_PP_COUNT;
diff --git a/src/lib/nhhtml/Common/Types/Public.h b/src/lib/nhhtml/Common/Types/Public.h
index ee9d109..6e0d97a 100644
--- a/src/lib/nhhtml/Common/Types/Public.h
+++ b/src/lib/nhhtml/Common/Types/Public.h
@@ -20,9 +20,7 @@
 
 #endif
 
-/** @addtogroup lib_nhhtml_typedefs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_html_DocumentContext nh_html_DocumentContext;
     typedef struct nh_html_HTMLElement nh_html_HTMLElement;
diff --git a/src/lib/nhmake/Common/Result.h b/src/lib/nhmake/Common/Result.h
index d32d7d5..ca505ee 100644
--- a/src/lib/nhmake/Common/Result.h
+++ b/src/lib/nhmake/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup selfmakeAPIEnums
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -95,10 +93,7 @@
     } NH_MAKE_RESULT;
 
 /** @} */
-
-/** @addtogroup selfmakeAPIVars 
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_MAKE_RESULTS_PP[];
     extern unsigned int NH_MAKE_RESULTS_PP_COUNT;
diff --git a/src/lib/nhmake/Common/Types/Public.h b/src/lib/nhmake/Common/Types/Public.h
index 075a8df..0ed41aa 100644
--- a/src/lib/nhmake/Common/Types/Public.h
+++ b/src/lib/nhmake/Common/Types/Public.h
@@ -15,18 +15,13 @@
 
 #endif
 
-/** @addtogroup lib_nhmake_typedefs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_make_Runtime nh_make_Runtime;
     typedef struct nh_make_ChangesNode nh_make_ChangesNode;
 
 /** @} */
-
-/** @addtogroup lib_nhmake_enums
- *  @{
- */ 
+/** @{ */
 
     /**
      * Boolean values.
@@ -91,10 +86,7 @@
     } NH_MAKE_PRINT_CHANGES;
 
 /** @} */
-
-/** @addtogroup lib_nhmake_structs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_make_Function {
         NH_MAKE_DEFINITION type;
@@ -174,10 +166,7 @@
     } nh_make_ChangelogPart;
 
 /** @} */
-
-/** @addtogroup lib_nhmake_typedefs
- *  @{
- */
+/** @{ */
 
     typedef NH_MAKE_RESULT (*nh_make_functionCallback_f)(
         nh_make_Runtime *Runtime_p, nh_make_Function *Function_p
diff --git a/src/lib/nhnetwork/Common/Result.h b/src/lib/nhnetwork/Common/Result.h
index cb41e39..f8e146b 100644
--- a/src/lib/nhnetwork/Common/Result.h
+++ b/src/lib/nhnetwork/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhnetwork_enums
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -28,10 +26,7 @@
     } NH_NETWORK_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhnetwork_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_NETWORK_RESULTS_PP[];
     extern unsigned int NH_NETWORK_RESULTS_PP_COUNT;
diff --git a/src/lib/nhrenderer/Common/Result.h b/src/lib/nhrenderer/Common/Result.h
index 6208f3b..ada076f 100644
--- a/src/lib/nhrenderer/Common/Result.h
+++ b/src/lib/nhrenderer/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhrenderer_enums 
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -28,10 +26,7 @@
     } NH_RENDERER_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhrenderer_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_RENDERER_RESULTS_PP[];
     extern unsigned int NH_RENDERER_RESULTS_PP_COUNT;
diff --git a/src/lib/nhrenderer/Common/Types/Public.h b/src/lib/nhrenderer/Common/Types/Public.h
index 501fdc1..6f1b297 100644
--- a/src/lib/nhrenderer/Common/Types/Public.h
+++ b/src/lib/nhrenderer/Common/Types/Public.h
@@ -17,9 +17,7 @@
 
 #endif
 
-/** @addtogroup lib_nhrenderer_typedefs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_renderer_Renderer nh_renderer_Renderer;
 
diff --git a/src/lib/nhterminal/Common/Result.h b/src/lib/nhterminal/Common/Result.h
index f47ffbd..e065b98 100644
--- a/src/lib/nhterminal/Common/Result.h
+++ b/src/lib/nhterminal/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhterminal_enums 
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -33,10 +31,7 @@
     } NH_TERMINAL_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhterminal_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_TERMINAL_RESULTS_PP[];
     extern unsigned int NH_TERMINAL_RESULTS_PP_COUNT;
diff --git a/src/lib/nhterminal/Common/Types/Public.h b/src/lib/nhterminal/Common/Types/Public.h
index 42caeae..1487d52 100644
--- a/src/lib/nhterminal/Common/Types/Public.h
+++ b/src/lib/nhterminal/Common/Types/Public.h
@@ -18,9 +18,7 @@
 
 #endif
 
-/** @addtogroup lib_nhterminal_typedefs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_terminal_Terminal nh_terminal_Terminal;
 
diff --git a/src/lib/nhterminal/OpenGL/Render.c b/src/lib/nhterminal/OpenGL/Render.c
index 45645b1..e6eac21 100644
--- a/src/lib/nhterminal/OpenGL/Render.c
+++ b/src/lib/nhterminal/OpenGL/Render.c
@@ -25,59 +25,89 @@
 
 // TEXT ============================================================================================
 
-static void nh_terminal_renderText(
-    nh_terminal_OpenGLText *Text_p, nh_opengl_CommandBuffer *CommandBuffer_p, int vertices,
-    int indices)
+static NH_TERMINAL_RESULT nh_terminal_drawOpenGLText(
+    nh_terminal_Graphics *Graphics_p, nh_terminal_Grid *Grid_p)
 {
 NH_TERMINAL_BEGIN()
 
+    if (Grid_p->rows <= 0 || Grid_p->Rows.size == 0) {
+        NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
+    }
+
+    nh_opengl_CommandBuffer *CommandBuffer_p = Graphics_p->Viewport_p->OpenGL.CommandBuffer_p;
+
+    static const GLchar *colorName_p = "in_color";
+    nh_opengl_Data *Color_p = 
+        &nh_opengl_addCommand(CommandBuffer_p, "glGetUniformLocation", Graphics_p->Text.OpenGL.Program_p, 
+            nh_opengl_glchar(NULL, NULL, 0, &colorName_p))->Result;
+
+    int total = 0;
+    int offset = 0;
+    int x = 0;
+    int y = 0;
+
+    nh_terminal_Tile *Tile_p = ((nh_terminal_Tile*)((nh_List*)Grid_p->Rows.pp[0])->pp[0]);
+    nh_Color Color = Tile_p->Foreground.custom ? Tile_p->Foreground.Color : Graphics_p->Text.Color;
+
+    while (NH_TRUE) 
+    {
+        offset += total;
+
+        nh_Color NextColor = Color;
+        total = nh_terminal_getCurrentColorRange(Graphics_p, Grid_p, &NextColor, &x, &y, NH_TRUE) * 6;
+        if (!total) {break;}
+
+        nh_opengl_addCommand(CommandBuffer_p, "glUniform3f", Color_p, nh_opengl_glfloat(NULL, Color.r),
+            nh_opengl_glfloat(NULL, Color.g), nh_opengl_glfloat(NULL, Color.b));
+
+        nh_opengl_addCommand(CommandBuffer_p, "glDrawElements", 
+            nh_opengl_glenum(NULL, GL_TRIANGLES), nh_opengl_glsizei(NULL, total), 
+            nh_opengl_glenum(NULL, GL_UNSIGNED_INT),
+            nh_opengl_pointer(NULL, (void*)(sizeof(uint32_t)*offset)));
+
+        Color = NextColor;
+    }
+
+NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
+}
+
+static NH_TERMINAL_RESULT nh_terminal_prepareOpenGLTextDraw(
+    nh_terminal_Graphics *Graphics_p)
+{
+NH_TERMINAL_BEGIN()
+
+    nh_opengl_CommandBuffer *CommandBuffer_p = Graphics_p->Viewport_p->OpenGL.CommandBuffer_p;
+
     nh_opengl_addCommand(CommandBuffer_p, "glEnable", nh_opengl_glenum(NULL, GL_BLEND));
     nh_opengl_addCommand(CommandBuffer_p, "glBlendFunc", nh_opengl_glenum(NULL, GL_SRC_ALPHA),
         nh_opengl_glenum(NULL, GL_ONE_MINUS_SRC_ALPHA));
 
-    nh_opengl_addCommand(CommandBuffer_p, "glUseProgram", &Text_p->Program_p->Result);
+    nh_opengl_addCommand(CommandBuffer_p, "glUseProgram", Graphics_p->Text.OpenGL.Program_p);
 
-    nh_opengl_Command *Texture_p = nh_opengl_addCommand(CommandBuffer_p, "glGetUniformLocation",
-        &Text_p->Program_p->Result, nh_opengl_glchar(NULL, "u_texture", 9, NULL));
+    static const GLchar *textureName_p = "u_texture";
+    nh_opengl_Data *Texture_p = &nh_opengl_addCommand(CommandBuffer_p, "glGetUniformLocation",
+        Graphics_p->Text.OpenGL.Program_p, nh_opengl_glchar(NULL, NULL, 0, &textureName_p))->Result;
 
-    nh_opengl_addCommand(CommandBuffer_p, "glUniform1i", &Texture_p->Result, nh_opengl_glint(NULL, 0));
+    nh_opengl_addCommand(CommandBuffer_p, "glUniform1i", Texture_p, nh_opengl_glint(NULL, 0));
 
-    nh_opengl_addCommand(CommandBuffer_p, "glDrawElements", 
-        nh_opengl_glenum(NULL, GL_TRIANGLES), nh_opengl_glsizei(NULL, indices), 
-        nh_opengl_glenum(NULL, GL_UNSIGNED_INT), nh_opengl_null(NULL, NH_GFX_OPENGL_DATA_GLINT));
-
-NH_TERMINAL_SILENT_END()
+NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
 }
 
 // RENDER ==========================================================================================
 
 NH_TERMINAL_RESULT nh_terminal_renderUsingOpenGL(
-    nh_terminal_Graphics *Graphics_p)
+    nh_terminal_Graphics *Graphics_p, nh_terminal_Grid *Grid_p)
 {
 NH_TERMINAL_BEGIN()
 
-    nh_gfx_FontInstance *FontInstance_p = nh_gfx_getFontInstance(
-        Graphics_p->Fonts.pp[Graphics_p->font], Graphics_p->fontSize
-    );
-
     nh_gfx_beginRecording(Graphics_p->Viewport_p);
 
-    if (Graphics_p->OpenGL.init) {
-        nh_opengl_appendCommandBuffer(Graphics_p->Viewport_p->OpenGL.CommandBuffer_p, 
-            &Graphics_p->OpenGL.Text.CommandBuffer);
-        Graphics_p->OpenGL.init = NH_FALSE;
-    }
-
-    NH_TERMINAL_CHECK(nh_terminal_updateOpenGLText(
-        FontInstance_p, Graphics_p->Viewport_p->OpenGL.CommandBuffer_p, &Graphics_p->TextVertices, 
-        &Graphics_p->TextIndices
-    ))
-
-    nh_terminal_renderText(&Graphics_p->OpenGL.Text, Graphics_p->Viewport_p->OpenGL.CommandBuffer_p, 
-        Graphics_p->TextVertices.length, Graphics_p->TextIndices.length);
+    NH_TERMINAL_CHECK(nh_terminal_updateOpenGLText(Graphics_p))
+    NH_TERMINAL_CHECK(nh_terminal_prepareOpenGLTextDraw(Graphics_p))
+    NH_TERMINAL_CHECK(nh_terminal_drawOpenGLText(Graphics_p, Grid_p))
 
     nh_gfx_endRecording(Graphics_p->Viewport_p);
 
-NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
+NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
 }
 
diff --git a/src/lib/nhterminal/OpenGL/Render.h b/src/lib/nhterminal/OpenGL/Render.h
index 2b6fa51..08f2fbc 100644
--- a/src/lib/nhterminal/OpenGL/Render.h
+++ b/src/lib/nhterminal/OpenGL/Render.h
@@ -19,7 +19,7 @@
  */
 
     NH_TERMINAL_RESULT nh_terminal_renderUsingOpenGL(
-        nh_terminal_Graphics *Graphics_p
+        nh_terminal_Graphics *Graphics_p, nh_terminal_Grid *Grid_p
     );
 
 /** @} */
diff --git a/src/lib/nhterminal/OpenGL/Text.c b/src/lib/nhterminal/OpenGL/Text.c
index f9d2126..40b4672 100644
--- a/src/lib/nhterminal/OpenGL/Text.c
+++ b/src/lib/nhterminal/OpenGL/Text.c
@@ -10,12 +10,12 @@
 
 #include "Text.h"
 
+#include "../Terminal/Graphics.h"
 #include "../Common/Macros/Macros.h"
 #include NH_TERMINAL_FLOW
 #include NH_TERMINAL_DEFAULT_CHECK
 
-//#include "../../nhcore/Util/Array.h"
-//#include "../../nhgfx/Vulkan/Texture.h"
+#include "../../nhgfx/Base/Viewport.h"
 #include "../../nhgfx/Common/Macros/Macros.h"
 #include NH_GFX_FLOW
 #include NH_GFX_CUSTOM_CHECK
@@ -29,26 +29,23 @@
 #include <limits.h>
 #include <float.h>
 
-// INIT ============================================================================================
+// INIT HELPER =====================================================================================
 
-NH_TERMINAL_RESULT nh_terminal_initOpenGLText(
-    nh_terminal_OpenGLText *Text_p, nh_gfx_Font *Font_p)
+static NH_TERMINAL_RESULT nh_terminal_initOpenGLTextProgram(
+    nh_terminal_OpenGLText *OpenGL_p, nh_opengl_CommandBuffer *CommandBuffer_p)
 {
 NH_TERMINAL_BEGIN()
 
-    nh_gfx_FontInstance *FontInstance_p = nh_gfx_getFontInstance(
-        Font_p, 10
-    );
-
-    Text_p->CommandBuffer = nh_opengl_initCommandBuffer();
-
     static const char* vsSource_p =
         "#version 450\n"
         "layout(location=0) in vec3 position;\n"
         "layout(location=1) in vec2 uv;\n"
+        "uniform vec3 in_color;\n"
         "out vec2 texcoord;\n"
+        "out vec3 color;\n"
         "void main() {\n"
         "    texcoord = uv.xy;\n"
+        "    color = in_color;\n"
         "    gl_Position = vec4(position, 1.0);\n"
         "}\n";
 
@@ -56,113 +53,207 @@ NH_TERMINAL_BEGIN()
         "#version 450\n"
         "uniform sampler2D u_texture;\n"
         "in vec2 texcoord;\n"
+        "in vec3 color;\n"
         "out vec4 fragColor;\n"
         "void main() {\n"
         "    float dist = texture2D(u_texture, texcoord.st).r;\n"
         "    float width = fwidth(dist);\n"
         "    float alpha = smoothstep(0.5-width, 0.5+width, dist);\n"
-        "    fragColor = vec4(1.0, 0.0, 0.0, alpha);\n"
+        "    fragColor = vec4(color, alpha);\n"
         "}\n";
 
-    nh_opengl_Data *Texture_p = nh_opengl_gluint(NULL, 0);
+    OpenGL_p->VertexShader_p =
+        &nh_opengl_addCommand(CommandBuffer_p, "glCreateShader",
+            nh_opengl_glint(NULL, GL_VERTEX_SHADER))->Result;
+    nh_opengl_addCommand(CommandBuffer_p, "glShaderSource",
+        OpenGL_p->VertexShader_p, nh_opengl_gluint(NULL, 1),
+        nh_opengl_glchar(NULL, NULL, 0, &vsSource_p),
+        nh_opengl_pointer(NULL, NULL));
+    nh_opengl_addCommand(CommandBuffer_p, "glCompileShader", OpenGL_p->VertexShader_p);
+
+    OpenGL_p->FragmentShader_p =
+        &nh_opengl_addCommand(CommandBuffer_p, "glCreateShader",
+            nh_opengl_glint(NULL, GL_FRAGMENT_SHADER))->Result;
+    nh_opengl_addCommand(CommandBuffer_p, "glShaderSource",
+        OpenGL_p->FragmentShader_p, nh_opengl_gluint(NULL, 1),
+        nh_opengl_glchar(NULL, NULL, 0, &fsSource_p),
+        nh_opengl_pointer(NULL, NULL));
+    nh_opengl_addCommand(CommandBuffer_p, "glCompileShader", OpenGL_p->FragmentShader_p);
+
+    OpenGL_p->Program_p = &nh_opengl_addCommand(CommandBuffer_p, "glCreateProgram")->Result;
+
+    nh_opengl_addCommand(CommandBuffer_p, "glAttachShader", OpenGL_p->Program_p,
+        OpenGL_p->VertexShader_p);
+    nh_opengl_addCommand(CommandBuffer_p, "glAttachShader", OpenGL_p->Program_p,
+        OpenGL_p->FragmentShader_p);
+
+    nh_opengl_addCommand(CommandBuffer_p, "glLinkProgram", OpenGL_p->Program_p);
+
+NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
+}
+
+static NH_TERMINAL_RESULT nh_terminal_initOpenGLFontTexture(
+    nh_terminal_OpenGLText *OpenGL_p, nh_opengl_CommandBuffer *CommandBuffer_p)
+{
+NH_TERMINAL_BEGIN()
+
+    OpenGL_p->Texture_p = nh_opengl_gluint(NULL, 0);
 
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glGenTextures", nh_opengl_glsizei(NULL, 1), Texture_p);
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glActiveTexture", nh_opengl_glenum(NULL, GL_TEXTURE0));
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glBindTexture",
-        nh_opengl_glenum(NULL, GL_TEXTURE_2D), Texture_p);
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glTexParameteri",
+    nh_opengl_addCommand(CommandBuffer_p, "glGenTextures", nh_opengl_glsizei(NULL, 1), OpenGL_p->Texture_p);
+    nh_opengl_addCommand(CommandBuffer_p, "glActiveTexture", nh_opengl_glenum(NULL, GL_TEXTURE0));
+    nh_opengl_addCommand(CommandBuffer_p, "glBindTexture",
+        nh_opengl_glenum(NULL, GL_TEXTURE_2D), OpenGL_p->Texture_p);
+
+    nh_opengl_addCommand(CommandBuffer_p, "glTexParameteri",
         nh_opengl_glenum(NULL, GL_TEXTURE_2D), nh_opengl_glenum(NULL, GL_TEXTURE_WRAP_S),
         nh_opengl_glenum(NULL, GL_CLAMP_TO_EDGE));
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glTexParameteri",
+    nh_opengl_addCommand(CommandBuffer_p, "glTexParameteri",
         nh_opengl_glenum(NULL, GL_TEXTURE_2D), nh_opengl_glenum(NULL, GL_TEXTURE_WRAP_T),
         nh_opengl_glenum(NULL, GL_CLAMP_TO_EDGE));
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glTexParameteri",
+    nh_opengl_addCommand(CommandBuffer_p, "glTexParameteri",
         nh_opengl_glenum(NULL, GL_TEXTURE_2D), nh_opengl_glenum(NULL, GL_TEXTURE_MAG_FILTER),
         nh_opengl_glenum(NULL, GL_LINEAR));
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glTexParameteri",
+    nh_opengl_addCommand(CommandBuffer_p, "glTexParameteri",
         nh_opengl_glenum(NULL, GL_TEXTURE_2D), nh_opengl_glenum(NULL, GL_TEXTURE_MIN_FILTER),
         nh_opengl_glenum(NULL, GL_LINEAR));
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glTexImage2D",
-        nh_opengl_glenum(NULL, GL_TEXTURE_2D), nh_opengl_glint(NULL, 0), nh_opengl_glint(NULL, GL_RED),
-        nh_opengl_glsizei(NULL, Font_p->Atlas.width), nh_opengl_glsizei(NULL, Font_p->Atlas.height),
-        nh_opengl_glint(NULL, 0), nh_opengl_glenum(NULL, GL_RED), nh_opengl_glenum(NULL, GL_UNSIGNED_BYTE),
-        nh_opengl_glchar(NULL, NULL, 0, &Font_p->Atlas.data_p));
 
-    nh_opengl_Command *VertexShader_p =
-        nh_opengl_addCommand(&Text_p->CommandBuffer, "glCreateShader",
-        nh_opengl_glint(NULL, GL_VERTEX_SHADER));
+NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
+}
 
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glShaderSource",
-        &VertexShader_p->Result, nh_opengl_gluint(NULL, 1),
-        nh_opengl_glchar(NULL, NULL, 0, &vsSource_p),
-        nh_opengl_null(NULL, NH_GFX_OPENGL_DATA_GLINT));
+static NH_TERMINAL_RESULT nh_terminal_initOpenGLTextVertices(
+    nh_terminal_OpenGLText *OpenGL_p, nh_opengl_CommandBuffer *CommandBuffer_p)
+{
+NH_TERMINAL_BEGIN()
 
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glCompileShader", &VertexShader_p->Result);
+    OpenGL_p->VertexArray_p = nh_opengl_gluint(NULL, 0);
+    nh_opengl_addCommand(CommandBuffer_p, "glGenVertexArrays", nh_opengl_gluint(NULL, 1),
+        OpenGL_p->VertexArray_p);
+    nh_opengl_addCommand(CommandBuffer_p, "glBindVertexArray", OpenGL_p->VertexArray_p);
 
-    nh_opengl_Command *FragmentShader_p =
-        nh_opengl_addCommand(&Text_p->CommandBuffer, "glCreateShader",
-        nh_opengl_glint(NULL, GL_FRAGMENT_SHADER));
+    OpenGL_p->IndicesBuffer_p = nh_opengl_gluint(NULL, 0);
+    nh_opengl_addCommand(CommandBuffer_p, "glGenBuffers", nh_opengl_gluint(NULL, 1), 
+        OpenGL_p->IndicesBuffer_p);
+    nh_opengl_addCommand(CommandBuffer_p, "glBindBuffer",
+        nh_opengl_glenum(NULL, GL_ELEMENT_ARRAY_BUFFER), OpenGL_p->IndicesBuffer_p);
 
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glShaderSource",
-        &FragmentShader_p->Result, nh_opengl_gluint(NULL, 1),
-        nh_opengl_glchar(NULL, NULL, 0, &fsSource_p),
-        nh_opengl_null(NULL, NH_GFX_OPENGL_DATA_GLINT));
+    OpenGL_p->VerticesBuffer_p = nh_opengl_gluint(NULL, 0);
+    nh_opengl_addCommand(CommandBuffer_p, "glGenBuffers", nh_opengl_gluint(NULL, 1), 
+        OpenGL_p->VerticesBuffer_p);
+    nh_opengl_addCommand(CommandBuffer_p, "glBindBuffer",
+        nh_opengl_glenum(NULL, GL_ELEMENT_ARRAY_BUFFER), OpenGL_p->VerticesBuffer_p);
 
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glCompileShader", &FragmentShader_p->Result);
+NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
+}
 
-    nh_opengl_Command *Program_p = nh_opengl_addCommand(&Text_p->CommandBuffer, "glCreateProgram");
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glAttachShader", &Program_p->Result, &VertexShader_p->Result);
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glAttachShader", &Program_p->Result, &FragmentShader_p->Result);
-    nh_opengl_addCommand(&Text_p->CommandBuffer, "glLinkProgram", &Program_p->Result);
+// UPDATE ==========================================================================================
 
-    Text_p->Program_p = Program_p;
+static NH_TERMINAL_RESULT nh_terminal_updateOpenGLTextFont(
+    nh_terminal_GraphicsText *Text_p, nh_opengl_CommandBuffer *CommandBuffer_p)
+{
+NH_TERMINAL_BEGIN()
 
-NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
+    nh_gfx_FontInstance *FontInstance_p = nh_gfx_getFontInstance(
+        Text_p->Fonts.pp[Text_p->font], Text_p->fontSize);
+
+    nh_opengl_addCommand(CommandBuffer_p, "glBindTexture",
+        nh_opengl_glenum(NULL, GL_TEXTURE_2D), Text_p->OpenGL.Texture_p);
+
+    nh_opengl_addCommand(CommandBuffer_p, "glTexImage2D",
+        nh_opengl_glenum(NULL, GL_TEXTURE_2D), nh_opengl_glint(NULL, 0), nh_opengl_glint(NULL, GL_RED),
+        nh_opengl_glsizei(NULL, FontInstance_p->Font_p->Atlas.width),
+        nh_opengl_glsizei(NULL, FontInstance_p->Font_p->Atlas.height),
+        nh_opengl_glint(NULL, 0), nh_opengl_glenum(NULL, GL_RED), nh_opengl_glenum(NULL, GL_UNSIGNED_BYTE),
+        nh_opengl_glchar(NULL, NULL, 0, &FontInstance_p->Font_p->Atlas.data_p));
+
+NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
 }
 
-NH_TERMINAL_RESULT nh_terminal_updateOpenGLText(
-    nh_gfx_FontInstance *FontInstance_p, nh_opengl_CommandBuffer *CommandBuffer_p,
-    nh_Array *Vertices_p, nh_Array *Indices_p)
+static NH_TERMINAL_RESULT nh_terminal_updateOpenGLTextVertices(
+    nh_terminal_OpenGLText *OpenGL_p, nh_opengl_CommandBuffer *CommandBuffer_p, nh_Array *Vertices_p,
+    nh_Array *Indices_p)
 {
 NH_TERMINAL_BEGIN()
 
-    nh_opengl_Data *VertexArray_p = nh_opengl_gluint(NULL, 0);
-    nh_opengl_addCommand(CommandBuffer_p, "glGenVertexArrays", nh_opengl_gluint(NULL, 1), VertexArray_p);
-    nh_opengl_addCommand(CommandBuffer_p, "glBindVertexArray", VertexArray_p);
+    nh_opengl_addCommand(CommandBuffer_p, "glBindVertexArray", OpenGL_p->VertexArray_p);
 
     // Indices.
-    nh_opengl_Data *IndicesBuffer_p = nh_opengl_gluint(NULL, 0);
-
-    nh_opengl_addCommand(CommandBuffer_p, "glGenBuffers", nh_opengl_gluint(NULL, 1), IndicesBuffer_p);
-    nh_opengl_addCommand(CommandBuffer_p, "glBindBuffer", 
-        nh_opengl_glenum(NULL, GL_ELEMENT_ARRAY_BUFFER), IndicesBuffer_p);
-    nh_opengl_addCommand(CommandBuffer_p, "glBufferData", 
-        nh_opengl_glenum(NULL, GL_ELEMENT_ARRAY_BUFFER), 
-        nh_opengl_glsizeiptr(NULL, Indices_p->length*sizeof(uint32_t)), 
-        nh_opengl_glubyte(NULL, Indices_p->p, Indices_p->length*sizeof(uint32_t)), 
+    nh_opengl_addCommand(CommandBuffer_p, "glBindBuffer",
+        nh_opengl_glenum(NULL, GL_ELEMENT_ARRAY_BUFFER), OpenGL_p->IndicesBuffer_p);
+    OpenGL_p->BufferData_p = nh_opengl_addCommand(CommandBuffer_p, "glBufferData",
+        nh_opengl_glenum(NULL, GL_ELEMENT_ARRAY_BUFFER),
+        nh_opengl_glsizeiptr(NULL, Indices_p->length*sizeof(uint32_t)),
+        nh_opengl_glubyte(NULL, Indices_p->p, Indices_p->length*sizeof(uint32_t)),
         nh_opengl_glenum(NULL, GL_STATIC_DRAW));
 
     // Vertices.
-    nh_opengl_Data *VerticesBuffer_p = nh_opengl_gluint(NULL, 0);
-   
-    nh_opengl_addCommand(CommandBuffer_p, "glGenBuffers", nh_opengl_gluint(NULL, 1), VerticesBuffer_p);
-    nh_opengl_addCommand(CommandBuffer_p, "glBindBuffer", nh_opengl_glenum(NULL, GL_ARRAY_BUFFER), VerticesBuffer_p);
+    nh_opengl_addCommand(CommandBuffer_p, "glBindBuffer",
+        nh_opengl_glenum(NULL, GL_ARRAY_BUFFER), OpenGL_p->VerticesBuffer_p);
     nh_opengl_addCommand(CommandBuffer_p, "glBufferData", 
-        nh_opengl_glenum(NULL, GL_ARRAY_BUFFER), nh_opengl_glsizeiptr(NULL, sizeof(GLfloat)*Vertices_p->length),
-        nh_opengl_glubyte(NULL, Vertices_p->p, sizeof(GLfloat)*Vertices_p->length),
+        nh_opengl_glenum(NULL, GL_ARRAY_BUFFER), 
+        nh_opengl_glsizeiptr(NULL, Vertices_p->length*sizeof(GLfloat)),
+        nh_opengl_glubyte(NULL, Vertices_p->p, Vertices_p->length*sizeof(GLfloat)),
         nh_opengl_glenum(NULL, GL_STATIC_DRAW));
 
     nh_opengl_addCommand(CommandBuffer_p, "glEnableVertexAttribArray", nh_opengl_gluint(NULL, 0));
-    nh_opengl_addCommand(CommandBuffer_p, "glVertexAttribPointer", 
+    nh_opengl_addCommand(CommandBuffer_p, "glVertexAttribPointer",
         nh_opengl_gluint(NULL, 0), nh_opengl_gluint(NULL, 3), nh_opengl_glenum(NULL, GL_FLOAT),
-        nh_opengl_glboolean(NULL, GL_FALSE), nh_opengl_glsizei(NULL, sizeof(float)*5), nh_opengl_null(NULL, 0));
+        nh_opengl_glboolean(NULL, GL_FALSE), nh_opengl_glsizei(NULL, sizeof(float)*5), 
+        nh_opengl_pointer(NULL, NULL));
 
     nh_opengl_addCommand(CommandBuffer_p, "glEnableVertexAttribArray", nh_opengl_gluint(NULL, 1));
-    nh_opengl_addCommand(CommandBuffer_p, "glVertexAttribPointer", 
-        nh_opengl_gluint(NULL, 1), nh_opengl_gluint(NULL, 2), nh_opengl_glenum(NULL, GL_FLOAT), 
-        nh_opengl_glboolean(NULL, GL_FALSE), nh_opengl_glsizei(NULL, sizeof(float)*5), 
+    nh_opengl_addCommand(CommandBuffer_p, "glVertexAttribPointer",
+        nh_opengl_gluint(NULL, 1), nh_opengl_gluint(NULL, 2), nh_opengl_glenum(NULL, GL_FLOAT),
+        nh_opengl_glboolean(NULL, GL_FALSE), nh_opengl_glsizei(NULL, sizeof(float)*5),
         nh_opengl_glsizei(NULL, sizeof(float)*3));
-     
+
+NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
+}
+
+NH_TERMINAL_RESULT nh_terminal_updateOpenGLText(
+    nh_terminal_Graphics *Graphics_p)
+{
+NH_TERMINAL_BEGIN()
+
+    if (Graphics_p->Text.Action.init) {
+        nh_terminal_initOpenGLFontTexture(&Graphics_p->Text.OpenGL, 
+            Graphics_p->Viewport_p->OpenGL.CommandBuffer_p);
+        nh_terminal_initOpenGLTextProgram(&Graphics_p->Text.OpenGL, 
+            Graphics_p->Viewport_p->OpenGL.CommandBuffer_p);
+        nh_terminal_initOpenGLTextVertices(&Graphics_p->Text.OpenGL, 
+            Graphics_p->Viewport_p->OpenGL.CommandBuffer_p);
+        Graphics_p->Text.Action.init = NH_FALSE;
+    }
+
+    if (Graphics_p->Text.Action.updateFont) {
+        nh_terminal_updateOpenGLTextFont(&Graphics_p->Text, 
+            Graphics_p->Viewport_p->OpenGL.CommandBuffer_p);
+        Graphics_p->Text.Action.updateFont = NH_FALSE;
+    }
+
+    if (Graphics_p->Text.Action.updateVertices) {
+        nh_terminal_updateOpenGLTextVertices(&Graphics_p->Text.OpenGL,
+            Graphics_p->Viewport_p->OpenGL.CommandBuffer_p, &Graphics_p->Text.Vertices,
+            &Graphics_p->Text.Indices);
+        Graphics_p->Text.Action.updateVertices = NH_FALSE;
+    }
+
+NH_TERMINAL_DIAGNOSTIC_END(NH_SUCCESS)
+}
+
+NH_TERMINAL_RESULT nh_terminal_initOpenGLText(
+    nh_terminal_OpenGLText *Text_p)
+{
+NH_TERMINAL_BEGIN()
+
+    Text_p->VertexShader_p = NULL;
+    Text_p->FragmentShader_p = NULL;
+    Text_p->Program_p = NULL;
+    Text_p->Texture_p = NULL;
+    Text_p->VertexArray_p = NULL;
+    Text_p->IndicesBuffer_p = NULL;
+    Text_p->VerticesBuffer_p = NULL;
+    Text_p->BufferData_p = NULL;
+ 
 NH_TERMINAL_DIAGNOSTIC_END(NH_SUCCESS)
 }
 
diff --git a/src/lib/nhterminal/OpenGL/Text.h b/src/lib/nhterminal/OpenGL/Text.h
index c84213f..4c5772b 100644
--- a/src/lib/nhterminal/OpenGL/Text.h
+++ b/src/lib/nhterminal/OpenGL/Text.h
@@ -18,6 +18,8 @@
 
 #include <stdint.h>
 
+typedef struct nh_terminal_Graphics nh_terminal_Graphics;
+
 #endif
 
 /** @addtogroup lib_nhterminal_structs
@@ -25,9 +27,14 @@
  */
 
     typedef struct nh_terminal_OpenGLText {
-        nh_opengl_CommandBuffer CommandBuffer;
-        nh_opengl_Command *Program_p;
-        int id;
+        nh_opengl_Data *VertexShader_p;
+        nh_opengl_Data *FragmentShader_p;
+        nh_opengl_Data *Program_p;
+        nh_opengl_Data *Texture_p;
+        nh_opengl_Data *VertexArray_p;
+        nh_opengl_Data *IndicesBuffer_p;
+        nh_opengl_Data *VerticesBuffer_p;
+        nh_opengl_Command *BufferData_p;
     } nh_terminal_OpenGLText;
 
 /** @} */
@@ -36,12 +43,12 @@
  *  @{
  */
 
-    NH_TERMINAL_RESULT nh_terminal_initOpenGLText(
-        nh_terminal_OpenGLText *Text_p, nh_gfx_Font *Font_p
+    NH_TERMINAL_RESULT nh_terminal_updateOpenGLText(
+        nh_terminal_Graphics *Graphics_p
     );
 
-    NH_TERMINAL_RESULT nh_terminal_updateOpenGLText(
-        nh_gfx_FontInstance *FontInstance_p, nh_opengl_CommandBuffer *CommandBuffer_p, nh_Array *Vertices_p, nh_Array *Indices_p
+    NH_TERMINAL_RESULT nh_terminal_initOpenGLText(
+        nh_terminal_OpenGLText *Text_p
     );
 
 /** @} */
diff --git a/src/lib/nhterminal/Terminal/.Terminal.c.swp b/src/lib/nhterminal/Terminal/.Terminal.c.swp
deleted file mode 100644
index 225ec0751bf4a79f0b04b7c0af1888b0cfbd41cd..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 20480
zcmeI2UyK_^9ml6l3Z#&>Bs}$Lav_O*z1Vjb(MGvmsypA_#p&5TY+sHlq3)i&K5t_0
zTI+Rl*CarZfF~XhO-pGCJn+B+G=&FRL;*n>i6WqgM-XZdNT5^*q4Mvc6u!TiU3=GF
zpHEZ=63ps8x9i!N-^_exc6NWi-PQ3^=?p)bm}J=QV(cS3KfU^ugJ;=ox8A}k`dOQj
zhi!G;D%*`=xnP?NCN0B#tfsf!WXmZh>*i|Gs=0>KFfF~FEcPBG%EQg797+MDz%T{c
zZuRid-R#KZ#5iT$KeCVS-LpKblsc~zPzopolmbctrGQdEDWDWk3j7Z#;5K)#kD@=f
zdVPAt+uzc&-|79{<L&jH^E<rXX>afJocDgJol-z4pcGIFC<T-PN&%&SQa~x76i^B%
z1(X8+1qJj9W50#-|1om#@&5l2uMN-K$=K(?lb{Vwf+HXa65y3P82cgk2KWMa7OaDZ
z!4x<K_JEta8T&qX3Oor+Fa?f*z2NunVeDma4O|6Rz%$@p@BwfK_|v-?`y==z_yu?o
zyZ}A{=D`856YKytZfEQ@@J(QY<6s)Rv5T><gXh6TZ~?@@Ki<XIo8Sg`4ZH-t4ZaAT
z1y{g*;9l_NI~ltUu7RuIIq-3C63l@V_}x1g`xJN_7@z`9f<xdS*a5zG8)FZE{ov2g
z{a4^sa2-4jXe?evK;;^^1hOCl-oQ9L53YhXm;%SZ-Qay-FZc}tH@^lqz~2G8#Ih$!
zMJ=C6XJ-~mbLp9dY_3pDr%GCOE*3mhSWcz1LLtr=$975lrz5LYTC1*?s*Yh4jdeG6
zkp9P~WH!p+f3#6*9zK4`G|toBvCp^obm-KAV^$KBKE<dMZBZr5c0IBrr4OjIV>znE
zg87({s2S#3&E-ixF&<sJFfpiVVdA`5aci*P$+2d*q{9lOZZ3&1T{P=PuqD%*x1^I@
z);j%f)*7xcsP=-RH*03Om7oD@+Kx+uRxn)GwANaQK)HUonvQ9?)!4{^3O`UeV~vc3
zhOuL~YFqArQ}a00O0+OAm_}kE;GbFLv8ry?+l~?E7lISBccN<fd@f&_otY~YiZewm
z-kqx5BeEL)MJcO}p`YtkNlCOt3PbJ3d@{q?sg?V>&19my_s>g4A#aY9QJpI;nt8`=
zP_N}o8RG}bV|-$OI#e+Yz<|?Iyk_&X`Qd<iRome)j0-nW{rD7i_eXb27ANhe_&xWS
zkh;?cXudH2p;BHeEH4&$w>J}k%MN+8Y$`XG&MuUei}Ob&c^MTRG7fcR@;Xmf2b!?%
z21<{bmAX-Cq6F;B&ny-+SxmO!;>7_&F>H?VeGw~7U=GK*=p&6?<WLW`FE77==EdpW
z^)fhhx3b*Q>=DyyNZV+rLTmY~wvf)o;!LUs*<J7Jxsq>*kNQWY<``){o69Y7ZxrIJ
z<?60kru5GJ!5jRbv39c}X0iN4k7SMEF(AqF%UM3Xom=m{i`Ic|e{i4LZ(8MgyJCcT
zFsIGWVE&d;C$!Xqa%=)BVCwlMym=Yyy(m-4Xqi}cd2um#0mj7)3d-V}32F@M$fDQl
zb{Uez=qj_Tv8YmU{|1Vare(T$th=-AYSnNux^vEOXrYjTC(>54?aEZYP+yz9_6BPr
zt90uLSfZbC*^{kXkoSp@6`2G}LX<vJ5dw<aOsOgB?(|GPEJ)E@ccUcNOG=Hc*v`4S
ztyk!_q&sUZZ~lrk!&~+`W{Sm!#G2Ay#v9_GEPkopX%H;j)ZLn}C=cWs70h7i4Y`cT
z1DT<FHO)R$)c9z}%E;y)xQ;{@@6<8UX|mR6*LBx+P$GKnr<M!FT*jaJ!GY;pEBx;8
zQU8dB$LqtRwprn$LD^_F`R$OGe>$5kZtL|Q=;Qq@w_@6f+VO6;k%Z@vHA?FyjwBLE
z{8=?TuqMTw4qp_nyNTM!rg<o5Mz{1e!x@})R&N<e|4u>KB1{_i4!VL?B{lD$l@vG0
zXsgk=j}EY1wjCq6?3(ptcddxFD{>Y#TCUMZE;)ADXtjoC%oq*Z*%+R$Si?h2CEUi~
zL<=v!kt_84Vs0fYUdnDXY%7`3%Z}ahcHt^UmUO4pJ3Rh`6j^acN@r7x%X8ZH%}OkI
zqe;M*+N*W5RWmBQZB-11XVOJVPT9>3M|c{sRGd$aPmc3q&EWnQ?|i21)@-LmSvzTm
z`HHd1XUQ>wA<bGdErTUTN5wsMF`d$~1&wEO@YuGaV~qU&yWo>9!FMJ9KkfPdKZ1|{
zS@0Qf30wqcz-f>NH{sj=9FYHi0_+1nhClx$@JVntxDMa_1@JX+89V_hU=`@#KJb1p
z0?5zb4PJ*2e-r!^`~*A=&H@wM3BCni{zY&ZJOLgCXTWLj*IkVL1zZQufv<wkfv3P}
z@Lq5`*aiLofBtoF6MPq302{yn74R1Hcm<HJ{{yfA)<FS$5RhIupf;s|Qa~x76i^BX
z1;X*x-q=+*$QpdYuIUznBmM(s3P0D3uGd9=kRMtb<9;qYvU@I0H`Wz=80)RQH*zNY
zH;O%=Ar#{+*LAbu8;|)1p6^Amp;KvXWhs|0mU1guEib|bAupLCF=zl~^?UkuqZVG%
z{KoK6|A_pRU}qyj7cIl}bH|286A*^so@+^m!LbQ?KVzXYPTTUILLme>q9V>x%r9%K
z*NUGpB4SW>%|{V2@Le%9HrTU1=Z&0YR0cy-W1I!s+N~v+YB!BeLtz~c%ef^jn_SSg
z&xeZ=oZ^4{0h%I(^a8z)NY5>5{8%6%_h3BWSp`)Hdlo|7;As)Np%)sSWii*ogB6Zs
z1!74E$WqG&$40hpRm8{qF`(JtTi)t)kkJkq6X@$-iQ-cIos?xD98EbC5@9}}wYVH<
zHoo1EfeZ<F6>&dM(2;x4MbUTJZ6zWqx^ao0ui>Q$j}?TYFP1v$9&O##uKyRM^ywCg
z!8r!`Z2oE*y~cV|fsFav=0@e*@{P{vt{!a|6QVmiXie{g<otSQJ(kvj!Ff813)+tv
zh}Ur<wh%ig1qv)(ly~#iHp!co<-(VNOhY5R7RZPl8KezH#nh4~`@;A#Q@EX?jnXRj
zb|OgH=}5&u%)~&pqn(jHd>q$}%uM&ax?!!kHLR<c`#rrJ^g@AJLOS|Jf=c>nGVX{F
zvSTz1Ym*2pwSjIUw9mC&L}PmfF&v?#x+^x__UH&>=5>2CP%(7{S7dOI`WN~CKr}xl
z{QtM$cdx=<C;#97zW>Yc@#ldC{t4gyXW&)P29sa{{0(Kk16~4G0KMP83=B{P!lrsG
zR0=2slmbctrGQdEDWDWk3Md7X0{=e>gd@UR4}b{&(eokI7q~`3evGHSz^%)d0r;9)
UeB<bUA{-7Y4gI`V6q{oI0^I;-Gynhq

diff --git a/src/lib/nhterminal/Terminal/Graphics.c b/src/lib/nhterminal/Terminal/Graphics.c
index 4ce0c1d..40c44cb 100644
--- a/src/lib/nhterminal/Terminal/Graphics.c
+++ b/src/lib/nhterminal/Terminal/Graphics.c
@@ -12,6 +12,7 @@
 
 #include "../Vulkan/Render.h"
 #include "../OpenGL/Render.h"
+#include "../OpenGL/Text.h"
 
 #include "../Common/Log.h"
 #include "../Common/Macros/Macros.h"
@@ -53,20 +54,30 @@ NH_TERMINAL_RESULT nh_terminal_initGraphics(
 {
 NH_TERMINAL_BEGIN()
 
-    NH_TERMINAL_CHECK(nh_terminal_getMonospaceFonts(&Graphics_p->Fonts))
-
     Graphics_p->Viewport_p = NULL;
-    Graphics_p->font = 0;
-    Graphics_p->fontSize = 10;
-    Graphics_p->TextVertices = nh_initArray(sizeof(float), 1024);  
-    Graphics_p->TextIndices  = nh_initArray(sizeof(uint32_t), 1024);
 
-    Graphics_p->Background.r = 1.0f;
-    Graphics_p->Background.g = 1.0f;
-    Graphics_p->Background.b = 1.0f;
-    Graphics_p->Background.a = 1.0f;
+    NH_TERMINAL_CHECK(nh_terminal_getMonospaceFonts(&Graphics_p->Text.Fonts))
+
+    Graphics_p->Text.font = 0;
+    Graphics_p->Text.fontSize = 20;
+    Graphics_p->Text.Vertices = nh_initArray(sizeof(float), 1024);
+    Graphics_p->Text.Indices  = nh_initArray(sizeof(uint32_t), 1024);
+
+    Graphics_p->Text.Action.init = NH_TRUE;
+    Graphics_p->Text.Action.updateFont = NH_TRUE;
+    Graphics_p->Text.Action.updateVertices = NH_FALSE;
 
-    Graphics_p->OpenGL.init = NH_TRUE;
+    Graphics_p->Text.Color.r = 0.8f;
+    Graphics_p->Text.Color.g = 0.8f;
+    Graphics_p->Text.Color.b = 0.8f;
+    Graphics_p->Text.Color.a = 1.0f;
+
+    nh_terminal_initOpenGLText(&Graphics_p->Text.OpenGL);
+
+    Graphics_p->Background.Color.r = 0.2f;
+    Graphics_p->Background.Color.g = 0.2f;
+    Graphics_p->Background.Color.b = 0.2f;
+    Graphics_p->Background.Color.a = 1.0f;
 
 NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
 }
@@ -85,6 +96,7 @@ NH_TERMINAL_BEGIN()
 
     for (int i = 0; i < Grid_p->Rows.size; ++i) {
         nh_List *Row_p = Grid_p->Rows.pp[i];
+
         for (int j = 0; j < Row_p->size; ++j) {
             nh_terminal_Tile *Tile_p = Row_p->pp[j];
             if (!Tile_p || !Tile_p->codepoint || Tile_p->codepoint == ' ') {continue;}
@@ -106,10 +118,11 @@ NH_TERMINAL_RESULT nh_terminal_updateGraphicsData(
 {
 NH_TERMINAL_BEGIN()
 
-    nh_freeArray(&Graphics_p->TextVertices);
-    nh_freeArray(&Graphics_p->TextIndices);
+    nh_freeArray(&Graphics_p->Text.Vertices);
+    nh_freeArray(&Graphics_p->Text.Indices);
 
-    NH_TERMINAL_CHECK(nh_terminal_getTextData(Grid_p, &Graphics_p->TextVertices, &Graphics_p->TextIndices))
+    NH_TERMINAL_CHECK(nh_terminal_getTextData(Grid_p, &Graphics_p->Text.Vertices, 
+        &Graphics_p->Text.Indices))
 
 NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
 }
@@ -121,22 +134,23 @@ NH_TERMINAL_RESULT nh_terminal_handleViewportChange(
 {
 NH_TERMINAL_BEGIN()
 
+    // Check if it's the initial call.
     if (!Graphics_p->Viewport_p) 
     {
         switch (Viewport_p->Surface_p->api)
         {
             case NH_GFX_API_VULKAN :
-                nh_terminal_initVulkanText(Viewport_p->Surface_p->Vulkan.GPU_p, &Graphics_p->Vulkan.Text);
+                nh_terminal_initVulkanText(Viewport_p->Surface_p->Vulkan.GPU_p, 
+                    &Graphics_p->Text.Vulkan);
                 break;
             case NH_GFX_API_OPENGL :
-                nh_terminal_initOpenGLText(&Graphics_p->OpenGL.Text, Graphics_p->Fonts.pp[Graphics_p->font]);
                 break;
             default :
                 NH_TERMINAL_END(NH_TERMINAL_ERROR_BAD_STATE)
         }
     }
 
-    Viewport_p->Settings.ClearColor = Graphics_p->Background;
+    Viewport_p->Settings.ClearColor = Graphics_p->Background.Color;
     Graphics_p->Viewport_p = Viewport_p;
 
 NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
@@ -145,7 +159,7 @@ NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
 // RENDER ==========================================================================================
 
 NH_TERMINAL_RESULT nh_terminal_renderGraphics(
-    nh_terminal_Graphics *Graphics_p)
+    nh_terminal_Graphics *Graphics_p, nh_terminal_Grid *Grid_p)
 {
 NH_TERMINAL_BEGIN()
 
@@ -155,7 +169,7 @@ NH_TERMINAL_BEGIN()
             NH_TERMINAL_CHECK(nh_terminal_renderUsingVulkan(Graphics_p))
             break;
        case NH_GFX_API_OPENGL :
-            NH_TERMINAL_CHECK(nh_terminal_renderUsingOpenGL(Graphics_p))
+            NH_TERMINAL_CHECK(nh_terminal_renderUsingOpenGL(Graphics_p, Grid_p))
             break;
         default :
             NH_TERMINAL_END(NH_TERMINAL_ERROR_BAD_STATE)
@@ -167,14 +181,14 @@ NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
 // TILE ============================================================================================
 
 NH_TERMINAL_RESULT nh_terminal_getTileCodepointVertices(
-    nh_terminal_Grid *Grid_p, nh_terminal_Graphics *Graphics_p, NH_ENCODING_UTF32 codepoint, int col, int row, 
-    float vertices_p[20])
+    nh_terminal_Graphics *Graphics_p, nh_terminal_Grid *Grid_p, NH_ENCODING_UTF32 codepoint, int col, 
+    int row, float vertices_p[20])
 {
 NH_TERMINAL_BEGIN()
 
     nh_Vertex Vertices_p[4];
     nh_gfx_FontInstance *FontInstance_p = nh_gfx_getFontInstance(
-        Graphics_p->Fonts.pp[Graphics_p->font], Graphics_p->fontSize
+        Graphics_p->Text.Fonts.pp[Graphics_p->Text.font], Graphics_p->Text.fontSize
     );
 
     if (nh_gfx_loadGlyphs(FontInstance_p, &codepoint, 1)) {
@@ -188,7 +202,8 @@ NH_TERMINAL_BEGIN()
     nh_gfx_Glyph Glyph = nh_gfx_getGlyph(FontInstance_p, Infos_p[0].id);
     float depth = 0.5f;
 
-    NH_PIXEL tmp = (row * Grid_p->TileSize.height) + (NH_PIXEL)FontInstance_p->descender + FontInstance_p->fontSize;
+    NH_PIXEL tmp = (row * Grid_p->TileSize.height) + (NH_PIXEL)FontInstance_p->descender 
+        + FontInstance_p->fontSize;
     float yOffset = Infos_p[0].yOffset/(float)(64);
     tmp -= yOffset + Glyph.yOffset;
 
@@ -237,3 +252,87 @@ NH_TERMINAL_BEGIN()
 NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
 }
 
+int nh_terminal_getCurrentColorRange(
+    nh_terminal_Graphics *Graphics_p, nh_terminal_Grid *Grid_p, nh_Color *Current_p, int *x_p,
+    int *y_p, NH_BOOL foreground)
+{
+NH_TERMINAL_BEGIN()
+
+    NH_BOOL custom = NH_FALSE;
+
+    if (foreground) {
+        custom = Current_p->r != Graphics_p->Text.Color.r ||
+                 Current_p->g != Graphics_p->Text.Color.g ||
+                 Current_p->b != Graphics_p->Text.Color.b;
+    }
+    else {
+        custom = Current_p->r != Graphics_p->Background.Color.r ||
+                 Current_p->g != Graphics_p->Background.Color.g ||
+                 Current_p->b != Graphics_p->Background.Color.b;
+    }
+
+    int total = 0;
+
+    for (int y = *y_p; y < Grid_p->rows; ++y) {
+        for (int x = *x_p; x < Grid_p->cols; ++x) {
+            nh_terminal_Tile *Tile_p = ((nh_terminal_Tile*)((nh_List*)Grid_p->Rows.pp[y])->pp[x]);
+            if (!Tile_p->codepoint || Tile_p->codepoint == ' '){
+                continue;
+            }
+            if (foreground) {
+                if (!Tile_p->Foreground.custom && !custom) {
+                    ++total;
+                    continue;
+                }
+                if (!Tile_p->Foreground.custom && custom || Tile_p->Foreground.custom && !custom) {
+                    *x_p = x;
+                    *y_p = y;
+                    *Current_p = Tile_p->Foreground.custom ? Tile_p->Foreground.Color : Graphics_p->Text.Color;
+                    NH_TERMINAL_END(total)
+                }
+                if (Tile_p->Foreground.custom && custom) {
+                    if (Tile_p->Foreground.Color.r != Current_p->r || Tile_p->Foreground.Color.g != Current_p->g || 
+                        Tile_p->Foreground.Color.b != Current_p->b || Tile_p->Foreground.Color.a != Current_p->a) {
+                        *x_p = x;
+                        *y_p = y;
+                        *Current_p = Tile_p->Foreground.Color;
+                        NH_TERMINAL_END(total)
+                    }
+                    ++total;
+                    continue;
+                }
+            }
+            else {
+                if (!Tile_p->Background.custom && !custom) {
+                    ++total;
+                    continue;
+                }
+                if (!Tile_p->Background.custom && custom || Tile_p->Background.custom && !custom) {
+                    *x_p = x;
+                    *y_p = y;
+                    *Current_p = Tile_p->Background.custom ? Tile_p->Background.Color : Graphics_p->Text.Color;
+                    NH_TERMINAL_END(total)
+                }
+                if (Tile_p->Background.custom && custom) {
+                    if (Tile_p->Background.Color.r != Current_p->r || Tile_p->Background.Color.g != Current_p->g || 
+                        Tile_p->Background.Color.b != Current_p->b || Tile_p->Background.Color.a != Current_p->a) {
+                        *x_p = x;
+                        *y_p = y;
+                        *Current_p = Tile_p->Background.Color;
+                        NH_TERMINAL_END(total)
+                    }
+                    ++total;
+                    continue;
+                }
+            }
+            exit(0);
+        }
+        *x_p = 0;
+    }
+
+    *x_p = Grid_p->cols;
+    *y_p = Grid_p->rows;
+
+NH_TERMINAL_END(total)
+}
+
diff --git a/src/lib/nhterminal/Terminal/Graphics.h b/src/lib/nhterminal/Terminal/Graphics.h
index 2dc33be..0eda17a 100644
--- a/src/lib/nhterminal/Terminal/Graphics.h
+++ b/src/lib/nhterminal/Terminal/Graphics.h
@@ -10,6 +10,7 @@
  */
 
 #include "Grid.h"
+
 #include "../Vulkan/Text.h"
 #include "../OpenGL/Text.h"
 
@@ -19,25 +20,32 @@
  *  @{
  */
 
-    typedef struct nh_terminal_Vulkan {
-        nh_terminal_VulkanText Text;
-    } nh_terminal_Vulkan;
-
-    typedef struct nh_terminal_OpenGL {
+    typedef struct nh_terminal_GraphicsTextAction {
         NH_BOOL init;
-        nh_terminal_OpenGLText Text;
-    } nh_terminal_OpenGL;
-
-    typedef struct nh_terminal_Graphics {
-        nh_gfx_Viewport *Viewport_p;
-        nh_terminal_Vulkan Vulkan;
-        nh_terminal_OpenGL OpenGL;
-        nh_Array TextVertices;
-        nh_Array TextIndices;
+        NH_BOOL updateFont;
+        NH_BOOL updateVertices;
+    } nh_terminal_GraphicsTextAction;
+
+    typedef struct nh_terminal_GraphicsText {
+        nh_terminal_GraphicsTextAction Action;
+        nh_terminal_VulkanText Vulkan;
+        nh_terminal_OpenGLText OpenGL;
+        nh_Array Vertices;
+        nh_Array Indices;
         nh_List Fonts;
-        nh_Color Background;
         int font;
         int fontSize;
+        nh_Color Color;
+    } nh_terminal_GraphicsText;
+
+    typedef struct nh_terminal_GraphicsBackground {
+        nh_Color Color;
+    } nh_terminal_GraphicsBackground;
+
+    typedef struct nh_terminal_Graphics {
+        nh_gfx_Viewport *Viewport_p;
+        nh_terminal_GraphicsText Text;
+        nh_terminal_GraphicsBackground Background;
     } nh_terminal_Graphics;
 
 /** @} */
@@ -59,14 +67,19 @@
     );
 
     NH_TERMINAL_RESULT nh_terminal_renderGraphics(
-        nh_terminal_Graphics *Graphics_p
+        nh_terminal_Graphics *Graphics_p, nh_terminal_Grid *Grid_p
     );
 
     NH_TERMINAL_RESULT nh_terminal_getTileCodepointVertices(
-        nh_terminal_Grid *Grid_p, nh_terminal_Graphics *Graphics_p, NH_ENCODING_UTF32 codepoint, int col, int row, 
+        nh_terminal_Graphics *Graphics_p, nh_terminal_Grid *Grid_p, NH_ENCODING_UTF32 codepoint, int col, int row, 
         float vertices_p[20]
     );
 
+    int nh_terminal_getCurrentColorRange(
+        nh_terminal_Graphics *Graphics_p, nh_terminal_Grid *Grid_p, nh_Color *Current_p, int *x_p,
+        int *y_p, NH_BOOL foreground
+    );
+
 /** @} */
 
 #endif 
diff --git a/src/lib/nhterminal/Terminal/Grid.c b/src/lib/nhterminal/Terminal/Grid.c
index 8ac6567..7b6c96a 100644
--- a/src/lib/nhterminal/Terminal/Grid.c
+++ b/src/lib/nhterminal/Terminal/Grid.c
@@ -75,7 +75,20 @@ static void nh_terminal_initTile(
 {
 NH_TERMINAL_BEGIN()
 
+    Tile_p->Foreground.custom = NH_FALSE;
+    Tile_p->Foreground.Color.r = 0;
+    Tile_p->Foreground.Color.g = 0;
+    Tile_p->Foreground.Color.b = 0;
+    Tile_p->Foreground.Color.a = 0;
+
+    Tile_p->Background.custom = NH_FALSE;
+    Tile_p->Background.Color.r = 0;
+    Tile_p->Background.Color.g = 0;
+    Tile_p->Background.Color.b = 0;
+    Tile_p->Background.Color.a = 0;
+
     Tile_p->codepoint = 0;
+
     memset(Tile_p->vertices_p, 0, sizeof(float) * 20);
 
 NH_TERMINAL_SILENT_END()
@@ -116,7 +129,7 @@ NH_TERMINAL_END(Cols_p->pp[Grid_p->Cursor.x])
 }
 
 NH_TERMINAL_RESULT nh_terminal_insertCodepoint(
-    nh_terminal_Grid *Grid_p, void *Graphics_p, NH_ENCODING_UTF32 codepoint, NH_BOOL *update_p)
+    nh_terminal_Grid *Grid_p, void *Graphics_p, NH_ENCODING_UTF32 codepoint)
 {
 NH_TERMINAL_BEGIN()
 
@@ -125,12 +138,9 @@ NH_TERMINAL_BEGIN()
 
     if (Tile_p->codepoint != codepoint) 
     {
-        *update_p = NH_TRUE;
-
         NH_TERMINAL_CHECK(nh_terminal_getTileCodepointVertices(
-            Grid_p, Graphics_p, codepoint, Grid_p->Cursor.x, Grid_p->Cursor.y, Tile_p->vertices_p
+            Graphics_p, Grid_p, codepoint, Grid_p->Cursor.x, Grid_p->Cursor.y, Tile_p->vertices_p
         ))
-
         Tile_p->codepoint = codepoint;
     }
 
diff --git a/src/lib/nhterminal/Terminal/Grid.h b/src/lib/nhterminal/Terminal/Grid.h
index 284645c..7a3deb5 100644
--- a/src/lib/nhterminal/Terminal/Grid.h
+++ b/src/lib/nhterminal/Terminal/Grid.h
@@ -22,7 +22,14 @@
         int y;
     } nh_terminal_Cursor;
 
+    typedef struct nh_terminal_TileColor {
+        NH_BOOL custom;
+        nh_Color Color;
+    } nh_terminal_TileColor;
+
     typedef struct nh_terminal_Tile {
+        nh_terminal_TileColor Foreground;
+        nh_terminal_TileColor Background;
         NH_ENCODING_UTF32 codepoint;
         float vertices_p[20];
     } nh_terminal_Tile;
@@ -55,7 +62,7 @@
     );
 
     NH_TERMINAL_RESULT nh_terminal_insertCodepoint(
-        nh_terminal_Grid *Grid_p, void *Graphics_p, NH_ENCODING_UTF32 codepoint, NH_BOOL *update_p
+        nh_terminal_Grid *Grid_p, void *Graphics_p, NH_ENCODING_UTF32 codepoint
     );
 
 /** @} */
diff --git a/src/lib/nhterminal/Terminal/Parser.c b/src/lib/nhterminal/Terminal/Parser.c
index 1c13016..6507624 100644
--- a/src/lib/nhterminal/Terminal/Parser.c
+++ b/src/lib/nhterminal/Terminal/Parser.c
@@ -33,7 +33,6 @@ typedef struct nh_terminal_Parser {
     nh_terminal_Terminal *Terminal_p;
     nh_encoding_UTF32String EscapeSequence;
     NH_ENCODING_UTF32 *codepoint_p;
-    NH_BOOL update;
 } nh_terminal_Parser;
 
 // PARSE ===========================================================================================
@@ -134,9 +133,7 @@ NH_TERMINAL_BEGIN()
 
             default :
                 NH_TERMINAL_CHECK(nh_terminal_insertCodepoint(
-                    &Parser_p->Terminal_p->Grid, &Parser_p->Terminal_p->Graphics, *(Parser_p->codepoint_p),
-                    &Parser_p->update
-                ))
+                    &Parser_p->Terminal_p->Grid, &Parser_p->Terminal_p->Graphics, *(Parser_p->codepoint_p)))
                 nh_terminal_advanceParser(Parser_p);
                 break;
         }
@@ -156,13 +153,12 @@ NH_TERMINAL_BEGIN()
     Parser.Terminal_p = Terminal_p;
     Parser.codepoint_p = codepoint_p;
     Parser.EscapeSequence = nh_encoding_initUTF32(16);
-    Parser.update = NH_FALSE;
 
 NH_TERMINAL_END(Parser)
 }
 
 NH_TERMINAL_RESULT nh_terminal_parseString(
-    nh_terminal_Terminal *Terminal_p, nh_encoding_UTF32String *String_p, NH_BOOL *update_p)
+    nh_terminal_Terminal *Terminal_p, nh_encoding_UTF32String *String_p)
 {
 NH_TERMINAL_BEGIN()
 
@@ -171,8 +167,6 @@ NH_TERMINAL_BEGIN()
     nh_terminal_Parser Parser = nh_terminal_initParser(Terminal_p, String_p->p);
     NH_TERMINAL_CHECK(nh_terminal_parseCodepoints(&Parser))
 
-    *update_p = Parser.update;
-
 NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
 }
 
diff --git a/src/lib/nhterminal/Terminal/Parser.h b/src/lib/nhterminal/Terminal/Parser.h
index 4b0259a..789b83f 100644
--- a/src/lib/nhterminal/Terminal/Parser.h
+++ b/src/lib/nhterminal/Terminal/Parser.h
@@ -18,7 +18,7 @@
  */
 
     NH_TERMINAL_RESULT nh_terminal_parseString(
-        nh_terminal_Terminal *Terminal_p, nh_encoding_UTF32String *String_p, NH_BOOL *update_p
+        nh_terminal_Terminal *Terminal_p, nh_encoding_UTF32String *String_p
     );
 
 /** @} */
diff --git a/src/lib/nhterminal/Terminal/Terminal.c b/src/lib/nhterminal/Terminal/Terminal.c
index 5294708..be13a74 100644
--- a/src/lib/nhterminal/Terminal/Terminal.c
+++ b/src/lib/nhterminal/Terminal/Terminal.c
@@ -41,13 +41,14 @@ NH_TERMINAL_BEGIN()
 
     static NH_BYTE *name_p = "Terminal Emulator";
     static NH_BYTE *path_p = "nhterminal/Terminal/Terminal.c";
+
     Workload_p->name_p = name_p;
     Workload_p->path_p = path_p;
 
     nh_terminal_Terminal Terminal;
 
     Terminal.TTY_p = Workload_p->args_p;
-    Terminal.View_p = nh_tty_createView(Workload_p->args_p, NH_FALSE);
+    Terminal.View_p = nh_tty_createView(Terminal.TTY_p, NH_FALSE);
     NH_TERMINAL_CHECK_MEM(NULL, Terminal.View_p)
 
     NH_TERMINAL_CHECK(NULL, nh_terminal_initGraphics(&Terminal.Graphics))
@@ -67,53 +68,66 @@ NH_TERMINAL_END(Terminal_p)
 
 // RUN =============================================================================================
 
-static NH_TERMINAL_RESULT nh_terminal_updateTerminalSize(
-    nh_terminal_Terminal *Terminal_p, NH_BOOL *idle_p)
+static NH_TERMINAL_RESULT nh_terminal_updateSize(
+    nh_terminal_Terminal *Terminal_p)
 {
 NH_TERMINAL_BEGIN()
 
-    if (!Terminal_p->Graphics.Viewport_p) {
-        NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
-    }
+    nh_gfx_Text Text;
+    NH_ENCODING_UTF32 c = 'e';
 
-    if (Terminal_p->Graphics.Viewport_p->Settings.Size.width != Terminal_p->Grid.Size.width
-    ||  Terminal_p->Graphics.Viewport_p->Settings.Size.height != Terminal_p->Grid.Size.height) 
-    {
-        *idle_p = NH_FALSE;
-
-        nh_gfx_Text Text;
-        NH_ENCODING_UTF32 c = 'e';
-
-        NH_GFX_RESULT failure = 1;
-        for (int i = 0; i < Terminal_p->Graphics.Fonts.size; ++i) {
-            failure = nh_gfx_createTextFromFont(&Text, &c, 1, Terminal_p->Graphics.fontSize, Terminal_p->Graphics.Fonts.pp[i]);
-            if (!failure) {
-                Terminal_p->Graphics.font = i;
-                break;
-            }
+    NH_GFX_RESULT failure = 1;
+    for (int i = 0; i < Terminal_p->Graphics.Text.Fonts.size; ++i) {
+        failure = nh_gfx_createTextFromFont(&Text, &c, 1, Terminal_p->Graphics.Text.fontSize,
+            Terminal_p->Graphics.Text.Fonts.pp[i]);
+        if (!failure) {
+            Terminal_p->Graphics.Text.font = i;
+            break;
         }
-        if (failure) {NH_TERMINAL_END(NH_TERMINAL_ERROR_BAD_STATE)}
+    }
+
+    if (failure) {NH_TERMINAL_END(NH_TERMINAL_ERROR_BAD_STATE)}
 
-        Terminal_p->Grid.Size.width = Terminal_p->Graphics.Viewport_p->Settings.Size.width;
-        Terminal_p->Grid.Size.height = Terminal_p->Graphics.Viewport_p->Settings.Size.height;
+    Terminal_p->Grid.Size.width = Terminal_p->Graphics.Viewport_p->Settings.Size.width;
+    Terminal_p->Grid.Size.height = Terminal_p->Graphics.Viewport_p->Settings.Size.height;
 
-        Terminal_p->Grid.TileSize.width = nh_gfx_getTextWidth(&Text);
-        Terminal_p->Grid.TileSize.height = 10;
+    Terminal_p->Grid.TileSize.width = nh_gfx_getTextWidth(&Text);
+    Terminal_p->Grid.TileSize.height = Terminal_p->Graphics.Text.fontSize;
 
-        Terminal_p->Grid.cols = Terminal_p->Grid.Size.width / nh_gfx_getTextWidth(&Text);
-        Terminal_p->Grid.rows = Terminal_p->Grid.Size.height / 10;
+    Terminal_p->Grid.cols = Terminal_p->Grid.Size.width / nh_gfx_getTextWidth(&Text);
+    Terminal_p->Grid.rows = Terminal_p->Grid.Size.height / Terminal_p->Graphics.Text.fontSize;
+
+    Terminal_p->View_p->cols = Terminal_p->Grid.cols;
+    Terminal_p->View_p->rows = Terminal_p->Grid.rows;
+
+    nh_gfx_freeText(&Text);
+
+NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
+}
 
-        Terminal_p->View_p->cols = Terminal_p->Grid.cols;
-        Terminal_p->View_p->rows = Terminal_p->Grid.rows;
 
-        nh_gfx_freeText(&Text);
+static NH_TERMINAL_RESULT nh_terminal_updateSizeIfRequired(
+    nh_terminal_Terminal *Terminal_p, NH_BOOL *update_p)
+{
+NH_TERMINAL_BEGIN()
+
+    if (Terminal_p->Graphics.Viewport_p->Settings.Size.width == Terminal_p->Grid.Size.width
+    &&  Terminal_p->Graphics.Viewport_p->Settings.Size.height == Terminal_p->Grid.Size.height) {
+        NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
     }
 
+    NH_TERMINAL_CHECK(nh_terminal_updateSize(Terminal_p))
+
+    Terminal_p->Graphics.Text.Action.updateVertices = NH_TRUE;
+    Terminal_p->Graphics.Text.Action.updateFont = NH_TRUE;
+
+    *update_p = NH_TRUE;
+
 NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
 }
 
-static NH_TERMINAL_RESULT nh_terminal_updateTerminal(
-    nh_terminal_Terminal *Terminal_p, NH_BOOL *idle_p)
+static NH_TERMINAL_RESULT nh_terminal_handleInputIfRequired(
+    nh_terminal_Terminal *Terminal_p, NH_BOOL *update_p)
 {
 NH_TERMINAL_BEGIN()
 
@@ -121,17 +135,17 @@ NH_TERMINAL_BEGIN()
 
     do {
         String_p = nh_incrementRingBufferMarker(&Terminal_p->View_p->Output, &Terminal_p->InputMarker);
-        if (String_p) {
-            *idle_p = NH_FALSE;
-            nh_encoding_UTF32String String = nh_encoding_decodeUTF8(String_p->p, String_p->length, NULL);
-            NH_BOOL update = NH_FALSE;
-            NH_TERMINAL_CHECK(nh_terminal_parseString(Terminal_p, &String, &update))
-            nh_encoding_freeUTF32(&String);
-            if (update) {
-                NH_TERMINAL_CHECK(nh_terminal_updateGraphicsData(&Terminal_p->Graphics, &Terminal_p->Grid))
-                NH_TERMINAL_CHECK(nh_terminal_renderGraphics(&Terminal_p->Graphics))
-            }
-        }
+        if (!String_p) {break;}
+
+        nh_encoding_UTF32String String = nh_encoding_decodeUTF8(String_p->p, String_p->length, NULL);
+        NH_TERMINAL_CHECK(nh_terminal_parseString(Terminal_p, &String))
+        nh_encoding_freeUTF32(&String);
+
+        Terminal_p->Graphics.Text.Action.updateVertices = NH_TRUE;
+        Terminal_p->Graphics.Text.Action.updateFont = NH_TRUE;
+
+        *update_p = NH_TRUE;
+
     } while (String_p);
 
 NH_TERMINAL_DIAGNOSTIC_END(NH_TERMINAL_SUCCESS)
@@ -144,20 +158,31 @@ NH_TERMINAL_BEGIN()
 
 #include NH_TERMINAL_CUSTOM_CHECK
 
-    NH_BOOL idle = NH_TRUE;
-
     NH_TERMINAL_CHECK_NULL(NH_SIGNAL_ERROR, args_p)
     nh_terminal_Terminal *Terminal_p = args_p;
 
-    NH_TERMINAL_CHECK(NH_SIGNAL_ERROR, nh_terminal_updateTerminalSize(Terminal_p, &idle))
-    NH_TERMINAL_CHECK(NH_SIGNAL_ERROR, nh_terminal_updateTerminal(Terminal_p, &idle))
+    if (!Terminal_p->Graphics.Viewport_p) {NH_TERMINAL_END(NH_SIGNAL_IDLE)}
+
+    NH_BOOL update = NH_FALSE;
+
+    NH_TERMINAL_CHECK(NH_SIGNAL_ERROR, nh_terminal_updateSizeIfRequired(Terminal_p, &update))
+    NH_TERMINAL_CHECK(NH_SIGNAL_ERROR, nh_terminal_handleInputIfRequired(Terminal_p, &update))
+
+    if (update) {
+        NH_TERMINAL_CHECK(NH_SIGNAL_ERROR, nh_terminal_updateGraphicsData(&Terminal_p->Graphics,
+            &Terminal_p->Grid))
+        NH_TERMINAL_CHECK(NH_SIGNAL_ERROR, nh_terminal_renderGraphics(&Terminal_p->Graphics, 
+            &Terminal_p->Grid))
+
+        NH_TERMINAL_END(NH_SIGNAL_OK)
+    }
 
 #include NH_TERMINAL_DEFAULT_CHECK
 
-NH_TERMINAL_END(idle ? NH_SIGNAL_IDLE : NH_SIGNAL_OK)
+NH_TERMINAL_END(update == NH_TRUE ? NH_SIGNAL_OK : NH_SIGNAL_IDLE)
 }
 
-// OPEN/GET ========================================================================================
+// API =============================================================================================
 
 nh_terminal_Terminal *nh_terminal_openTerminal(
     nh_tty_TTY *TTY_p)
@@ -165,8 +190,7 @@ nh_terminal_Terminal *nh_terminal_openTerminal(
 NH_TERMINAL_BEGIN()
 
     nh_terminal_Terminal *Terminal_p = nh_activateWorkload(
-        nh_terminal_initTerminal, nh_terminal_runTerminal, TTY_p, NH_TRUE
-    );
+        nh_terminal_initTerminal, nh_terminal_runTerminal, TTY_p, NH_TRUE);
 
 NH_TERMINAL_END(Terminal_p)
 }
@@ -176,7 +200,7 @@ NH_TERMINAL_RESULT nh_terminal_setViewport(
 {
 NH_TERMINAL_BEGIN()
 
-    if (nh_gfx_claimViewport(Viewport_p, NH_GFX_VIEWPORT_OWNER_TERM, Terminal_p) != NH_GFX_SUCCESS) {
+    if (nh_gfx_claimViewport(Viewport_p, NH_GFX_VIEWPORT_OWNER_TERMINAL, Terminal_p) != NH_GFX_SUCCESS) {
         NH_TERMINAL_END(NH_TERMINAL_ERROR_BAD_STATE)
     }
 
@@ -185,3 +209,20 @@ NH_TERMINAL_BEGIN()
 NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
 }
 
+NH_TERMINAL_RESULT nh_terminal_setColor(
+    nh_terminal_Terminal *Terminal_p, nh_Color Color, NH_BOOL foreground)
+{
+NH_TERMINAL_BEGIN()
+
+    if (foreground) {
+        Terminal_p->Graphics.Text.Color = Color;
+    } else {
+        Terminal_p->Graphics.Background.Color = Color;
+    }
+
+    Terminal_p->Graphics.Text.Action.updateVertices = NH_TRUE;
+    Terminal_p->Graphics.Text.Action.updateFont = NH_TRUE;
+
+NH_TERMINAL_END(NH_TERMINAL_SUCCESS)
+}
+
diff --git a/src/lib/nhterminal/Terminal/Terminal.h b/src/lib/nhterminal/Terminal/Terminal.h
index b716787..7277a33 100644
--- a/src/lib/nhterminal/Terminal/Terminal.h
+++ b/src/lib/nhterminal/Terminal/Terminal.h
@@ -44,19 +44,9 @@
         nh_terminal_Terminal *Terminal_p, nh_gfx_Viewport *Viewport_p
     ); 
 
-/** @} */
-
-/** @addtogroup lib_nhterminal_functions
- *  @{
- */
-
-    nh_terminal_Terminal *nh_terminal_openTerminal(
-        nh_tty_TTY *TTY_p
-    );
-
-    NH_TERMINAL_RESULT nh_terminal_setViewport(
-        nh_terminal_Terminal *Terminal_p, nh_gfx_Viewport *Viewport_p
-    );
+    typedef NH_TERMINAL_RESULT (*nh_terminal_setColor_f)(
+        nh_terminal_Terminal *Terminal_p, nh_Color Color, NH_BOOL foreground
+    ); 
 
 /** @} */
 
diff --git a/src/lib/nhterminal/Vulkan/Render.c b/src/lib/nhterminal/Vulkan/Render.c
index cf3d0c5..3f4a683 100644
--- a/src/lib/nhterminal/Vulkan/Render.c
+++ b/src/lib/nhterminal/Vulkan/Render.c
@@ -40,8 +40,8 @@ NH_TERMINAL_BEGIN()
     );
     
     GPU_p->Driver.Functions.vkCmdBindDescriptorSets(
-        *CommandBuffer_p, VK_PIPELINE_BIND_POINT_GRAPHICS, 
-        GPU_p->Term.Pipelines_p[NH_TERMINAL_VULKAN_PIPELINE_SDF].PipelineLayout, 
+        *CommandBuffer_p, VK_PIPELINE_BIND_POINT_GRAPHICS,
+        GPU_p->Term.Pipelines_p[NH_TERMINAL_VULKAN_PIPELINE_SDF].PipelineLayout,
         0, 1, &Text_p->DescriptorSet.DescriptorSet, 0, VK_NULL_HANDLE
     );
 
@@ -64,20 +64,20 @@ NH_TERMINAL_RESULT nh_terminal_renderUsingVulkan(
 NH_TERMINAL_BEGIN()
 
     nh_gfx_FontInstance *FontInstance_p = nh_gfx_getFontInstance(
-        Graphics_p->Fonts.pp[Graphics_p->font], Graphics_p->fontSize
+        Graphics_p->Text.Fonts.pp[Graphics_p->Text.font], Graphics_p->Text.fontSize
     );
 
     NH_TERMINAL_CHECK(nh_terminal_updateVulkanText(
-        Graphics_p->Viewport_p->Surface_p->Vulkan.GPU_p, FontInstance_p, &Graphics_p->Vulkan.Text, 
-        &Graphics_p->TextVertices, &Graphics_p->TextIndices
+        Graphics_p->Viewport_p->Surface_p->Vulkan.GPU_p, FontInstance_p, &Graphics_p->Text.Vulkan, 
+        &Graphics_p->Text.Vertices, &Graphics_p->Text.Indices
     ))
 
     nh_gfx_beginRecording(Graphics_p->Viewport_p);
 
     for (int i = 0; i < Graphics_p->Viewport_p->Vulkan.images; ++i) {
         nh_terminal_recordText(
-            &Graphics_p->Vulkan.Text, Graphics_p->Viewport_p->Surface_p->Vulkan.GPU_p, 
-            Graphics_p->Viewport_p->Vulkan.CommandBuffers_pp[i], Graphics_p->TextIndices.length 
+            &Graphics_p->Text.Vulkan, Graphics_p->Viewport_p->Surface_p->Vulkan.GPU_p,
+            Graphics_p->Viewport_p->Vulkan.CommandBuffers_pp[i], Graphics_p->Text.Indices.length 
         );
     }
 
diff --git a/src/lib/nhtty/Common/Result.h b/src/lib/nhtty/Common/Result.h
index d393254..d6efd9d 100644
--- a/src/lib/nhtty/Common/Result.h
+++ b/src/lib/nhtty/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhtty_enums 
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -33,10 +31,7 @@
     } NH_TTY_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhtty_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_TTY_RESULTS_PP[];
     extern unsigned int NH_TTY_RESULTS_PP_COUNT;
diff --git a/src/lib/nhtty/Common/Types/Public.h b/src/lib/nhtty/Common/Types/Public.h
index b72f4ed..d1d95ae 100644
--- a/src/lib/nhtty/Common/Types/Public.h
+++ b/src/lib/nhtty/Common/Types/Public.h
@@ -17,25 +17,20 @@
 
 #endif
 
-/** @addtogroup lib_nhtty_structs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_tty_Event {
         NH_ENCODING_UTF32 codepoint;
         NH_WSI_TRIGGER trigger;
         NH_WSI_KEY special;
     } nh_tty_Event;
-
+    
 /** @} */
-
-/** @addtogroup lib_nhtty_typedefs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_tty_TTY nh_tty_TTY;
     typedef struct nh_tty_Program nh_tty_Program;
-
+    
     typedef void *(*nh_tty_init_f)();
     typedef NH_TTY_RESULT (*nh_tty_draw_f)(nh_tty_Program *Program_p, nh_encoding_UTF8String *Row_p, int width, int height, int row);
     typedef NH_TTY_RESULT (*nh_tty_handleInput_f)(nh_tty_Program *Program_p, nh_tty_Event Event);
@@ -44,12 +39,9 @@
     typedef NH_TTY_RESULT (*nh_tty_handleCommand_f)(nh_tty_Program *Program_p, nh_List *Arguments_p);
     typedef void *(*nh_tty_createView_f)();
     typedef void (*nh_tty_destroyView_f)(void *view_p);
-
+    
 /** @} */
-
-/** @addtogroup lib_nhtty_structs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_tty_ProgramCallbacks {
         nh_tty_init_f init_f;
@@ -61,14 +53,14 @@
         nh_tty_createView_f createView_f;
         nh_tty_destroyView_f destroyView_f;
     } nh_tty_ProgramCallbacks;
-
+    
     typedef struct nh_tty_ProgramPrototype {
         nh_encoding_UTF32String Name;
         NH_BYTE **commands_pp;
         int commands;
         nh_tty_ProgramCallbacks Callbacks;
     } nh_tty_ProgramPrototype;
-
+    
     typedef struct nh_tty_Program {
         nh_tty_ProgramPrototype *Prototype_p;
         void *handle_p;
diff --git a/src/lib/nhtty/Editor/ChangesFile.c b/src/lib/nhtty/Editor/ChangesFile.c
index 8c87fb7..a660d03 100644
--- a/src/lib/nhtty/Editor/ChangesFile.c
+++ b/src/lib/nhtty/Editor/ChangesFile.c
@@ -163,7 +163,7 @@ NH_TTY_BEGIN()
 //    File_p->summary_p = nh_make_getChangesSummary(File_p->Root_p);
 //    File_p->Modules_p = nh_make_getChangesModules(File_p->Root_p, &File_p->modules);
 
-    nh_encoding_freeUTF8String(&Path);
+    nh_encoding_freeUTF8(&Path);
 
 #include NH_TTY_DEFAULT_CHECK
 
diff --git a/src/lib/nhtty/Editor/Editor.c b/src/lib/nhtty/Editor/Editor.c
index d8c0835..44f8155 100644
--- a/src/lib/nhtty/Editor/Editor.c
+++ b/src/lib/nhtty/Editor/Editor.c
@@ -119,7 +119,7 @@ NH_TTY_BEGIN()
 //    int n = scandir(CurrentPath.p, &namelist_pp, 0, alphasort);
 //    if (n < 0) {NH_TTY_DIAGNOSTIC_END(NH_TTY_ERROR_BAD_STATE)}
 //
-//    nh_encoding_freeUTF8String(&CurrentPath);
+//    nh_encoding_freeUTF8(&CurrentPath);
 //
 //    for (int i = 0; i < Node_p->Children.size; ++i)
 //    {
@@ -448,7 +448,7 @@ NH_TTY_BEGIN()
                 nh_encoding_UTF32String *Argument_p = Arguments_p->pp[0];
                 nh_encoding_UTF8String Argument = nh_encoding_encodeUTF8(Argument_p->p, Argument_p->length);
                 Editor_p->FileEditor.tabSpaces = strtol(Argument.p, NULL, 10);
-                nh_encoding_freeUTF8String(&Argument);
+                nh_encoding_freeUTF8(&Argument);
             }
 
             NH_BYTE tabSpaces_p[16];
diff --git a/src/lib/nhtty/Editor/File.c b/src/lib/nhtty/Editor/File.c
index b67b3d6..11440ea 100644
--- a/src/lib/nhtty/Editor/File.c
+++ b/src/lib/nhtty/Editor/File.c
@@ -164,7 +164,7 @@ NH_TTY_BEGIN()
         type = NH_TTY_FILE_CHANGES;
     }
 
-    nh_encoding_freeUTF8String(&Path);
+    nh_encoding_freeUTF8(&Path);
 
 NH_TTY_END(type)
 }
diff --git a/src/lib/nhtty/Editor/TextFile.c b/src/lib/nhtty/Editor/TextFile.c
index 4575008..57b73bd 100644
--- a/src/lib/nhtty/Editor/TextFile.c
+++ b/src/lib/nhtty/Editor/TextFile.c
@@ -145,7 +145,7 @@ NH_TTY_BEGIN()
     long length;
     FILE *f = fopen(Path.p, "r");
 
-    nh_encoding_freeUTF8String(&Path);
+    nh_encoding_freeUTF8(&Path);
 
     if (f)
     {
@@ -309,15 +309,15 @@ NH_TTY_BEGIN()
 
         if (i + 1 < File_p->Lines.size) {nh_appendToString(&Result, "\n", 1);}
 
-        nh_encoding_freeUTF8String(&Line);
+        nh_encoding_freeUTF8(&Line);
     }
 
     nh_encoding_UTF8String Path = nh_encoding_encodeUTF8(Path_p->p, Path_p->length);
 
     nh_writeBytesToFile(Path.p, Result.p);
 
-    nh_encoding_freeUTF8String(&Result);
-    nh_encoding_freeUTF8String(&Path);
+    nh_encoding_freeUTF8(&Result);
+    nh_encoding_freeUTF8(&Path);
 
 NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
 }
@@ -495,7 +495,7 @@ NH_TTY_BEGIN()
             NH_BYTE p[4] = {'\0'};
             nh_encoding_UTF8String Result = nh_encoding_encodeUTF8(Line_p->RenderCodepoints.p + offsetLength, lineLength);
             nh_appendToString(String_p, Result.p, Result.length);
-            nh_encoding_freeUTF8String(&Result);
+            nh_encoding_freeUTF8(&Result);
         }
 
         for (int i = lineWidth; i > 0; --i) {nh_appendToString(String_p, " ", 1);}
diff --git a/src/lib/nhtty/Editor/TreeListing.c b/src/lib/nhtty/Editor/TreeListing.c
index 44d6a04..6531022 100644
--- a/src/lib/nhtty/Editor/TreeListing.c
+++ b/src/lib/nhtty/Editor/TreeListing.c
@@ -50,7 +50,7 @@ NH_TTY_BEGIN()
     nh_encoding_UTF8String Path = nh_encoding_encodeUTF8(Node_p->Path.p, Node_p->Path.length);
     struct stat path_stat;
     stat(Path.p, &path_stat);
-    nh_encoding_freeUTF8String(&Path);
+    nh_encoding_freeUTF8(&Path);
 
 NH_TTY_END(S_ISREG(path_stat.st_mode))
 }
@@ -152,7 +152,7 @@ NH_TTY_BEGIN()
     int n = scandir(CurrentPath.p, &namelist_pp, 0, alphasort);
     if (n < 0) {NH_TTY_DIAGNOSTIC_END(NH_TTY_ERROR_BAD_STATE)}
 
-    nh_encoding_freeUTF8String(&CurrentPath);
+    nh_encoding_freeUTF8(&CurrentPath);
 
     for (int i = 0; i < n; ++i) 
     {
@@ -263,7 +263,7 @@ NH_TTY_BEGIN()
     nh_encoding_UTF8String Path = nh_encoding_encodeUTF8(Node_p->Path.p, Node_p->Path.length);
 
     remove(Path.p);
-    nh_encoding_freeUTF8String(&Path);
+    nh_encoding_freeUTF8(&Path);
 
     NH_TTY_CHECK(nh_tty_setCustomMessage(
         Status_p, NH_TTY_MESSAGE_EDITOR_FILE_REMOVED, Node_p->Path.p, Node_p->Path.length
@@ -576,7 +576,7 @@ NH_TTY_BEGIN()
 
         sprintf(row_p + offset, Name.p);
 
-        nh_encoding_freeUTF8String(&Name);
+        nh_encoding_freeUTF8(&Name);
 
         if (!nh_tty_isRegularFile(Node_p)) {
             row_p[strlen(row_p)] = '/'; 
diff --git a/src/lib/nhtty/TTY/Console.c b/src/lib/nhtty/TTY/Console.c
index 8fb13a5..64d6902 100644
--- a/src/lib/nhtty/TTY/Console.c
+++ b/src/lib/nhtty/TTY/Console.c
@@ -383,7 +383,7 @@ NH_TTY_BEGIN()
     nh_appendToString(Row_p, UTF8.p, UTF8.length);
     nh_appendToString(Row_p, " ", 1);
 
-    nh_encoding_freeUTF8String(&UTF8);
+    nh_encoding_freeUTF8(&UTF8);
 
     cols -= (Program_p->Prototype_p->Name.length + 2);
 
@@ -402,7 +402,7 @@ NH_TTY_BEGIN()
 
     for (int i = 0; i < cols - length; ++i) {nh_appendToString(Row_p, " ", 1);}
 
-    nh_encoding_freeUTF8String(&UTF8);
+    nh_encoding_freeUTF8(&UTF8);
 
 NH_TTY_END(NH_TTY_SUCCESS)
 }
@@ -492,7 +492,7 @@ NH_TTY_BEGIN()
         nh_appendToString(Row_p, " ", 1);
     }
 
-    nh_encoding_freeUTF8String(&Name);
+    nh_encoding_freeUTF8(&Name);
 
 NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
 }
diff --git a/src/lib/nhtty/TTY/Program.c b/src/lib/nhtty/TTY/Program.c
index 9e2e8ef..94f099a 100644
--- a/src/lib/nhtty/TTY/Program.c
+++ b/src/lib/nhtty/TTY/Program.c
@@ -77,6 +77,23 @@ NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
 
 // ADD =============================================================================================
 
+static NH_TTY_RESULT nh_tty_updateProgramInstances(
+    nh_tty_TTY *TTY_p)
+{
+NH_TTY_BEGIN()
+
+    nh_List Tiles = nh_tty_getTiles(TTY_p->Tab_p->RootTile_p);
+    for (int i = 0; i < Tiles.size; ++i) {
+        nh_tty_Tile *Tile_p = Tiles.pp[i];
+        NH_TTY_CHECK(NH_TTY_ERROR_BAD_STATE, nh_tty_appendProgramInstance(
+            Tile_p->Console.Programs_p, TTY_p->Prototypes.pp[TTY_p->Prototypes.size - 1], &TTY_p->Views
+        ))
+    }
+    nh_freeList(&Tiles, NH_FALSE);
+
+NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
+}
+
 static NH_ENCODING_UTF32 defaultNames_pp[4][20] = {
     {101, 100, 105, 116, 111, 114}, // editor
     {108, 111, 103, 103, 101, 114}, // logger
@@ -85,13 +102,13 @@ static NH_ENCODING_UTF32 defaultNames_pp[4][20] = {
 };
 
 NH_TTY_RESULT nh_tty_addDefaultProgram(
-    nh_tty_TTY *Terminal_p, NH_BYTE *name_p)
+    nh_tty_TTY *TTY_p, NH_BYTE *name_p)
 {
 NH_TTY_BEGIN()
     
-    if (!Terminal_p || !name_p) {NH_TTY_DIAGNOSTIC_END(NH_TTY_ERROR_BAD_STATE)}
+    if (!TTY_p || !name_p) {NH_TTY_DIAGNOSTIC_END(NH_TTY_ERROR_BAD_STATE)}
 
-    nh_List *Prototypes_p = &Terminal_p->Prototypes;
+    nh_List *Prototypes_p = &TTY_p->Prototypes;
 
     if (!strcmp(name_p, "editor")) {
 
@@ -159,14 +176,20 @@ NH_TTY_BEGIN()
     }
     else {NH_TTY_DIAGNOSTIC_END(NH_TTY_ERROR_BAD_STATE)}
 
-    nh_List Tiles = nh_tty_getTiles(((nh_tty_TTY*)Terminal_p)->Tab_p->RootTile_p);
-    for (int i = 0; i < Tiles.size; ++i) {
-        nh_tty_Tile *Tile_p = Tiles.pp[i];
-        NH_TTY_CHECK(NH_TTY_ERROR_BAD_STATE, nh_tty_appendProgramInstance(
-            Tile_p->Console.Programs_p, Prototypes_p->pp[Prototypes_p->size - 1], &Terminal_p->Views
-        ))
-    }
-    nh_freeList(&Tiles, NH_FALSE);
+    NH_TTY_CHECK(NH_TTY_ERROR_BAD_STATE, nh_tty_updateProgramInstances(TTY_p))
+
+NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
+}
+
+NH_TTY_RESULT nh_tty_addProgram(
+    nh_tty_TTY *TTY_p, nh_tty_ProgramPrototype *Prototype_p)
+{
+NH_TTY_BEGIN()
+    
+    if (!TTY_p || !Prototype_p) {NH_TTY_DIAGNOSTIC_END(NH_TTY_ERROR_BAD_STATE)}
+
+    NH_TTY_CHECK(NH_TTY_ERROR_BAD_STATE, nh_appendToList(&TTY_p->Prototypes, Prototype_p))
+    NH_TTY_CHECK(NH_TTY_ERROR_BAD_STATE, nh_tty_updateProgramInstances(TTY_p))
 
 NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
 }
@@ -199,6 +222,10 @@ NH_TTY_RESULT nh_tty_incrementProgramViews(
 {
 NH_TTY_BEGIN()
 
+#include NH_TTY_DEFAULT_CHECK
+
+    NH_TTY_CHECK_NULL(TTY_p)
+
     nh_List Tiles = nh_tty_getTiles(TTY_p->Tab_p->RootTile_p);
     for (int i = 0; i < Tiles.size; ++i) {
         nh_tty_Tile *Tile_p = Tiles.pp[i];
@@ -213,6 +240,8 @@ NH_TTY_BEGIN()
     }
     nh_freeList(&Tiles, NH_FALSE);
 
+#include NH_TTY_CUSTOM_CHECK
+
 NH_TTY_END(NH_TTY_SUCCESS)
 }
 
diff --git a/src/lib/nhtty/TTY/TTY.c b/src/lib/nhtty/TTY/TTY.c
index 7da7bea..aa092bc 100644
--- a/src/lib/nhtty/TTY/TTY.c
+++ b/src/lib/nhtty/TTY/TTY.c
@@ -99,6 +99,22 @@ NH_TTY_BEGIN()
 NH_TTY_SILENT_END()
 }
 
+static nh_tty_Config nh_tty_initConfig()
+{
+NH_TTY_BEGIN()
+
+    nh_tty_Config Config;
+
+    Config.topbars = NH_TRUE;
+    Config.topbarsColor = NH_TTY_COLOR_YELLOW;
+    Config.verticalBorders = NH_TRUE;
+    Config.verticalBordersColor = NH_TTY_COLOR_NONE;
+    Config.horizontalBorders = NH_TRUE;
+    Config.horizontalBordersColor = NH_TTY_COLOR_NONE;
+
+NH_TTY_END(Config)
+}
+
 void *nh_tty_initTTY(
     nh_Workload *Workload_p)
 {
@@ -114,6 +130,7 @@ NH_TTY_BEGIN()
     nh_tty_TTY *TTY_p = nh_allocate(sizeof(nh_tty_TTY));
     NH_TTY_CHECK_MEM(NULL, TTY_p)
 
+    TTY_p->Config = nh_tty_initConfig();
     TTY_p->Tab_p = NULL;
     TTY_p->Tabs = nh_initLinkedList();
     TTY_p->Views = nh_initList(8);
diff --git a/src/lib/nhtty/TTY/TTY.h b/src/lib/nhtty/TTY/TTY.h
index d255b7f..e687968 100644
--- a/src/lib/nhtty/TTY/TTY.h
+++ b/src/lib/nhtty/TTY/TTY.h
@@ -16,6 +16,18 @@
 
 #endif
 
+/** @addtogroup lib_nhtty_enums
+ *  @{
+ */
+
+    typedef enum NH_TTY_COLOR_E {
+        NH_TTY_COLOR_NONE,
+        NH_TTY_COLOR_YELLOW,
+        NH_TTY_COLOR_RANDOM,
+    } NH_TTY_COLOR_E;
+
+/** @} */
+
 /** @addtogroup lib_nhtty_structs
  *  @{
  */
@@ -32,7 +44,17 @@
         NH_BOOL on;
     } nh_tty_TopBars;
 
+    typedef struct nh_tty_Config {
+        NH_BOOL topbars;
+        NH_TTY_COLOR_E topbarsColor;
+        NH_BOOL verticalBorders;
+        NH_TTY_COLOR_E verticalBordersColor;
+        NH_BOOL horizontalBorders;
+        NH_TTY_COLOR_E horizontalBordersColor;
+    } nh_tty_Config;
+
     typedef struct nh_tty_TTY {
+        nh_tty_Config Config;
         nh_tty_Clipboard Clipboard;
         nh_tty_Borders Borders;
 	nh_tty_TopBars TopBars;
diff --git a/src/lib/nhtty/TTY/Tiling.c b/src/lib/nhtty/TTY/Tiling.c
index 82e31cd..d3050cf 100644
--- a/src/lib/nhtty/TTY/Tiling.c
+++ b/src/lib/nhtty/TTY/Tiling.c
@@ -62,26 +62,30 @@ NH_TTY_END(Tiling)
 // UPDATE ==========================================================================================
 
 static void nh_tty_computeBorders(
-    nh_tty_Tile *Tile_p, int screenRows, int screenCols)
+    nh_tty_TTY *TTY_p, nh_tty_Tile *Tile_p, int screenRows, int screenCols)
 {
 NH_TTY_BEGIN()
 
-    if (Tile_p->colPosition + Tile_p->colSize >= screenCols) {
-        Tile_p->Tiling.Borders.left = NH_FALSE;
-        Tile_p->Tiling.Borders.right = NH_FALSE;
-    }
-    else {
-        Tile_p->Tiling.Borders.left = NH_FALSE;
-        Tile_p->Tiling.Borders.right = NH_TRUE;
+    if (TTY_p->Config.verticalBorders) {
+        if (Tile_p->colPosition + Tile_p->colSize >= screenCols) {
+            Tile_p->Tiling.Borders.left = NH_FALSE;
+            Tile_p->Tiling.Borders.right = NH_FALSE;
+        }
+        else {
+            Tile_p->Tiling.Borders.left = NH_FALSE;
+            Tile_p->Tiling.Borders.right = NH_TRUE;
+        }
     }
 
-    if (Tile_p->rowPosition + Tile_p->rowSize >= screenRows) {
-        Tile_p->Tiling.Borders.top = NH_FALSE;
-        Tile_p->Tiling.Borders.bottom = NH_FALSE;
-    }
-    else {
-        Tile_p->Tiling.Borders.top = NH_FALSE;
-        Tile_p->Tiling.Borders.bottom = NH_TRUE;
+    if (TTY_p->Config.horizontalBorders) {
+        if (Tile_p->rowPosition + Tile_p->rowSize >= screenRows) {
+            Tile_p->Tiling.Borders.top = NH_FALSE;
+            Tile_p->Tiling.Borders.bottom = NH_FALSE;
+        }
+        else {
+            Tile_p->Tiling.Borders.top = NH_FALSE;
+            Tile_p->Tiling.Borders.bottom = NH_TRUE;
+        }
     }
 
 NH_TTY_SILENT_END()
@@ -110,9 +114,7 @@ NH_TTY_BEGIN()
     nh_tty_TTY *TTY_p = nh_tty_getTTY();
     NH_TTY_CHECK_NULL(TTY_p)
 
-    if (TTY_p->Borders.on) {
-        nh_tty_computeBorders(Tile_p, screenRows, screenCols);
-    }
+    nh_tty_computeBorders(TTY_p, Tile_p, screenRows, screenCols);
 
 //    if (Tile_p->Console.Programs_p != NULL) {
 //        nh_tty_resizeShell(nh_tty_getProgram(Tile_p->Console.Programs_p, NH_TTY_SHELL_NAME)->handle_p, Tile_p->rowSize, Tile_p->colSize, -1, -1);
@@ -161,7 +163,7 @@ NH_TTY_BEGIN()
     nh_encoding_freeUTF32(&Tile_p->Tiling.TopBar);
     Tile_p->Tiling.TopBar = nh_encoding_initUTF32(32);
 
-    if (TTY_p->TopBars.on) {
+    if (TTY_p->Config.topbars) {
 	if (nh_tty_getCurrentProgram(&Tile_p->Console)) {
 	    nh_encoding_appendUTF32(&Tile_p->Tiling.TopBar, nh_tty_getCurrentProgram(&Tile_p->Console)->Prototype_p->Name.p, nh_tty_getCurrentProgram(&Tile_p->Console)->Prototype_p->Name.length);
 	}
@@ -567,9 +569,8 @@ NH_TTY_BEGIN()
     int length = Message_p->length > cols ? cols : Message_p->length;
     nh_encoding_UTF8String UTF8 = nh_encoding_encodeUTF8(Message_p->p, length);
     nh_appendToString(Row_p, UTF8.p, UTF8.length);
-    for (int i = 0; i < cols - length; ++i) {
-        nh_appendToString(Row_p, " ", 1); 
-    }
+    nh_appendByteToStringRepeatedly(Row_p, ' ', cols - length);
+    nh_encoding_freeUTF8(&UTF8);
 
 NH_TTY_DIAGNOSTIC_END(NH_TTY_SUCCESS)
 }
@@ -588,9 +589,7 @@ NH_TTY_BEGIN()
         NH_TTY_CHECK(nh_tty_drawTilingMessageRowMessage(Tile_p, Row_p, cols, &Tile_p->Tiling.TopBar))
     }
     else {
-        for (int i = 0; i < cols; ++i) {
-            nh_appendToString(Row_p, " ", 1); 
-        }
+        nh_appendByteToStringRepeatedly(Row_p, ' ', cols);
     }
 
     nh_appendToString(Row_p, "\e[0m", 4);
diff --git a/src/lib/nhurl/Common/Result.h b/src/lib/nhurl/Common/Result.h
index 8f73b18..ebe2fe1 100644
--- a/src/lib/nhurl/Common/Result.h
+++ b/src/lib/nhurl/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhurl_enums 
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -28,10 +26,7 @@
     } NH_URL_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhurl_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_URL_RESULTS_PP[];
     extern unsigned int NH_URL_RESULTS_PP_COUNT;
diff --git a/src/lib/nhurl/Common/Test.c b/src/lib/nhurl/Common/Test.c
index 097473c..c8c15ab 100644
--- a/src/lib/nhurl/Common/Test.c
+++ b/src/lib/nhurl/Common/Test.c
@@ -81,7 +81,7 @@ int nh_url_testURLParser(
     if (URL.Scheme.length > 0) {
         nh_encoding_UTF8String Scheme = nh_encoding_encodeUTF8(URL.Scheme.p, URL.Scheme.length);
         sprintf(output_p+strlen(output_p), "scheme:\"%s\"", Scheme.p); 
-        nh_encoding_freeUTF8String(&Scheme);
+        nh_encoding_freeUTF8(&Scheme);
     }
 
     if (URL.Host_p) {
diff --git a/src/lib/nhurl/Common/Types/Public.h b/src/lib/nhurl/Common/Types/Public.h
index a9ef9da..cb4893d 100644
--- a/src/lib/nhurl/Common/Types/Public.h
+++ b/src/lib/nhurl/Common/Types/Public.h
@@ -16,19 +16,14 @@
 
 #endif
 
-/** @addtogroup lib_nhurl_typedefs
- *  @{
- */
+/** @{ */
 
     typedef uint16_t NH_URL_PORT;
     typedef uint16_t NH_URL_IPV6_PIECE;
     typedef uint32_t NH_URL_IPV4_ADDRESS;
 
 /** @} */
-
-/** @addtogroup lib_nhurl_enums
- *  @{
- */
+/** @{ */
 
     typedef enum NH_URL_HOST {
         NH_URL_HOST_DOMAIN,
@@ -39,10 +34,7 @@
     } NH_URL_HOST;
 
 /** @} */
-
-/** @addtogroup lib_nhurl_structs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_url_DomainOrOpaqueHost {
         NH_URL_HOST type;
diff --git a/src/lib/nhwebidl/Common/Result.h b/src/lib/nhwebidl/Common/Result.h
index 0801ad0..b308c7a 100644
--- a/src/lib/nhwebidl/Common/Result.h
+++ b/src/lib/nhwebidl/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhwebidl_enums
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -28,10 +26,7 @@
     } NH_WEBIDL_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhwebidl_structs
- *  @{
- */ 
+/** @{ */
 
 //    /**
 //     * Return values for functions.
@@ -51,10 +46,7 @@
 //    } nh_webidl_Boolean;
 
 /** @} */
-
-/** @addtogroup lib_nhwebidl_vars
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_WEBIDL_RESULTS_PP[];
     extern unsigned int NH_WEBIDL_RESULTS_PP_COUNT;
diff --git a/src/lib/nhwebidl/Common/Types/Public.h b/src/lib/nhwebidl/Common/Types/Public.h
index a6e086f..b922777 100644
--- a/src/lib/nhwebidl/Common/Types/Public.h
+++ b/src/lib/nhwebidl/Common/Types/Public.h
@@ -16,9 +16,7 @@
 
 #endif
 
-/** @addtogroup lib_nhwebidl_enums
- *  @{
- */
+/** @{ */
 
     typedef enum NH_WEBIDL_TYPE {
         NH_WEBIDL_TYPE_WILDCARD,
@@ -46,10 +44,7 @@
     } NH_WEBIDL_TYPE;
 
 /** @} */
-
-/** @addtogroup lib_nhwebidl_typedefs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_webidl_ParseNode nh_webidl_ParseNode;
 
@@ -75,10 +70,7 @@
     typedef nh_BigInt nh_webidl_BigInt;
 
 /** @} */
-
-/** @addtogroup lib_nhwebidl_structs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_webidl_Specification {
         NH_BYTE name_p[255];
diff --git a/src/lib/nhwsi/Common/Result.h b/src/lib/nhwsi/Common/Result.h
index 719b3c9..5f82518 100644
--- a/src/lib/nhwsi/Common/Result.h
+++ b/src/lib/nhwsi/Common/Result.h
@@ -11,9 +11,7 @@
 
 #endif
 
-/** @addtogroup lib_nhwsi_enums
- *  @{
- */ 
+/** @{ */
 
     /**
      * Return values for functions.
@@ -28,10 +26,7 @@
     } NH_WSI_RESULT;
 
 /** @} */
-
-/** @addtogroup lib_nhwsi_vars 
- *  @{
- */ 
+/** @{ */
 
     extern const char *NH_WSI_RESULTS_PP[];
     extern unsigned int NH_WSI_RESULTS_PP_COUNT;
diff --git a/src/lib/nhwsi/Common/Types/Public.h b/src/lib/nhwsi/Common/Types/Public.h
index 41c6125..9935e37 100644
--- a/src/lib/nhwsi/Common/Types/Public.h
+++ b/src/lib/nhwsi/Common/Types/Public.h
@@ -13,12 +13,11 @@
 
 #include "../../../nhcore/Common/Types/Public.h"
 #include "../../../nhencoding/Common/Types/Public.h"
+#include "../../../nhgfx/Common/Types/Public.h"
 
 #endif
 
-/** @addtogroup lib_nhwsi_enums
- *  @{
- */
+/** @{ */
 
     typedef enum NH_WSI_TYPE {
         NH_WSI_TYPE_X11,
@@ -84,10 +83,7 @@
     } NH_WSI_MOUSE_FLAG;
 
 /** @} */
-
-/** @addtogroup lib_nhwsi_structs
- *  @{
- */
+/** @{ */
 
     typedef struct nh_wsi_Event {
         NH_WSI_EVENT type;
@@ -111,11 +107,14 @@
         NH_WSI_TRIGGER trigger; 
     } nh_wsi_KeyboardEvent;            
 
-/** @} */
+    typedef struct nh_wsi_WindowConfiguration {
+        NH_BYTE *title_p; 
+        nh_PixelSize Size;
+        nh_PixelPosition Position;
+    } nh_wsi_WindowConfiguration;
 
-/** @addtogroup lib_nhwsi_typedefs
- *  @{
- */
+/** @} */
+/** @{ */
 
     typedef struct nh_wsi_Window nh_wsi_Window;
     typedef void (*nh_wsi_callback_f)(
diff --git a/src/lib/nhwsi/Main/Window.c b/src/lib/nhwsi/Main/Window.c
index 6d3230b..bb8dd15 100644
--- a/src/lib/nhwsi/Main/Window.c
+++ b/src/lib/nhwsi/Main/Window.c
@@ -29,6 +29,23 @@
 #include <stdlib.h>
 #include <stdint.h>
 
+// CONFIGURATION ====================================================================================
+
+// API function.
+NH_WSI_RESULT nh_wsi_initWindowConfiguration(
+    nh_wsi_WindowConfiguration *WindowConfiguration_p)
+{
+NH_WSI_BEGIN()
+
+    WindowConfiguration_p->title_p = NULL;
+    WindowConfiguration_p->Size.width = 1000;
+    WindowConfiguration_p->Size.height = 1000;
+    WindowConfiguration_p->Position.x = 0;
+    WindowConfiguration_p->Position.y = 0;
+
+NH_WSI_DIAGNOSTIC_END(NH_WSI_SUCCESS)
+}
+
 // CREATE ==========================================================================================
 
 static NH_WSI_TYPE nh_wsi_getType()
@@ -50,7 +67,7 @@ NH_WSI_END(type)
 }
 
 nh_wsi_Window *nh_wsi_createWindow(
-    NH_BYTE *title_p, nh_PixelSize Size)
+    nh_wsi_WindowConfiguration Configuration, nh_gfx_SurfaceRequirements *Requirements_p)
 {
 NH_WSI_BEGIN();
 
@@ -58,6 +75,7 @@ NH_WSI_BEGIN();
 
     nh_wsi_Window Window;
 
+    Window.Configuration = Configuration;
     Window.surface_p = NULL;
     Window.callback_f = NULL;
     Window.type = nh_wsi_getType();
@@ -65,9 +83,13 @@ NH_WSI_BEGIN();
 
     switch (Window.type)
     {
-        case NH_WSI_TYPE_X11   : NH_WSI_CHECK(NULL, nh_X11_createWindow(title_p, Size.width, Size.height, &Window.X11)) break;
-        case NH_WSI_TYPE_WIN32 : NH_WSI_CHECK(NULL, nh_Win32_createWindow(title_p, Size.width, Size.height, &Window.Win32)) break;
-        default                : NH_WSI_END(NULL)
+        case NH_WSI_TYPE_X11 : 
+            NH_WSI_CHECK(NULL, nh_X11_createWindow(&Window.X11, &Configuration, Requirements_p))
+            break;
+        case NH_WSI_TYPE_WIN32 : 
+            NH_WSI_CHECK(NULL, nh_Win32_createWindow(&Window.Win32, &Configuration, Requirements_p)) 
+            break;
+        default : NH_WSI_END(NULL)
     }
 
     if (!NH_WSI_LISTENER.running) {
diff --git a/src/lib/nhwsi/Main/Window.h b/src/lib/nhwsi/Main/Window.h
index c59982f..78985ad 100644
--- a/src/lib/nhwsi/Main/Window.h
+++ b/src/lib/nhwsi/Main/Window.h
@@ -22,6 +22,7 @@
 
     typedef struct nh_wsi_Window {
         NH_WSI_TYPE type;
+        nh_wsi_WindowConfiguration Configuration;
         void *surface_p;
         nh_X11_Window X11;
         nh_Win32_Window Win32;
@@ -34,8 +35,12 @@
  *  @{
  */
 
+    typedef NH_WSI_RESULT (*nh_wsi_initWindowConfiguration_f)(
+        nh_wsi_WindowConfiguration *Configuration_p
+    );
+
     typedef nh_wsi_Window *(*nh_wsi_createWindow_f)(
-        NH_BYTE *title_p, nh_PixelSize Size
+        nh_wsi_WindowConfiguration Configuration, nh_gfx_SurfaceRequirements *Requirements_p
     );
    
     typedef NH_WSI_RESULT (*nh_wsi_setEventListener_f)(
@@ -49,7 +54,7 @@
  */
     
     nh_wsi_Window *nh_wsi_createWindow(
-        NH_BYTE *title_p, nh_PixelSize Size
+        nh_wsi_WindowConfiguration Configuration, nh_gfx_SurfaceRequirements *Requirements_p
     );
     
     NH_WSI_RESULT nh_wsi_destroyWindow(
diff --git a/src/lib/nhwsi/Platforms/Win32.c b/src/lib/nhwsi/Platforms/Win32.c
index eb0fa39..1b18fb5 100644
--- a/src/lib/nhwsi/Platforms/Win32.c
+++ b/src/lib/nhwsi/Platforms/Win32.c
@@ -61,7 +61,8 @@ NH_WSI_DIAGNOSTIC_END(NH_WSI_ERROR_BAD_STATE)
 // WINDOW ==========================================================================================
 
 NH_WSI_RESULT nh_Win32_createWindow(
-    char *title, int width, int height, nh_Win32_Window *Window_p)
+    nh_Win32_Window *Window_p, nh_wsi_WindowConfiguration *Configuration_p, 
+    nh_gfx_SurfaceRequirements *Requirements_p)
 {
 NH_WSI_BEGIN()
 
diff --git a/src/lib/nhwsi/Platforms/Win32.h b/src/lib/nhwsi/Platforms/Win32.h
index a77bf5c..75e6bce 100644
--- a/src/lib/nhwsi/Platforms/Win32.h
+++ b/src/lib/nhwsi/Platforms/Win32.h
@@ -17,6 +17,8 @@
 
 #endif
 
+typedef struct nh_wsi_WindowConfiguration nh_wsi_WindowConfiguration;
+
 /** @addtogroup Structs
  *  @{
  */
@@ -45,7 +47,8 @@
     ); 
 
     NH_WSI_RESULT nh_Win32_createWindow(
-        char *title, int width, int height, nh_Win32_Window *Window_p
+        nh_Win32_Window *Window_p, nh_wsi_WindowConfiguration *Configuration_p, 
+        nh_gfx_SurfaceRequirements *Requirements_p
     );
     
     NH_WSI_RESULT nh_Win32_destroyWindow(
diff --git a/src/lib/nhwsi/Platforms/X11.c b/src/lib/nhwsi/Platforms/X11.c
index 986105f..0c304d6 100644
--- a/src/lib/nhwsi/Platforms/X11.c
+++ b/src/lib/nhwsi/Platforms/X11.c
@@ -18,6 +18,8 @@
 #include NH_WSI_DEFAULT_CHECK
 #include NH_WSI_FLOW
 
+#include "../../nhgfx/Base/Surface.h"
+
 #include <fcntl.h>
 #include <time.h>
 #include <stdio.h>
@@ -275,7 +277,8 @@ NH_WSI_DIAGNOSTIC_END(NH_WSI_ERROR_BAD_STATE)
 // WINDOW ==========================================================================================
 
 NH_WSI_RESULT nh_X11_createWindow(
-    NH_BYTE *title, int width, int height, nh_X11_Window *Window_p)
+    nh_X11_Window *Window_p, nh_wsi_WindowConfiguration *Configuration_p,
+    nh_gfx_SurfaceRequirements *Requirements_p)
 {
 NH_WSI_BEGIN()
 
@@ -303,27 +306,84 @@ NH_WSI_BEGIN()
         Window_p->Keymap_p, Window_p->Connection_p, Window_p->keyboardDeviceID
     );
 
-// RGBA color for transparency
-    XVisualInfo vinfo;
-    XMatchVisualInfo(Display_p, DefaultScreen(Display_p), 32, TrueColor, &vinfo);
+// window 
+
+    XVisualInfo Template = {0};
+    Template.screen = 0;
+    Template.depth = 32;
+    Template.class = TrueColor;
+    Template.red_mask = 0xff0000;
+    Template.green_mask = 0xff00;
+    Template.blue_mask = 0xff;
+    Template.colormap_size = 256;
+    Template.bits_per_rgb = 8;
+
+    long mask = 
+      VisualScreenMask
+    | VisualDepthMask
+    | VisualClassMask
+    | VisualRedMaskMask
+    | VisualGreenMaskMask
+    | VisualBlueMaskMask
+    | VisualColormapSizeMask
+    | VisualBitsPerRGBMask;
+
+    int infos = 0;
+    XVisualInfo *Infos_p = XGetVisualInfo(Display_p, mask, &Template, &infos);
+    XVisualInfo *Info_p = NULL;
+
+    for (int i = 0; i < infos; ++i) {
+        if (!Requirements_p) {
+            Info_p = Infos_p;
+            Window_p->Info = *Info_p;
+            break;
+        }
+        for (int j = 0; j < Requirements_p->OpenGL.Ids.length; ++j) {
+            if (Infos_p[i].visualid == ((VisualID*)Requirements_p->OpenGL.Ids.p)[j]) {
+                Info_p = Infos_p+i;
+                Window_p->Info = *Info_p;
+                break;
+            }
+        }
+    }
 
-// transparent window
-    XSetWindowAttributes Attributes;
-    Attributes.event_mask = StructureNotifyMask | KeyPressMask | KeyReleaseMask | ButtonPressMask | ButtonReleaseMask | PointerMotionMask | EnterWindowMask | LeaveWindowMask | FocusChangeMask | ExposureMask;
-    Attributes.border_pixel = 0;
-    Attributes.background_pixel = 0xff000000; // ARGB
-    Attributes.colormap = XCreateColormap(Display_p, DefaultRootWindow(Display_p), vinfo.visual, AllocNone);
+    if (!Info_p) {
+        NH_WSI_DIAGNOSTIC_END(NH_WSI_ERROR_BAD_STATE)
+    }
 
-    Window_p->XWindow = XCreateWindow(
-        Display_p, DefaultRootWindow(Display_p), 0, 0, width, height, 0,
-        vinfo.depth, InputOutput, vinfo.visual, CWEventMask | CWBackPixel | CWBorderPixel | CWColormap, 
-        &Attributes
-    );
-    
-//    Window_p->XWindow = XCreateSimpleWindow(Display_p, DefaultRootWindow(Display_p), 0, 0, width, height, 0, 0, 0);
+    XSetWindowAttributes Attributes = {0,};
+
+    Attributes.colormap = 
+        XCreateColormap(Display_p, DefaultRootWindow(Display_p), Info_p->visual, AllocNone);
+    Attributes.background_pixmap = None;
+    Attributes.border_pixmap = None;
+    Attributes.border_pixel = 0;
+    Attributes.event_mask =
+        StructureNotifyMask
+      | EnterWindowMask
+      | LeaveWindowMask
+      | ExposureMask
+      | ButtonPressMask
+      | ButtonReleaseMask
+      | OwnerGrabButtonMask
+      | PointerMotionMask
+      | KeyPressMask
+      | FocusChangeMask
+      | KeyReleaseMask;
+
+    int attributesMask = 
+        CWBackPixmap|
+        CWColormap|
+        CWBorderPixel|
+        CWEventMask;
+
+    Window_p->XWindow = XCreateWindow(Display_p, DefaultRootWindow(Display_p), Configuration_p->Position.x,
+        Configuration_p->Position.y, Configuration_p->Size.width, Configuration_p->Size.height, 0, Info_p->depth,
+        InputOutput, Info_p->visual, attributesMask, &Attributes);
 
     XMapWindow(Display_p, Window_p->XWindow);
-    
+    XFree(Infos_p);
+
 // window delete protocol
     Window_p->DeleteAtom = XInternAtom(Display_p, "WM_DELETE_WINDOW", 0);
     XSetWMProtocols(Display_p, Window_p->XWindow, &Window_p->DeleteAtom, 1);
@@ -337,7 +397,8 @@ NH_WSI_BEGIN()
     );
 
 // window name   
-    XStoreName(Display_p, Window_p->XWindow, title);
+    XStoreName(Display_p, Window_p->XWindow, 
+        Configuration_p->title_p ? Configuration_p->title_p : "[Placeholder Window Title]");
 
 // center window
 //    Screen *Screen_p = ScreenOfDisplay(Display_p, DefaultScreen(Display_p));
diff --git a/src/lib/nhwsi/Platforms/X11.h b/src/lib/nhwsi/Platforms/X11.h
index 268f2bf..eb3031a 100644
--- a/src/lib/nhwsi/Platforms/X11.h
+++ b/src/lib/nhwsi/Platforms/X11.h
@@ -15,12 +15,15 @@
     #include <wayland-server.h>
     #include <X11/Xlib.h>
     #include <X11/Xatom.h>
+    #include <X11/extensions/Xrender.h>
     #include <linux/input.h>
     #include <X11/Xlib-xcb.h>
     #include <xkbcommon/xkbcommon-x11.h>
     #include <sys/mman.h>
 #endif
 
+typedef struct nh_wsi_WindowConfiguration nh_wsi_WindowConfiguration;
+
 #endif
 
 /** @addtogroup IOStructs Structs
@@ -29,9 +32,7 @@
  */
 
     typedef struct nh_X11_Window {
-
         int ignore;
-
     #ifdef __unix__
         Display *Display_p;             
         Window XWindow;                 
@@ -41,8 +42,8 @@
         struct xkb_keymap *Keymap_p;    
         struct xkb_state *State_p;      
         struct xkb_context *Context_p;  
+        XVisualInfo Info;
     #endif
-
     } nh_X11_Window;
 
 /** @} */
@@ -57,9 +58,10 @@
     ); 
 
     NH_WSI_RESULT nh_X11_createWindow(
-        NH_BYTE *title, int width, int height, nh_X11_Window *Window_p
+        nh_X11_Window *Window_p, nh_wsi_WindowConfiguration *Configuration_p,
+        nh_gfx_SurfaceRequirements *Requirements_p
     );
-    
+
     NH_WSI_RESULT nh_X11_destroyWindow(
         nh_X11_Window *Window_p
     );
-- 
2.35.1

